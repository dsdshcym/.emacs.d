#+TITLE: Emacs Literate Configuration
#+FILETAGS: Emacs
#+PROPERTY: header-args :tangle yes :results silent

* Literate Emacs Config
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 11:46]
:ID:       862BFFED-2F54-4769-8064-FFF87E8B6A6F
:END:
:LOGBOOK:
CLOCK: [2018-03-02 Fri 11:45]--[2018-03-02 Fri 11:58] =>  0:13
CLOCK: [2018-03-02 Fri 10:52]--[2018-03-02 Fri 11:38] =>  0:46
CLOCK: [2018-03-02 Fri 10:42]--[2018-03-02 Fri 10:48] =>  0:06
CLOCK: [2018-03-01 Thu 17:16]--[2018-03-01 Thu 18:21] =>  1:05
CLOCK: [2018-03-01 Thu 15:42]--[2018-03-01 Thu 17:15] =>  1:33
CLOCK: [2018-03-01 Thu 14:12]--[2018-03-01 Thu 15:22] =>  1:10
CLOCK: [2018-03-01 Thu 13:57]--[2018-03-01 Thu 14:09] =>  0:12
CLOCK: [2018-03-01 Thu 11:28]--[2018-03-01 Thu 13:03] =>  1:35
CLOCK: [2018-02-28 Wed 17:29]--[2018-02-28 Wed 18:32] =>  1:03
CLOCK: [2018-02-28 Wed 15:53]--[2018-02-28 Wed 17:24] =>  1:31
CLOCK: [2018-02-28 Wed 15:09]--[2018-02-28 Wed 15:47] =>  0:38
CLOCK: [2018-02-28 Wed 11:46]--[2018-02-28 Wed 11:47] =>  0:01
:END:
** TODO [[https://github.com/gilbertw1/emacs-literate-starter][gilbertw1/emacs-literate-starter: A simple template that can be used to get started with an efficient literate Emacs configuration]]
:PROPERTIES:
:CREATED: [2018-02-27 Tue 17:38]
:END:
:LOGBOOK:
CLOCK: [2018-02-28 Wed 11:47]--[2018-02-28 Wed 11:56] =>  0:09
CLOCK: [2018-02-28 Wed 11:27]--[2018-02-28 Wed 11:34] =>  0:07
CLOCK: [2018-02-27 Tue 17:30]--[2018-02-27 Tue 17:45] =>  0:15
:END:
- [[id:D32DF1C0-3FBB-4832-9CFA-1F5118DB9D08][nilcons/emacs-use-package-fast: Discussion on how to achieve fast initialization of emacs using melpa with use-package]]
*** TODO [[https://github.com/gilbertw1/bmacs][gilbertw1/bmacs: Bryan's Emacs Configuration]]
:PROPERTIES:
:CREATED: [2018-02-28 Wed 11:34]
:END:
:LOGBOOK:
CLOCK: [2018-02-28 Wed 11:34]--[2018-02-28 Wed 11:46] =>  0:12
:END:
** TODO [[https://github.com/auwsmit/emacsconfig/blob/master/config.org][emacsconfig/config.org at master Â· auwsmit/emacsconfig]]
:PROPERTIES:
:CREATED: [2017-08-11 Fri 17:44]
:END:
* About this file
This is an Emacs literate configuration template. It contains the basic structure
of a literate config along with some optimizations to ensure a fast load time.

* Personal Information
Let's set some variables with basic user information.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Yiming Chen"
      user-mail-address "dsdshcym@gmail.com")
#+END_SRC
* Constants
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:29]
:END:
#+BEGIN_SRC emacs-lisp
  (setq +emacs-directory (file-truename user-emacs-directory))
  (setq +local-directory (concat +emacs-directory ".local/"))
  (setq +packages-directory (concat +local-directory "packages/"))
  (setq +is-emacs-mac-port (eq window-system 'mac))
  (setq +is-emacs-ns (eq window-system 'ns))
#+END_SRC
* Emacs Initialization
** Settings
We're going to increase the gc-cons-threshold to a very high number to decrease the load and compile time.
We'll lower this value significantly after initialization has completed. We don't want to keep this value
too high or it will result in long GC pauses during normal usage.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq gc-cons-threshold 402653184
          gc-cons-percentage 0.6))

  (defun +set-gc-cons-variables ()
    (setq gc-cons-threshold 16777216
          gc-cons-percentage 0.1))

  (add-hook 'after-init-hook #'+set-gc-cons-variables)
#+END_SRC

Disable certain byte compiler warnings to cut down on the noise. This is a personal choice and can be removed
if you would like to see any and all byte compiler warnings.

#+BEGIN_SRC emacs-lisp
(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC
** Package Management
*** Package Settings
We're going to set the =load-path= ourselves and avoid calling =(package-initilize)= (for
performance reasons) so we need to set =package--init-file-ensured= to true to tell =package.el=
to not automatically call it on our behalf. Additionally we're setting
=package-enable-at-startup= to nil so that packages will not automatically be loaded for us since
=use-package= will be handling that.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-prefer-newer t
          package-user-dir (expand-file-name "elpa" +packages-directory)
          package--init-file-ensured t
          package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t)))
#+END_SRC
*** Initialize Package Management
Next we are going to require =package.el= and add our additional package archives, 'melpa' and 'org'.
Afterwards we need to initialize our packages and then ensure that =use-package= is installed, which
we promptly install if it's missing. Finally we load =use-package= and tell it to always install any
missing packages.

Note that this entire block is wrapped in =eval-when-compile=. The effect of this is to perform all
of the package initialization during compilation so that when byte compiled, all of this time consuming
code is skipped. This can be done because the result of byte compiling =use-package= statements results
in the macro being fully expanded at which point =use-package= isn't actually required any longer.

Since the code is automatically compiled during runtime, if the configuration hasn't already been
previously compiled manually then all of the package initialization will still take place at startup.

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'package)

    (unless (assoc-default "melpa" package-archives)
      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
    (unless (assoc-default "org" package-archives)
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))

    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t))
#+END_SRC
*** Quelpa
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 17:30]
:END:
#+BEGIN_SRC emacs-lisp
  (setq quelpa-checkout-melpa-p nil
        quelpa-update-melpa-p nil
        quelpa-melpa-recipe-stores nil
        quelpa-dir (expand-file-name "quelpa" +packages-directory))

  (eval-when-compile
    (unless (require 'quelpa nil t)
      (with-temp-buffer
        (url-insert-file-contents "https://raw.github.com/quelpa/quelpa/master/bootstrap.el")
        (eval-buffer)))
    (quelpa
     '(quelpa-use-package
       :fetcher github
       :repo "quelpa/quelpa-use-package"))
    (require 'quelpa-use-package)
    (quelpa-use-package-activate-advice))
  #+END_SRC
** Server
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 15:43]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package server
    :init
    (server-start))
#+END_SRC
** DONE [[http://emacsredux.com/blog/2014/07/25/configure-the-scratch-buffers-mode/][Configure the scratch buffer's mode - Emacs Redux]]
CLOSED: [2018-05-08 Tue 13:47]
:PROPERTIES:
:CREATED: [2018-05-08 Tue 13:46]
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2018-05-08 Tue 13:47]
CLOCK: [2018-05-08 Tue 13:46]--[2018-05-08 Tue 13:47] =>  0:01
:END:
#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'org-mode)
#+END_SRC
* Emacs Configurations
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:40]
:END:
** Better Defaults
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:40]
:END:
- url directory
  #+BEGIN_SRC emacs-lisp
    (setq url-configuration-directory (concat +local-directory "url"))
  #+END_SRC
- Do not clutter =init.el= please.
  #+BEGIN_SRC emacs-lisp
    (setq custom-file (expand-file-name "custom.el" +local-directory))
  #+END_SRC
- Do not ring bell
  #+BEGIN_SRC emacs-lisp
    (setq ring-bell-function 'ignore)
  #+END_SRC
- y/n instead of yes/no
  #+BEGIN_SRC emacs-lisp
    (fset #'yes-or-no-p #'y-or-n-p)
  #+END_SRC
- Smooth Scroll
  #+BEGIN_SRC emacs-lisp
    (setq scroll-margin 0
          scroll-conservatively 1001
          scroll-preserve-screen-position t)
  #+END_SRC
- Do not create lock files
  1. it will conflicts sometimes
  2. it messes with find-file
  #+BEGIN_SRC emacs-lisp
     (setq create-lockfiles nil)
  #+END_SRC
** UI
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:59]
:END:
*** Reaonable default
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:00]
:END:
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (tooltip-mode -1)
  (setq mouse-highlight nil)
  (setq column-number-mode t)
  (setq-default cursor-in-non-selected-windows nil)
  (setq x-underline-at-descent-line t)
  (setq x-stretch-cursor t)
  (setq frame-resize-pixelwise t)
  (setq inhibit-startup-screen t)
#+END_SRC
*** Theme
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:01]
:END:
**** solarized
:PROPERTIES:
:CREATED:  [2018-03-12 Mon 15:45]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :init
    (setq solarized-use-variable-pitch nil)
    (setq solarized-scale-org-headlines nil)
    :config
    (load-theme 'solarized-dark t)
    (let ((line (face-attribute 'mode-line :underline)))
      (set-face-attribute 'mode-line          nil :overline   line)
      (set-face-attribute 'mode-line-inactive nil :overline   line)
      (set-face-attribute 'mode-line-inactive nil :underline  line)
      (set-face-attribute 'mode-line          nil :box        nil)
      (set-face-attribute 'mode-line-inactive nil :box        nil)
      (set-face-attribute 'mode-line-inactive nil :background "#002b36")))
#+END_SRC
*** Fonts
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:02]
:END:
#+BEGIN_SRC emacs-lisp
  (setq +main-font (font-spec :family "Iosevka" :size 14))
  (setq +cjk-font (font-spec :family "Sarasa Mono SC"))
  (setq +emoji-font (font-spec :family "Apple Color Emoji"))

  (set-face-attribute 'default nil :font +main-font)
  (set-fontset-font t 'unicode +emoji-font)

  (dolist (charset '(kana han cjk-misc bopomofo))
      (set-fontset-font (frame-parameter nil 'font) charset +cjk-font))
#+END_SRC
**** JIT optimizations
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:18]
:END:
#+BEGIN_SRC emacs-lisp
  (setq-default
   jit-lock-defer-time nil
   jit-lock-stealth-nice 0.1
   jit-lock-stealth-time 0.2
   jit-lock-stealth-verbose nil)
#+END_SRC
**** Ligature
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 16:15]
:END:
#+BEGIN_SRC emacs-lisp
  (if +is-emacs-mac-port
      (mac-auto-operator-composition-mode t)
    (progn
      (setq prettify-symbols-unprettify-at-point t)
      (add-hook 'text-mode-hook #'setup-ligatures)
      (add-hook 'prog-mode-hook #'setup-ligatures)
      (global-prettify-symbols-mode +1)

      (defun setup-ligatures ()
        (setq prettify-symbols-alist
              (append prettify-symbols-alist
                      '(
                        ;; Double-ended hyphen arrows ----------------
                        ("<->" . #Xe100)
                        ("<-->" . #Xe101)
                        ("<--->" . #Xe102)
                        ("<---->" . #Xe103)
                        ("<----->" . #Xe104)

                        ;; Double-ended equals arrows ----------------
                        ("<=>" . #Xe105)
                        ("<==>" . #Xe106)
                        ("<===>" . #Xe107)
                        ("<====>" . #Xe108)
                        ("<=====>" . #Xe109)

                        ;; Double-ended asterisk operators ----------------
                        ("<**>" . #Xe10a)
                        ("<***>" . #Xe10b)
                        ("<****>" . #Xe10c)
                        ("<*****>" . #Xe10d)

                        ;; HTML comments ----------------
                        ("<!--" . #Xe10e)
                        ("<!---" . #Xe10f)

                        ;; Three-char ops with discards ----------------
                        ("<$" . #Xe110)
                        ("<$>" . #Xe111)
                        ("$>" . #Xe112)
                        ("<." . #Xe113)
                        ("<.>" . #Xe114)
                        (".>" . #Xe115)
                        ("<*" . #Xe116)
                        ("<*>" . #Xe117)
                        ("*>" . #Xe118)
                        ("<\\" . #Xe119)
                        ("<\\>" . #Xe11a)
                        ("\\>" . #Xe11b)
                        ("</" . #Xe11c)
                        ("</>" . #Xe11d)
                        ("/>" . #Xe11e)
                        ("<\"" . #Xe11f)
                        ("<\">" . #Xe120)
                        ("\">" . #Xe121)
                        ("<'" . #Xe122)
                        ("<'>" . #Xe123)
                        ("'>" . #Xe124)
                        ("<^" . #Xe125)
                        ("<^>" . #Xe126)
                        ("^>" . #Xe127)
                        ("<&" . #Xe128)
                        ("<&>" . #Xe129)
                        ("&>" . #Xe12a)
                        ("<%" . #Xe12b)
                        ("<%>" . #Xe12c)
                        ("%>" . #Xe12d)
                        ("<@" . #Xe12e)
                        ("<@>" . #Xe12f)
                        ("@>" . #Xe130)
                        ("<#" . #Xe131)
                        ("<#>" . #Xe132)
                        ("#>" . #Xe133)
                        ("<+" . #Xe134)
                        ("<+>" . #Xe135)
                        ("+>" . #Xe136)
                        ("<-" . #Xe137)
                        ("<->" . #Xe138)
                        ("->" . #Xe139)
                        ("<!" . #Xe13a)
                        ("<!>" . #Xe13b)
                        ("!>" . #Xe13c)
                        ("<?" . #Xe13d)
                        ("<?>" . #Xe13e)
                        ("?>" . #Xe13f)
                        ("<|" . #Xe140)
                        ("<|>" . #Xe141)
                        ("|>" . #Xe142)
                        ("<:" . #Xe143)
                        ("<:>" . #Xe144)
                        (":>" . #Xe145)

                        ;; Colons ----------------
                        ("::" . #Xe146)
                        (":::" . #Xe147)
                        ("::::" . #Xe148)

                        ;; Arrow-like operators ----------------
                        ("->" . #Xe149)
                        ("->-" . #Xe14a)
                        ("->--" . #Xe14b)
                        ("->>" . #Xe14c)
                        ("->>-" . #Xe14d)
                        ("->>--" . #Xe14e)
                        ("->>>" . #Xe14f)
                        ("->>>-" . #Xe150)
                        ("->>>--" . #Xe151)
                        ("-->" . #Xe152)
                        ("-->-" . #Xe153)
                        ("-->--" . #Xe154)
                        ("-->>" . #Xe155)
                        ("-->>-" . #Xe156)
                        ("-->>--" . #Xe157)
                        ("-->>>" . #Xe158)
                        ("-->>>-" . #Xe159)
                        ("-->>>--" . #Xe15a)
                        (">-" . #Xe15b)
                        (">--" . #Xe15c)
                        (">>-" . #Xe15d)
                        (">>--" . #Xe15e)
                        (">>>-" . #Xe15f)
                        (">>>--" . #Xe160)
                        ("=>" . #Xe161)
                        ("=>=" . #Xe162)
                        ("=>==" . #Xe163)
                        ("=>>" . #Xe164)
                        ("=>>=" . #Xe165)
                        ("=>>==" . #Xe166)
                        ("=>>>" . #Xe167)
                        ("=>>>=" . #Xe168)
                        ("=>>>==" . #Xe169)
                        ("==>" . #Xe16a)
                        ("==>=" . #Xe16b)
                        ("==>==" . #Xe16c)
                        ("==>>" . #Xe16d)
                        ("==>>=" . #Xe16e)
                        ("==>>==" . #Xe16f)
                        ("==>>>" . #Xe170)
                        ("==>>>=" . #Xe171)
                        ("==>>>==" . #Xe172)
                        (">=" . #Xe173)
                        (">==" . #Xe174)
                        (">>=" . #Xe175)
                        (">>==" . #Xe176)
                        (">>>=" . #Xe177)
                        (">>>==" . #Xe178)
                        ("<-" . #Xe179)
                        ("-<-" . #Xe17a)
                        ("--<-" . #Xe17b)
                        ("<<-" . #Xe17c)
                        ("-<<-" . #Xe17d)
                        ("--<<-" . #Xe17e)
                        ("<<<-" . #Xe17f)
                        ("-<<<-" . #Xe180)
                        ("--<<<-" . #Xe181)
                        ("<--" . #Xe182)
                        ("-<--" . #Xe183)
                        ("--<--" . #Xe184)
                        ("<<--" . #Xe185)
                        ("-<<--" . #Xe186)
                        ("--<<--" . #Xe187)
                        ("<<<--" . #Xe188)
                        ("-<<<--" . #Xe189)
                        ("--<<<--" . #Xe18a)
                        ("-<" . #Xe18b)
                        ("--<" . #Xe18c)
                        ("-<<" . #Xe18d)
                        ("--<<" . #Xe18e)
                        ("-<<<" . #Xe18f)
                        ("--<<<" . #Xe190)
                        ("<=" . #Xe191)
                        ("=<=" . #Xe192)
                        ("==<=" . #Xe193)
                        ("<<=" . #Xe194)
                        ("=<<=" . #Xe195)
                        ("==<<=" . #Xe196)
                        ("<<<=" . #Xe197)
                        ("=<<<=" . #Xe198)
                        ("==<<<=" . #Xe199)
                        ("<==" . #Xe19a)
                        ("=<==" . #Xe19b)
                        ("==<==" . #Xe19c)
                        ("<<==" . #Xe19d)
                        ("=<<==" . #Xe19e)
                        ("==<<==" . #Xe19f)
                        ("<<<==" . #Xe1a0)
                        ("=<<<==" . #Xe1a1)
                        ("==<<<==" . #Xe1a2)
                        ("=<" . #Xe1a3)
                        ("==<" . #Xe1a4)
                        ("=<<" . #Xe1a5)
                        ("==<<" . #Xe1a6)
                        ("=<<<" . #Xe1a7)
                        ("==<<<" . #Xe1a8)

                        ;; Monadic operators ----------------
                        (">=>" . #Xe1a9)
                        (">->" . #Xe1aa)
                        (">-->" . #Xe1ab)
                        (">==>" . #Xe1ac)
                        ("<=<" . #Xe1ad)
                        ("<-<" . #Xe1ae)
                        ("<--<" . #Xe1af)
                        ("<==<" . #Xe1b0)

                        ;; Composition operators ----------------
                        (">>" . #Xe1b1)
                        (">>>" . #Xe1b2)
                        ("<<" . #Xe1b3)
                        ("<<<" . #Xe1b4)

                        ;; Lens operators ----------------
                        (":+" . #Xe1b5)
                        (":-" . #Xe1b6)
                        (":=" . #Xe1b7)
                        ("+:" . #Xe1b8)
                        ("-:" . #Xe1b9)
                        ("=:" . #Xe1ba)
                        ("=^" . #Xe1bb)
                        ("=+" . #Xe1bc)
                        ("=-" . #Xe1bd)
                        ("=*" . #Xe1be)
                        ("=/" . #Xe1bf)
                        ("=%" . #Xe1c0)
                        ("^=" . #Xe1c1)
                        ("+=" . #Xe1c2)
                        ("-=" . #Xe1c3)
                        ("*=" . #Xe1c4)
                        ("/=" . #Xe1c5)
                        ("%=" . #Xe1c6)

                        ;; Logical ----------------
                        ("/\\" . #Xe1c7)
                        ("\\/" . #Xe1c8)

                        ;; Semigroup/monoid operators ----------------
                        ("<>" . #Xe1c9)
                        ("<+" . #Xe1ca)
                        ("<+>" . #Xe1cb)
                        ("+>" . #Xe1cc)
                        ))))))
#+END_SRC
*** Modeline
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:11]
:END:
**** [[https://github.com/tarsius/minions][tarsius/minions: A minor-mode menu for the mode line]]
:PROPERTIES:
:CREATED: [2018-03-12 Mon 15:41]
:ID:       475CEDB6-60DB-4E8B-B7C4-654E454C62DD
:END:
#+BEGIN_SRC emacs-lisp
  (use-package minions
    :config
    (minions-mode 1))
#+END_SRC
**** [[https://github.com/tarsius/moody][tarsius/moody: Tabs and ribbons for the mode-line]]
:PROPERTIES:
:CREATED: [2018-03-12 Mon 15:40]
:ID:       BCAD745F-F5D0-4B09-961D-E8E619DA34FC
:END:
:LOGBOOK:
CLOCK: [2018-03-12 Mon 15:43]--[2018-03-12 Mon 15:59] =>  0:16
CLOCK: [2018-03-12 Mon 15:39]--[2018-03-12 Mon 15:41] =>  0:02
:END:
#+BEGIN_SRC emacs-lisp
  (use-package moody
    :config
    (if +is-emacs-ns
        (setq moody-slant-function #'moody-slant-apple-rgb))

    (require 'smart-mode-line)
    (moody-replace-sml/mode-line-buffer-identification)

    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))
#+END_SRC
***** CANCELLED [[https://emacs.stackexchange.com/questions/2338/how-can-i-display-the-parent-directory-of-the-current-file-in-the-modeline][mode line - How can I display the parent directory of the current file in the modeline? - Emacs Stack Exchange]]
CLOSED: [2018-03-12 Mon 18:12]
:PROPERTIES:
:CREATED: [2018-03-12 Mon 18:05]
:END:
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2018-03-12 Mon 18:12] \\
  Cannot get it working for moody (moody has it own customizations)
CLOCK: [2018-03-12 Mon 18:05]--[2018-03-12 Mon 18:12] =>  0:07
:END:
***** [[https://github.com/tarsius/moody/commit/04b3503edd607ec6456826e6b395c6fd44b86a71][moody-slant-apple-rgb: New function Â· tarsius/moody@04b3503]]
:PROPERTIES:
:CREATED: [2018-03-12 Mon 15:59]
:END:
***** DONE [[https://github.com/tarsius/moody/issues/1][smart-mode-line integration? Â· Issue #1 Â· tarsius/moody]]
CLOSED: [2018-03-12 Mon 18:21]
:PROPERTIES:
:CREATED: [2018-03-12 Mon 18:12]
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2018-03-12 Mon 18:21]
CLOCK: [2018-03-12 Mon 18:12]--[2018-03-12 Mon 18:21] =>  0:09
:END:
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line)
#+END_SRC
*** Line Numbers
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:15]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package display-line-numbers
    :ensure nil
    :if (>= emacs-major-version 26)
    :hook (prog-mode . display-line-numbers-mode)
    :init
    (setq-default display-line-numbers-width 3)
    (setq display-line-numbers-type 'visual))
#+END_SRC
*** DONE [[https://www.emacswiki.org/emacs/zoom-frm.el][EmacsWiki: zoom-frm.el]]
CLOSED: [2018-04-19 Thu 10:52]
:PROPERTIES:
:CREATED: [2018-04-19 Thu 10:49]
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2018-04-19 Thu 10:52]
CLOCK: [2018-04-19 Thu 10:49]--[2018-04-19 Thu 10:52] =>  0:03
:END:
**** frame-fns
:PROPERTIES:
:CREATED:  [2018-04-19 Thu 10:51]
:END:
#+BEGIN_SRC emacs-lisp
  ;;; frame-fns.el --- Non-interactive frame and window functions.
  ;;
  ;; Filename: frame-fns.el
  ;; Description: Non-interactive frame and window functions.
  ;; Author: Drew Adams
  ;; Maintainer: Drew Adams (concat "drew.adams" "@" "oracle" ".com")
  ;; Copyright (C) 1996-2015, Drew Adams, all rights reserved.
  ;; Created: Tue Mar  5 16:15:50 1996
  ;; Version: 0
  ;; Package-Requires: ()
  ;; Last-Updated: Thu Jan  1 10:45:03 2015 (-0800)
  ;;           By: dradams
  ;;     Update #: 227
  ;; URL: http://www.emacswiki.org/frame-fns.el
  ;; Doc URL: http://emacswiki.org/FrameModes
  ;; Keywords: internal, extensions, local, frames
  ;; Compatibility: GNU Emacs: 20.x, 21.x, 22.x, 23.x, 24.x, 25.x
  ;;
  ;; Features that might be required by this library:
  ;;
  ;;   `avoid'.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;;; Commentary:
  ;;
  ;;    Non-interactive frame and window functions.
  ;;
  ;;  Main new functions defined here:
  ;;
  ;;    `1-window-frames-on', `distance', `flash-ding',
  ;;    `frame-geom-spec-cons', `frame-geom-value-cons',
  ;;    `frame-geom-spec-numeric', `frame-geom-value-numeric',
  ;;    `frames-on', `get-a-frame', `get-frame-name',
  ;;    `multi-window-frames-on', `read-frame', `window-coords'.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;;; Change Log:
  ;;
  ;; 2011/01/04 dadams
  ;;     Removed autoload cookies from non-interactive functions.
  ;; 2010/01/12 dadams
  ;;     1-window-frames-on, multi-window-frames-on:
  ;;       save-excursion + set-buffer -> with-current-buffer.
  ;; 2008/04/05 dadams
  ;;     get-a-frame: Define without using member-if.
  ;; 2005/10/31 dadams
  ;;     read-frame: Swapped default and init values in call to completing-read.
  ;; 2004/11/26 dadams
  ;;     Added frame-geom-spec-numeric and frame-geom-value-numeric.
  ;; 2004/03/19 dadams
  ;;     read-frame: 1) if default is a frame, use its name,
  ;;                 2) use frame-name-history, not minibuffer-history,
  ;;                    and use make-frame-names-alist, not frame-alist,
  ;;                    in completing-read
  ;; 1996/02/14 dadams
  ;;     Added: window-coords, distance.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 2, or (at your option)
  ;; any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program; see the file COPYING.  If not, write to
  ;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
  ;; Floor, Boston, MA 02110-1301, USA.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;;; Code:

  (eval-when-compile (when (< emacs-major-version 21) (require 'cl)))
   ;; dolist, push
  (require 'avoid nil t) ;; mouse-avoidance-point-position

  ;;;;;;;;;;;;;;;;;;;;;;;

  (defun window-coords (&optional position)
    "Return window coordinates of buffer POSITION (default: point).
  If POSITION is nil, (point) is used."
    (unless (fboundp 'mouse-avoidance-point-position) (require 'avoid))
    (cdr (mouse-avoidance-point-position)))

  (defun distance (pt1 pt2)
    "Distance as the crow flies between PT1 and PT2.
  PT1 and PT2 are each a cons of the form (X . Y)."
    (let ((xdiff  (abs (- (car pt1) (car pt2))))
          (ydiff  (abs (- (cdr pt1) (cdr pt2)))))
      (sqrt (+ (* xdiff xdiff) (* ydiff ydiff)))))

  (defun frame-geom-value-numeric (type value &optional frame)
    "Return equivalent geometry value for FRAME in numeric terms.
  A geometry value equivalent to VALUE for FRAME is returned,
  where the value is numeric, not a consp.
  TYPE is the car of the original geometry spec (TYPE . VALUE).
     It is `top' or `left', depending on which edge VALUE is related to.
  VALUE is the cdr of a frame geometry spec: (left/top . VALUE).
  If VALUE is a consp, then it is converted to a numeric value, perhaps
     relative to the opposite frame edge from that in the original spec.
  FRAME defaults to the selected frame.

  Examples (measures in pixels) -
   Assuming display height/width=1024, frame height/width=600:
   300 inside display edge:                   300  =>  300
                                          (+  300) =>  300
   300 inside opposite display edge:      (-  300) => -300
                                             -300  => -300
   300 beyond display edge
    (= 724 inside opposite display edge): (+ -300) => -724
   300 beyond display edge
    (= 724 inside opposite display edge): (- -300) =>  724

  In the last two examples, the returned value is relative to the
  opposite frame edge from the edge indicated in the input spec."
    (if (consp value)
        (if (natnump (cadr value))
            ;; e.g. (+ 300) or (- 300) => 300 or -300
            (funcall (car value) (cadr value))
          ;; e.g. (+ -300) or (- -300)
          (let ((oppval  (- (if (eq 'left type)
                                (x-display-pixel-width)
                              (x-display-pixel-height))
                            (cadr value)
                            (if (eq 'left type)
                                (frame-pixel-width frame)
                              (frame-pixel-height frame)))))
            (if (eq '+ (car value))
                (- oppval)                ; e.g. (+ -300) => -724
              oppval)))                   ; e.g. (- -300) =>  724
      ;; e.g. 300 or -300
      value))

  (defun frame-geom-spec-numeric (spec &optional frame)
    "Return equivalent geometry specification for FRAME in numeric terms.
  A geometry specification equivalent to SPEC for FRAME is returned,
  where the value is numeric, not a consp.
  SPEC is a frame geometry spec: (left . VALUE) or (top . VALUE).
  If VALUE is a consp, then it is converted to a numeric value, perhaps
     relative to the opposite frame edge from that in the original SPEC.
  FRAME defaults to the selected frame.

  Examples (measures in pixels) -
   Assuming display height=1024, frame height=600:
   top 300 below display top:               (top .  300) => (top .  300)
                                            (top +  300) => (top .  300)
   bottom 300 above display bottom:         (top -  300) => (top . -300)
                                            (top . -300) => (top . -300)
   top 300 above display top
    (= bottom 724 above display bottom):    (top + -300) => (top . -724)
   bottom 300 below display bottom
    (= top 724 below display top):          (top - -300) => (top .  724)

  In the last two examples, the returned value is relative to the
  opposite frame edge from the edge indicated in the input SPEC."
    (cons (car spec) (frame-geom-value-numeric (car spec) (cdr spec))))

  (defun frame-geom-value-cons (type value &optional frame)
    "Return equivalent geometry value for FRAME as a cons with car `+'.
  A geometry value equivalent to VALUE for FRAME is returned,
  where the value is a cons with car `+', not numeric.
  TYPE is the car of the original geometry spec (TYPE . VALUE).
     It is `top' or `left', depending on which edge VALUE is related to.
  VALUE is the cdr of a frame geometry spec: (left/top . VALUE).
  If VALUE is a number, then it is converted to a cons value, perhaps
     relative to the opposite frame edge from that in the original spec.
  FRAME defaults to the selected frame.

  Examples (measures in pixels) -
   Assuming display height/width=1024, frame height/width=600:
   300 inside display edge:                   300  => (+  300)
                                          (+  300) => (+  300)
   300 inside opposite display edge:      (-  300) => (+  124)
                                             -300  => (+  124)
   300 beyond display edge
    (= 724 inside opposite display edge): (+ -300) => (+ -300)
   300 beyond display edge
    (= 724 inside opposite display edge): (- -300) => (+  724)

  In the 3rd, 4th, and 6th examples, the returned value is relative to
  the opposite frame edge from the edge indicated in the input spec."
    (cond ((and (consp value)  (eq '+ (car value))) ; e.g. (+ 300), (+ -300)
           value)
          ((natnump value) (list '+ value)) ; e.g. 300 => (+ 300)
          (t                              ; e.g. -300, (- 300), (- -300)
           (list '+ (- (if (eq 'left type) ; => (+ 124), (+ 124), (+ 724)
                           (x-display-pixel-width)
                         (x-display-pixel-height))
                       (if (integerp value) (- value) (cadr value))
                       (if (eq 'left type)
                           (frame-pixel-width frame)
                         (frame-pixel-height frame)))))))

  (defun frame-geom-spec-cons (spec &optional frame)
    "Return equivalent geometry spec for FRAME as a cons with car `+'.
  A geometry specification equivalent to SPEC for FRAME is returned,
  where the value is a cons with car `+', not numeric.
  SPEC is a frame geometry spec: (left . VALUE) or (top . VALUE).
  If VALUE is a number, then it is converted to a cons value, perhaps
     relative to the opposite frame edge from that in the original spec.
  FRAME defaults to the selected frame.

  Examples (measures in pixels) -
   Assuming display height=1024, frame height=600:
   top 300 below display top:               (top .  300) => (top +  300)
                                            (top +  300) => (top +  300)
   bottom 300 above display bottom:         (top -  300) => (top +  124)
                                            (top . -300) => (top +  124)
   top 300 above display top
    (= bottom 724 above display bottom):    (top + -300) => (top + -300)
   bottom 300 below display bottom
    (= top 724 below display top):          (top - -300) => (top +  724)

  In the 3rd, 4th, and 6th examples, the returned value is relative to
  the opposite frame edge from the edge indicated in the input spec."
    (cons (car spec) (frame-geom-value-cons (car spec) (cdr spec))))

  (defun get-frame-name (&optional frame)
    "Return the string that names FRAME (a frame).  Default is selected frame."
    (unless frame (setq frame  (selected-frame)))
    (if (framep frame)
        (cdr (assq 'name (frame-parameters frame)))
      (error "Function `get-frame-name': Argument not a frame: `%s'" frame)))

  (defun get-a-frame (frame)
    "Return a frame, if any, named FRAME (a frame or a string).
  If none, return nil.
  If FRAME is a frame, it is returned."
    (cond ((framep frame) frame)
          ((stringp frame)
           (catch 'get-a-frame-found
             (dolist (fr (frame-list))
               (when (string= frame (get-frame-name fr))
                 (throw 'get-a-frame-found fr)))
             nil))
          (t (error
              "Function `get-frame-name': Arg neither a string nor a frame: `%s'"
              frame))))

  (defun read-frame (prompt &optional default existing)
    "Read the name of a frame, and return it as a string.
  Prompts with 1st arg, PROMPT (a string).

  The default frame is named by the optional 2nd arg, DEFAULT, if a
  string or a frame, or by the `selected-frame', if nil.

  Non-nil optional 3rd arg, EXISTING, means to allow only names of
  existing frames."
    (setq default  (if (framep default)
                       (get-frame-name default)
                     (or default  (get-frame-name))))
    (unless (stringp default)
      (error "Function `read-frame': DEFAULT arg is neither a frame nor a string"))
    (completing-read prompt (make-frame-names-alist)
                     ;; To limit to live frames:
                     ;; (function (lambda (fn+f)(frame-live-p (cdr fn+f))))
                     ;; `frame-name-history' is defined in `frame.el'.
                     nil existing nil '(frame-name-history . 2) default))

  (defun frames-on (buffer &optional frame)
    "List of all live frames showing BUFFER (a buffer or its name).
  The optional FRAME argument is as for function `get-buffer-window'."
    (filtered-frame-list (function (lambda (fr) (get-buffer-window buffer fr)))))

  (defun 1-window-frames-on (buffer)
    "List of all visible 1-window frames showing BUFFER."
    (setq buffer  (get-buffer buffer))
    (when buffer                          ; Do nothing if BUFFER is not a buffer.
      (let ((frs  ()))
        (with-current-buffer buffer
          (when (buffer-live-p buffer)    ; Do nothing if dead buffer.
            ;; $$$$$$ Is it better to search through frames-on or windows-on?
            (dolist (fr  (frames-on buffer))
              (save-window-excursion (select-frame fr)
                                     (when (one-window-p t fr) (push fr frs))))))
        frs)))

  (defun multi-window-frames-on (buffer)
    "List of all visible multi-window frames showing BUFFER."
    (setq buffer  (get-buffer buffer))
    (when buffer                          ; Do nothing if BUFFER is not a buffer.
      (let ((frs  ()))
        (with-current-buffer buffer
          (when (buffer-live-p buffer)    ; Do nothing if dead buffer.
            ;; $$$$$$ Is it better to search through frames-on or windows-on?
            (dolist (fr  (frames-on buffer))
              (save-window-excursion (select-frame fr)
                                     (unless (one-window-p t fr)
                                       (push fr frs))))))
        frs)))

  (defun flash-ding (&optional do-not-terminate frame)
    "Ring bell (`ding'), after flashing FRAME (default: current), if relevant.
  Terminates any keyboard macro executing, unless arg DO-NOT-TERMINATE non-nil."
    (save-window-excursion
      (when frame (select-frame frame))
      (let ((visible-bell  t)) (ding 'DO-NOT-TERMINATE))) ; Flash.
    (let ((visible-bell  nil)) (ding 'DO-NOT-TERMINATE))) ; Bell.

  ;;;;;;;;;;;;;;;;;;;;;;;

  (provide 'frame-fns)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; frame-fns.el ends here
#+END_SRC
**** frame-cmds
:PROPERTIES:
:CREATED:  [2018-04-19 Thu 10:52]
:END:
#+BEGIN_SRC emacs-lisp
  ;;; frame-cmds.el --- Frame and window commands (interactive functions).
  ;;
  ;; Filename: frame-cmds.el
  ;; Description: Frame and window commands (interactive functions).
  ;; Author: Drew Adams
  ;; Maintainer: Drew Adams (concat "drew.adams" "@" "oracle" ".com")
  ;; Copyright (C) 1996-2015, Drew Adams, all rights reserved.
  ;; Created: Tue Mar  5 16:30:45 1996
  ;; Version: 0
  ;; Package-Requires: ((frame-fns "0"))
  ;; Last-Updated: Thu Jan  1 10:44:52 2015 (-0800)
  ;;           By: dradams
  ;;     Update #: 3036
  ;; URL: http://www.emacswiki.org/frame-cmds.el
  ;; Doc URL: http://emacswiki.org/FrameModes
  ;; Doc URL: http://www.emacswiki.org/OneOnOneEmacs
  ;; Doc URL: http://www.emacswiki.org/Frame_Tiling_Commands
  ;; Keywords: internal, extensions, mouse, frames, windows, convenience
  ;; Compatibility: GNU Emacs: 20.x, 21.x, 22.x, 23.x, 24.x, 25.x
  ;;
  ;; Features that might be required by this library:
  ;;
  ;;   `avoid', `frame-fns', `misc-fns', `strings', `thingatpt',
  ;;   `thingatpt+'.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;;; Commentary:
  ;;
  ;;    Frame and window commands (interactive functions).
  ;;
  ;;
  ;;  Summary:
  ;;
  ;;    Load this library from your init file (~/.emacs or _emacs).
  ;;    Add the suggested key bindings (below) to  your init file.
  ;;    Use `M-up|down|left|right' to move frames around incrementally.
  ;;    Use `C-S-v', `M-S-v', `C-S-next', `C-S-prior' to move frames to screen edges.
  ;;    Use `C-M-up|down|left|right' to resize frames incrementally.
  ;;    Use `C-M-z' or `C-x C-z' to iconify/hide all frames.
  ;;    Use `C-M-z' in a lone frame to restore all frames.
  ;;    Use `C-mouse-1' in the minibuffer to restore all frames.
  ;;    Use `C-mouse-1' in Dired to mark/unmark a file.
  ;;    Use `C-mouse-3' on the mode line to remove window from frame.
  ;;    Use `tile-frames-horizontally', `-vertically' to tile frames.
  ;;    Use `C-x o' to select `other-window' or `other-frame'.
  ;;
  ;;  Commands to incrementally resize frames are `enlarge-frame' and
  ;;  `enlarge-frame-horizontally'.  Sarir Khamsi
  ;;  [sarir.khamsi@raytheon.com] originally wrote `enlarge-frame',
  ;;  which he called `sk-grow-frame'.
  ;;
  ;;  Note on saving changes made with the commands defined here:
  ;;
  ;;    Some of the commands defined here change frame properties.
  ;;    You can save any changes you have made, by using Customize.
  ;;    To visit a Customize buffer of all unsaved changes you have
  ;;    made, use command `customize-customized'.
  ;;
  ;;    Frame parameter changes, such as background color, can be saved
  ;;    for future use by all frames or all frames of a certain
  ;;    kind.  For that, you must change the frame parameters of the
  ;;    correponding frame-alist variable.
  ;;
  ;;    There is no single variable for saving changes to parameters of
  ;;    the current frame.  Instead, there are several different
  ;;    frame-alist variables, which you can use to define different
  ;;    kinds of frames.  These include: `default-frame-alist',
  ;;    `initial-frame-alist', and `special-display-frame-alist'.  The
  ;;    complete list of such frame alist variables is available using
  ;;    function `frame-alist-var-names', defined here.
  ;;
  ;;    Example: Suppose you change the background color of a frame and
  ;;    want to make that the default background color for new frames in
  ;;    the future.  You will need to update the value of variable
  ;;    `default-frame-alist' to use the `background-color' parameter
  ;;    setting of the changed frame.
  ;;
  ;;    You can easily copy one or all parameter values from any given
  ;;    frame to any frame alist (such as `default-frame-alist'), by
  ;;    using the commands `set-frame-alist-parameter-from-frame' and
  ;;    `set-all-frame-alist-parameters-from-frame'.  Those commands are
  ;;    defined here.
  ;;
  ;;  NOTE: If you also use library `fit-frame.el', and you are on MS
  ;;  Windows, then load that library before `frame-cmds.el'.  The
  ;;  commands `maximize-frame' and `restore-frame' defined here are
  ;;  more general and non-Windows-specific than the commands of the
  ;;  same name defined in `fit-frame.el'.
  ;;
  ;;
  ;;  User options defined here:
  ;;
  ;;    `available-screen-pixel-bounds', `enlarge-font-tries',
  ;;    `frame-config-register', `frame-parameters-to-exclude',
  ;;    `move-frame-wrap-within-display-flag'
  ;;    `rename-frame-when-iconify-flag', `show-hide-show-function',
  ;;    `window-mgr-title-bar-pixel-height'.
  ;;
  ;;  Commands defined here:
  ;;
  ;;    `create-frame-tiled-horizontally',
  ;;    `create-frame-tiled-vertically', `delete-1-window-frames-on',
  ;;    `delete/iconify-window', `delete/iconify-windows-on',
  ;;    `delete-other-frames', `delete-windows-for', `enlarge-font',
  ;;    `enlarge-frame', `enlarge-frame-horizontally',
  ;;    `hide-everything', `hide-frame', `iconify-everything',
  ;;    `iconify/map-frame', `iconify/show-frame',
  ;;    `jump-to-frame-config-register', `maximize-frame',
  ;;    `maximize-frame-horizontally', `maximize-frame-vertically',
  ;;    `mouse-iconify/map-frame', `mouse-iconify/show-frame',
  ;;    `mouse-remove-window', `mouse-show-hide-mark-unmark',
  ;;    `move-frame-down', `move-frame-left', `move-frame-right',
  ;;    `move-frame-to-screen-bottom', `move-frame-to-screen-left',
  ;;    `move-frame-to-screen-right', `move-frame-to-screen-top',
  ;;    `move-frame-to-screen-top-left', `move-frame-up',
  ;;    `name-all-frames-numerically', `name-frame-numerically',
  ;;    `other-window-or-frame', `remove-window', `remove-windows-on',
  ;;    `rename-frame', `rename-non-minibuffer-frame', `restore-frame',
  ;;    `restore-frame-horizontally', `restore-frame-vertically',
  ;;    `save-frame-config',
  ;;    `set-all-frame-alist-parameters-from-frame',
  ;;    `set-frame-alist-parameter-from-frame', `show-*Help*-buffer',
  ;;    `show-a-frame-on', `show-buffer-menu', `show-frame',
  ;;    `show-hide', `shrink-frame', `shrink-frame-horizontally',
  ;;    `split-frame-horizontally', `split-frame-vertically',
  ;;    `tell-customize-var-has-changed', `tile-frames',
  ;;    `tile-frames-horizontally', `tile-frames-side-by-side',
  ;;    `tile-frames-top-to-bottom', `tile-frames-vertically',
  ;;    `toggle-max-frame', `toggle-max-frame-horizontally',
  ;;    `toggle-max-frame-vertically'.
  ;;
  ;;  Non-interactive functions defined here:
  ;;
  ;;    `assq-delete-all' (Emacs 20), `butlast' (Emacs 20),
  ;;    `frcmds-available-screen-pixel-bounds',
  ;;    `frcmds-available-screen-pixel-height',
  ;;    `frcmds-available-screen-pixel-width',
  ;;    `frcmds-effective-screen-pixel-bounds',
  ;;    `frcmds-enlarged-font-name', `frcmds-extra-pixels-width',
  ;;    `frcmds-extra-pixels-height', `frcmds-frame-alist-var-names',
  ;;    `frcmds-frame-parameter-names', `frcmds-frame-iconified-p',
  ;;    `frcmds-frame-number', `frcmds-new-frame-position',
  ;;    `frcmds-read-args-for-tiling',
  ;;    `frcmds-read-buffer-for-delete-windows',
  ;;    `frcmds-set-difference', `frcmds-smart-tool-bar-pixel-height',
  ;;    `frcmds-split-frame-1', `frcmds-tile-frames', `nbutlast' (Emacs
  ;;    20).
  ;;
  ;;  Error symbols defined here:
  ;;
  ;;    `font-too-small', `font-size'.
  ;;
  ;;
  ;;  ***** NOTE: The following EMACS PRIMITIVE has been ADVISED HERE:
  ;;
  ;;  `delete-window' - If only one window in frame, `delete-frame'.
  ;;
  ;;
  ;;  ***** NOTE: The following EMACS PRIMITIVE has been REDEFINED HERE:
  ;;
  ;;  `delete-windows-on' -
  ;;     1) Reads buffer differently.  Only buffers showing windows are candidates.
  ;;     2) Calls `delete-window', so this also deletes frames where
  ;;        window showing the BUFFER is the only window.
  ;;        (That's true also for vanilla Emacs 23+, but not before.)
  ;;
  ;;
  ;;  Suggested key bindings:
  ;;
  ;;   (global-set-key [(meta up)]                    'move-frame-up)
  ;;   (global-set-key [(meta down)]                  'move-frame-down)
  ;;   (global-set-key [(meta left)]                  'move-frame-left)
  ;;   (global-set-key [(meta right)]                 'move-frame-right)
  ;;   (global-set-key [(meta shift ?v)]              'move-frame-to-screen-top)      ; like `M-v'
  ;;   (global-set-key [(control shift ?v)]           'move-frame-to-screen-bottom)   ; like `C-v'
  ;;   (global-set-key [(control shift prior)]        'move-frame-to-screen-left)     ; like `C-prior'
  ;;   (global-set-key [(control shift next)]         'move-frame-to-screen-right)    ; like `C-next'
  ;;   (global-set-key [(control shift home)]         'move-frame-to-screen-top-left)
  ;;   (global-set-key [(control meta down)]          'enlarge-frame)
  ;;   (global-set-key [(control meta right)]         'enlarge-frame-horizontally)
  ;;   (global-set-key [(control meta up)]            'shrink-frame)
  ;;   (global-set-key [(control meta left)]          'shrink-frame-horizontally)
  ;;   (global-set-key [(control ?x) (control ?z)]    'iconify-everything)
  ;;   (global-set-key [vertical-line S-down-mouse-1] 'iconify-everything)
  ;;   (global-set-key [(control ?z)]                 'iconify/show-frame)
  ;;   (global-set-key [mode-line mouse-3]            'mouse-iconify/show-frame)
  ;;   (global-set-key [mode-line C-mouse-3]          'mouse-remove-window)
  ;;   (global-set-key [(control meta ?z)]            'show-hide)
  ;;   (global-set-key [vertical-line C-down-mouse-1] 'show-hide)
  ;;   (global-set-key [C-down-mouse-1]               'mouse-show-hide-mark-unmark)
  ;;   (substitute-key-definition 'delete-window      'remove-window global-map)
  ;;   (define-key ctl-x-map "o"                      'other-window-or-frame)
  ;;   (define-key ctl-x-4-map "1"                    'delete-other-frames)
  ;;   (define-key ctl-x-5-map "h"                    'show-*Help*-buffer)
  ;;   (substitute-key-definition 'delete-window      'delete-windows-for global-map)
  ;;   (define-key global-map "\C-xt."                'save-frame-config)
  ;;   (define-key ctl-x-map "o"                      'other-window-or-frame)
  ;;
  ;;   (defalias 'doremi-prefix (make-sparse-keymap))
  ;;   (defvar doremi-map (symbol-function 'doremi-prefix) "Keymap for Do Re Mi commands.")
  ;;   (define-key global-map "\C-xt" 'doremi-prefix)
  ;;   (define-key doremi-map "." 'save-frame-config)
  ;;
  ;;  Customize the menu.  Uncomment this to try it out.
  ;;
  ;;   (defvar menu-bar-frames-menu (make-sparse-keymap "Frames"))
  ;;   (define-key global-map [menu-bar frames]
  ;;     (cons "Frames" menu-bar-frames-menu)))
  ;;   (define-key menu-bar-frames-menu [set-all-params-from-frame]
  ;;     '(menu-item "Set All Frame Parameters from Frame" set-all-frame-alist-parameters-from-frame
  ;;       :help "Set frame parameters of a frame to their current values in frame"))
  ;;   (define-key menu-bar-frames-menu [set-params-from-frame]
  ;;     '(menu-item "Set Frame Parameter from Frame..." set-frame-alist-parameter-from-frame
  ;;       :help "Set parameter of a frame alist to its current value in frame"))
  ;;   (define-key menu-bar-frames-menu [separator-frame-1] '("--"))
  ;;   (define-key menu-bar-frames-menu [tile-frames-vertically]
  ;;     '(menu-item "Tile Frames Vertically..." tile-frames-vertically
  ;;       :help "Tile all visible frames vertically"))
  ;;   (define-key menu-bar-frames-menu [tile-frames-horizontally]
  ;;     '(menu-item "Tile Frames Horizontally..." tile-frames-horizontally
  ;;       :help "Tile all visible frames horizontally"))
  ;;   (define-key menu-bar-frames-menu [separator-frame-2] '("--"))
  ;;   (define-key menu-bar-frames-menu [toggle-max-frame-vertically]
  ;;     '(menu-item "Toggle Max Frame Vertically" toggle-max-frame-vertically
  ;;       :help "Maximize or restore the selected frame vertically"
  ;;       :enable (frame-parameter nil 'restore-height)))
  ;;   (define-key menu-bar-frames-menu [toggle-max-frame-horizontally]
  ;;     '(menu-item "Toggle Max Frame Horizontally" toggle-max-frame-horizontally
  ;;       :help "Maximize or restore the selected frame horizontally"
  ;;       :enable (frame-parameter nil 'restore-width)))
  ;;   (define-key menu-bar-frames-menu [toggle-max-frame]
  ;;     '(menu-item "Toggle Max Frame" toggle-max-frame
  ;;       :help "Maximize or restore the selected frame (in both directions)"
  ;;       :enable (or (frame-parameter nil 'restore-width) (frame-parameter nil 'restore-height))))
  ;;   (define-key menu-bar-frames-menu [maximize-frame-vertically]
  ;;     '(menu-item "Maximize Frame Vertically" maximize-frame-vertically
  ;;       :help "Maximize the selected frame vertically"))
  ;;   (define-key menu-bar-frames-menu [maximize-frame-horizontally]
  ;;     '(menu-item "Maximize Frame Horizontally" maximize-frame-horizontally
  ;;       :help "Maximize the selected frame horizontally"))
  ;;   (define-key menu-bar-frames-menu [maximize-frame]
  ;;     '(menu-item "Maximize Frame" maximize-frame
  ;;       :help "Maximize the selected frame (in both directions)"))
  ;;   (define-key menu-bar-frames-menu [separator-frame-3] '("--"))
  ;;   (define-key menu-bar-frames-menu [iconify-everything]
  ;;     '(menu-item "Iconify All Frames" iconify-everything
  ;;       :help "Iconify all frames of session at once"))
  ;;   (define-key menu-bar-frames-menu [show-hide]
  ;;     '(menu-item "Hide Frames / Show Buffers" show-hide
  ;;       :help "Show, if only one frame visible; else hide.")))
  ;;
  ;;   (defvar menu-bar-doremi-menu (make-sparse-keymap "Do Re Mi"))
  ;;   (define-key global-map [menu-bar doremi]
  ;;     (cons "Do Re Mi" menu-bar-doremi-menu))
  ;;   (define-key menu-bar-doremi-menu [doremi-font+]
  ;;     '("Save Frame Configuration" . save-frame-config))
  ;;
  ;;  See also these files for other frame commands:
  ;;
  ;;     `autofit-frame.el' - Automatically fit each frame to its
  ;;                          selected window.  Uses `fit-frame.el'.
  ;;
  ;;     `fit-frame.el'     - 1) Fit a frame to its selected window.
  ;;                          2) Incrementally resize a frame.
  ;;
  ;;     `doremi-frm.el'    - Incrementally adjust frame properties
  ;;                          using arrow keys and/or mouse wheel.
  ;;
  ;;     `thumb-frm.el'     - Shrink frames to a thumbnail size and
  ;;                          restore them again.
  ;;
  ;;     `zoom-frm.el'      - Zoom a frame or buffer, so that its text
  ;;                          appears larger or smaller.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;;; Change Log:
  ;;
  ;; 2014/12/09 dadams
  ;;     Added: frcmds-frame-pixel-height.
  ;;     frcmds-split-frame-1: Use frame-pixel-width and frcmds-frame-pixel-height, instead of working
  ;;                           with width and height frame parameters (char-based).
  ;;     frcmds-tile-frames:
  ;;       If Emacs 24.4+, use PIXELWISE arg with set-frame-size.
  ;;       Otherwise: * Always subtract frcmds-extra-pixels-width.
  ;;                  * Do not subtract borders.
  ;;                  * Increment origin by one border-width.
  ;; 2014/12/07 dadams
  ;;     Added: split-frame-horizontally, split-frame-vertically.
  ;;     frcmds-tile-frames: Added optional args, so can tile within a rectangle.
  ;;     create-frame-tiled-(horizontally|vertically): Keep same font size.
  ;; 2014/12/06 dadams
  ;;     Added: create-frame-tiled-horizontally, create-frame-tiled-vertically.
  ;;     Added aliases: tile-frames-side-by-side, tile-frames-top-to-bottom.
  ;;     window-mgr-title-bar-pixel-height: Changed default value for ns to 50.  Thx to Nate Eagleson.
  ;; 2014/10/15 dadams
  ;;     window-mgr-title-bar-pixel-height: Added default value for ns (Next).  Thx to Nate Eagleson.
  ;; 2014/10/13 dadams
  ;;     Removed extra, empty Package-Requires.
  ;; 2014/07/21 dadams
  ;;     Do not redefine delete-window - just advise it.
  ;;     delete/iconify-window: Just use delete-window, not old-delete-window.
  ;; 2014/04/19 dadams
  ;;     Added: frcmds-frame-number, name-all-frames-numerically, name-frame-numerically.
  ;;     Renamed: available-screen-pixel-*       to frcmds-available-screen-pixel-*,
  ;;              enlarged-font-name             to frcmds-enlarged-font-name,
  ;;              extra-pixels-*                 to frcmds-extra-pixels-*,
  ;;              frame-alist-var-names          to frcmds-frame-alist-var-names,
  ;;              frame-parameter-names          to frcmds-frame-parameter-names,
  ;;              frame-iconified-p              to frcmds-frame-iconified-p,
  ;;              new-frame-position             to frcmds-new-frame-position,
  ;;              read-args-for-tile-frames      to frcmds-read-args-for-tiling,
  ;;              read-buffer-for-delete-windows to frcmds-read-buffer-for-delete-windows,
  ;;              frame-cmds-set-difference      to frcmds-set-difference,
  ;;              smart-tool-bar-pixel-height    to frcmds-smart-tool-bar-pixel-height,
  ;;              tile-frames                    to frcmds-tile-frames.
  ;;     rename-non-minibuffer-frame: Pass OLD-NAME and NEW-NAME to rename-frame.
  ;;     Group Frame-Commands: Added :prefix frcmds-.
  ;;
  ;; 2014/02/24 dadams
  ;;     rename-frame, rename-non-minibuffer-frame: Fixed default buffer name for non-interactive.
  ;; 2013/09/21 dadams
  ;;     maximize-frame: Apply frame-geom-value-numeric to new-* also.  Bug report thx: Mike Fitzgerald.
  ;; 2013/07/21 dadams
  ;;     Added Package-Requires to header, at least temporarily, but should not need to specify version.
  ;; 2013/07/12 dadams
  ;;     set-frame-alist-parameter-from-frame: Use lax completion, so do not limit to known parameters.
  ;;     frame-parameter-names: Updated for Emacs 24.
  ;; 2013/07/05 dadams
  ;;     Added: move-frame-to-screen-top-left.
  ;;     move-frame-to-screen-*: Read FRAME name in interactive spec.
  ;; 2013/07/04 dadams
  ;;     show-hide-show-function: Use function-item instead of const for jump-to-frame-config-register.
  ;; 2013/05/15 dadams
  ;;     Added error symbols font-too-small and font-size.
  ;;     enlarged-font-name: Signal font-too-small error.
  ;; 2013/04/29 dadams
  ;;     Added: deiconify-everything, (mouse-)iconify/show-frame (renamed (mouse-)iconify/map-frame).
  ;;     iconify/show-frame: Negative prefix arg now deiconifies all.
  ;; 2013/03/12 dadams
  ;;     maximize-frame: Corrected new-left, new-top.
  ;;                     Corrected arg to modify-frame-parameters - use frame-geom-value-numeric
  ;;     Do not alias if function name is already fboundp.
  ;;     toggle-max-frame-*: Use toggle-max-frame, not restore-frame (the alias).
  ;;     toggle-max-frame: If no restore-* parameter then first maximize.
  ;;                       Condition last four parameters on orig-*, not restore-*.
  ;; 2013/02/06 dadams
  ;;     move-frame-(up|down|left|right): Set N to 1 if nil.
  ;; 2013/01/17 dadams
  ;;     Added: move-frame-to-screen-(top|bottom|left|right).
  ;;     move-frame-(up|down|left|right): Redefined so prefix arg moves increments of char size.
  ;; 2012/02/29 dadams
  ;;     Added, for Emacs 20 only: nbutlast, butlast.  To avoid runtime load of cl.el.
  ;;     Added frame-cmds-set-difference, to avoid runtime load of cl.el.
  ;;     set-all-frame-alist-parameters-from-frame: Use frame-cmds-set-difference.
  ;; 2011/07/25 dadams
  ;;     save-frame-config: Use fboundp, not featurep.
  ;; 2011/01/04 dadams
  ;;     Removed autoload cookie from non-interactive function.
  ;; 2010/10/19 dadams
  ;;     enlarge-font: Only do frame-update-faces if Emacs 20 (obsolete in 21).
  ;; 2010/06/04 dadams
  ;;     Added: (toggle-max|restore)-frame(-horizontally|-vertically).  Thx to Uday Reddy for suggestion.
  ;;     Renamed max-frame to maximize-frame.
  ;;     maximize-frame: Save original location & position params for later restoration.
  ;; 2010/05/25 dadams
  ;;     Added: max-frame, maximize-frame-horizontally, maximize-frame-vertically.
  ;; 2009/10/02 dadams
  ;;     delete-windows-on: Return nil.  Make BUFFER optional: default is current buffer.
  ;; 2009/08/03 dadams
  ;;     delete-window: Wrap with save-current-buffer.  Thx to Larry Denenberg.
  ;; 2009/05/17 dadams
  ;;     Updated to reflect thumb-frm.el name changes.
  ;; 2009/01/30 dadams
  ;;     enlarge-font, enlarged-font-name, enlarge-font-tries:
  ;;       Removed temporary workaround - Emacs 23 bug #119 was finally fixed.
  ;; 2009/01/01 dadams
  ;;     Removed compile-time require of doremi-frm.el to avoid infinite recursion.
  ;; 2008/12/13 dadams
  ;;     enlarge-font: Redefined for Emacs 23 - just use :height face attribute.
  ;;     enlarge-font-tries, enlarged-font-name: Not used for Emacs 23.
  ;; 2008/10/31 dadams
  ;;     Updated frame-parameter-names for Emacs 23.
  ;; 2008/07/29 dadams
  ;;     Option available-screen-pixel-bounds: Use nil as default value.
  ;;     available-screen-pixel-bounds: Redefined as the code that defined the option's default value.
  ;;     Added: effective-screen-pixel-bounds - code taken from old available-screen-pixel-bounds,
  ;;            but also convert frame geom value to numeric.
  ;;     Everywhere:
  ;;       Use effective-screen-pixel-bounds in place of available-screen-pixel-bounds function.
  ;;       Use available-screen-pixel-bounds function instead of option.
  ;;     available-screen-pixel-(width|height): Added optional INCLUDE-MINI-P arg.
  ;;     new-frame-position: Call available-screen-pixel-(width|height) with arg.
  ;;     save-frame-config: push-current-frame-config -> doremi-push-current-frame-config.
  ;;     Soft-require doremi-frm.el when byte-compile.
  ;; 2008/06/02 dadams
  ;;     Added: available-screen-pixel-bounds (option and function).
  ;;     tile-frames, available-screen-pixel-(width|height):
  ;;       Redefined to use available-screen-pixel-bounds.  Thx to Nathaniel Cunningham for input.
  ;; 2008/05/29 dadams
  ;;     Fixes for Mac by Nathaniel Cunningham and David Reitter:
  ;;       window-mgr-title-bar-pixel-height, tile-frames, smart-tool-bar-pixel-height (added).
  ;; 2007/12/27 dadams
  ;;      tile-frames: Restored border calculation, but using only external border.
  ;;      Renamed window-mgr-*-width to window-mgr-*-height and changed default value from 32 to 27.
  ;; 2007/12/20 dadams
  ;;      Added: frame-extra-pixels(width|height).  Use in tile-frames.  Thx to David Reitter.
  ;;      frame-horizontal-extra-pixels: Changed default value from 30 to 32.
  ;; 2007/10/11 dadams
  ;;      Added: assq-delete-all (for Emacs 20).
  ;; 2007/09/02 dadams
  ;;      Added: available-screen-pixel-(width|height).  Use in tile-frames, new-frame-position.
  ;; 2007/06/12 dadams
  ;;      tile-frames: Corrected use of fboundp for thumbnail-frame-p.
  ;; 2007/05/27 dadams
  ;;      enlarged-font-name:
  ;;        Do nothing if null assq of ascii.  Not sure what this means, but gets around Emacs 23 bug.
  ;; 2006/08/22 dadams
  ;;      Added: delete-windows-for, read-buffer-for-delete-windows.
  ;;      delete-windows-on: Use read-buffer-for-delete-windows.
  ;;      Removed old-delete-windows-on (not used).
  ;; 2006/05/30 dadams
  ;;      delete-windows-on: Return nil if buffer arg is nil. Thanks to Slawomir Nowaczyk.
  ;; 2006/01/07 dadams
  ;;      Added :link for sending bug report.
  ;; 2006/01/06 dadams
  ;;      Renamed group.  Added :link.
  ;; 2006/01/04 dadams
  ;;     Added: other-window-or-frame.
  ;; 2005/12/29 dadams
  ;;     mouse-show-hide-mark-unmark: dired-mouse-mark/unmark -> diredp-mouse-mark/unmark.
  ;; 2005/12/13 dadams
  ;;     Added: delete-other-frames.
  ;; 2005/11/18 dadams
  ;;     enlarge-font: Try to increment or decrment further, testing for an existing font.
  ;;     Added: enlarge-font-tries, enlarged-font-name.
  ;; 2005/10/03 dadams
  ;;     Removed require of icomplete+.el (no longer redefines read-from-minibuffer).
  ;; 2005/07/03 dadams
  ;;     Renamed: args-for-tile-frames to read-args-for-tile-frames.
  ;; 2005/06/19 dadams
  ;;     tile-frames: Don't tile thumbnail frames.
  ;; 2005/05/29 dadams
  ;;     Moved here from frame+.el and fit-frame.el: enlarge-frame*, shrink-frame*.
  ;;     Added: move-frame-up|down|left|right, move-frame-wrap-within-display-flag,
  ;;            new-frame-position.
  ;; 2005/05/28 dadams
  ;;     show-a-frame-on: Use another-buffer as default for read-buffer, if available.
  ;; 2005/05/15 dadams
  ;;     Renamed: minibuffer-frame to 1on1-minibuffer-frame.
  ;; 2005/05/10 dadams
  ;;     remove-window: Removed definition; just defalias it to delete-window.
  ;;     delete-window: (one-window-p) -> (one-window-p t).
  ;;     set-frame-alist-parameter-from-frame: No longer use destructive fns.
  ;; 2005/01/19 dadams
  ;;     set-all-frame-alist-parameters-from-frame:
  ;;            Added really-all-p and use frame-parameters-to-exclude.
  ;;     Added: frame-parameters-to-exclude, tell-customize-var-has-changed.
  ;; 2005/01/18 dadams
  ;;     Added: set-all-frame-alist-parameters-from-frame, set-frame-alist-parameter-from-frame,
  ;;            frame-alist-var-names, frame-parameter-names.
  ;;     Added Note on saving changes.
  ;; 2005/01/08 dadams
  ;;     Moved enlarge-font here from doremi-frm.el, where it was called doremi-grow-font.
  ;; 2005/01/04 dadams
  ;;     Added rename-frame-when-iconify-flag.
  ;;       Use it in iconify-everything, (mouse-)iconify/map-frame.
  ;;     Added (defgroup frame-cmds).
  ;; 2004/12/23 dadams
  ;;     frame-config-register, show-hide-show-function, window-mgr-title-bar-pixel-width:
  ;;         Changed defvar to defcustom.
  ;; 2004/12/21 dadams
  ;;     hide-everything, iconify-everything: bind thumbify-instead-of-iconify-flag to nil.
  ;; 2004/12/10 dadams
  ;;     tile-frames: Change 15 to (frame-char-height fr) for scroll-bar-width.
  ;;     tile-frames-*: Corrected doc strings for non-interactive case.
  ;; 2004/12/09 dadams
  ;;     Changed compile-time require of strings to a soft require.
  ;; 2004/10/11 dadams
  ;;     args-for-tile-frames: Fixed bug when non-existant frame in name history.
  ;;     tile-frames: show-frame at end (for case where use prefix arg)
  ;; 2004/09/11 dadams
  ;;     Moved to doremi-frm.el: frame-config-ring*, frame-config-wo-parameters,
  ;;                             push-frame-config.
  ;; 2004/09/07 dadams
  ;;     Added: jump-to-frame-config-register, push-frame-config, save-frame-config.
  ;; 2004/09/01 dadams
  ;;     Added: frame-config-register, show-hide-show-function,
  ;;            jump-to-frame-config-register.
  ;;     Rewrote to record frame config: iconify-everything, hide-everything.
  ;;     Rewrote to use show-hide-show-function: show-hide.
  ;; 2004/03/22 dadams
  ;;     Added: tile-frames, tile-frames-vertically, args-for-tile-frames.
  ;;     Rewrote tile-frames-horizontally to use tile-frames.
  ;; 2004/03/19 dadams
  ;;     Added tile-frames-horizontally.
  ;; 2000/11/27 dadams
  ;;     hide-frame: fixed bug: Added get-a-frame for frame name read.
  ;; 2000/09/27 dadams
  ;;     1. Added: frame-iconified-p.
  ;;     2. remove-window: only make-frame-invisible if not iconified (HACK).
  ;; 1999/10/05 dadams
  ;;     rename-frame: fixed bug if only 1 frame and old-name was a frame.
  ;; 1999/08/25 dadams
  ;;     Added: hide-everything, show-buffer-menu, show-hide.
  ;; 1999/03/17 dadams
  ;;     delete-1-window-frames-on: ensure a buffer object (not a name).
  ;; 1996/04/26 dadams
  ;;     delete/iconify-windows-on, show-a-frame-on: Do nothing if null buffer.
  ;; 1996/03/12 dadams
  ;;     delete/iconify-window: Unless one-window-p, do old-delete-window outside of
  ;;                            save-window-excursion.
  ;; 1996/03/08 dadams
  ;;     1. delete-windows-on: a. Fixed incorrect interactive spec (bad paren).
  ;;                           b. Second arg FRAME also provided interactively now.
  ;;     2. Added: delete/iconify-window, delete/iconify-windows-on.
  ;; 1996/02/27 dadams
  ;;     show-frame: Call make-frame-visible.
  ;; 1996/02/09 dadams
  ;;     Added show-*Help*-buffer.
  ;; 1996/01/30 dadams
  ;;     1. show-frame: Don't make-frame-visible.  Done by raise-frame anyway.
  ;;     2. Added show-a-frame-on.
  ;; 1996/01/09 dadams
  ;;     Added delete-windows-on and made it interactive.
  ;; 1996/01/08 dadams
  ;;     Added rename-non-minibuffer-frame.  Use in iconify-everything,
  ;;           iconify/map-frame, mouse-iconify/map-frame.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 2, or (at your option)
  ;; any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program; see the file COPYING.  If not, write to
  ;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
  ;; Floor, Boston, MA 02110-1301, USA.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;;; Code:

  (eval-when-compile (require 'cl)) ;; case, incf (plus, for Emacs 20: dolist, dotimes)
  (require 'frame-fns) ;; frame-geom-value-cons, frame-geom-value-numeric, frames-on, get-frame-name,
                       ;; get-a-frame, read-frame
  (require 'strings nil t) ;; (no error if not found) read-buffer
  (require 'misc-fns nil t) ;; (no error if not found) another-buffer

  ;; Don't require even to byte-compile, because doremi-frm.el soft-requires frame-cmds.el
  ;; (eval-when-compile (require 'doremi-frm nil t)) ;; (no error if not found)
  ;;                                                 ;; doremi-push-current-frame-config

  ;; Not required here, because this library requires `frame-cmds.el': `thumb-frm.el'.
  ;; However, `frame-cmds.el' soft-uses `thumfr-thumbnail-frame-p', which is defined
  ;; in `thumb-frm.el'.

  ;; Quiet byte-compiler.
  (defvar 1on1-minibuffer-frame)          ; In `oneonone.el'
  (defvar mac-tool-bar-display-mode)

  ;;;;;;;;;;;;;;;;;;;;;;;




  ;;; USER OPTIONS (VARIABLES) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (defgroup Frame-Commands nil
    "Miscellaneous frame and window commands."
    :group 'frames
    :prefix "frcmds-"
    :link `(url-link :tag "Send Bug Report"
            ,(concat "mailto:" "drew.adams" "@" "oracle" ".com?subject=\
  frame-cmds.el bug: \
  &body=Describe bug here, starting with `emacs -q'.  \
  Don't forget to mention your Emacs and library versions."))
    :link '(url-link :tag "Other Libraries by Drew"
            "http://www.emacswiki.org/cgi-bin/wiki/DrewsElispLibraries")
    :link '(url-link :tag "Download"
            "http://www.emacswiki.org/cgi-bin/wiki/frame-cmds.el")
    :link '(url-link :tag "Description - `delete-window'"
            "http://www.emacswiki.org/cgi-bin/wiki/FrameModes")
    :link '(url-link :tag "Description - Frame Renaming"
            "http://www.emacswiki.org/cgi-bin/wiki/FrameTitle")
    :link '(url-link :tag "Description - Frame Resizing"
            "http://www.emacswiki.org/cgi-bin/wiki/Shrink-Wrapping_Frames")
    :link '(url-link :tag "Description - Frame Customization"
            "http://www.emacswiki.org/cgi-bin/wiki/CustomizingAndSaving")
    :link '(url-link :tag "Description - Frame Tiling"
            "http://www.emacswiki.org/cgi-bin/wiki/Frame_Tiling_Commands")
    :link '(url-link :tag "Description - General"
            "http://www.emacswiki.org/cgi-bin/wiki/FrameModes")
    :link '(emacs-commentary-link :tag "Commentary" "frame-cmds"))

  (defcustom rename-frame-when-iconify-flag t
    "*Non-nil means frames are renamed when iconified.
  The new name is the name of the current buffer."
    :type 'boolean :group 'Frame-Commands)

  (defcustom frame-config-register ?\C-l  ; Control-L is the name of the register.
    "*Character naming register for saving/restoring frame configuration."
    :type 'character :group 'Frame-Commands)

  (defcustom show-hide-show-function 'jump-to-frame-config-register
    "*Function to show stuff that is hidden or iconified by `show-hide'.
  Candidates include `jump-to-frame-config-register' and `show-buffer-menu'."
    :type '(choice (function-item :tag "Restore frame configuration" jump-to-frame-config-register)
                   (function :tag "Another function"))
    :group 'Frame-Commands)

  ;; Use `cond', not `case', for Emacs 20 byte-compiler.
  (defcustom window-mgr-title-bar-pixel-height (cond ((eq window-system 'mac) 22)
                                                     ;; For older versions of OS X, 40 might be better.
                 ((eq window-system 'ns)  50)
                 (t  27))
    "*Height of frame title bar provided by the window manager, in pixels.
  You might alternatively call this constant the title-bar \"width\" or
  \"thickness\".  There is no way for Emacs to determine this, so you
  must set it."
    :type 'integer :group 'Frame-Commands)

  (defcustom enlarge-font-tries 100
    "*Number of times to try to change font-size, when looking for a font.
  The font-size portion of a font name is incremented or decremented at
  most this many times, before giving up and raising an error."
    :type 'integer :group 'Frame-Commands)

  (defcustom frame-parameters-to-exclude '((window-id) (buffer-list) (name) (title) (icon-name))
    "*Parameters to exclude in `set-all-frame-alist-parameters-from-frame'.
  An alist of the same form as that returned by `frame-parameters'.
  The cdr of each alist element is ignored.
  These frame parameters are not copied to the target alist."
    :type '(repeat (cons symbol sexp)) :group 'Frame-Commands)

  (defcustom move-frame-wrap-within-display-flag t
    "*Non-nil means wrap frame movements within the display.
  Commands `move-frame-up', `move-frame-down', `move-frame-left', and
  `move-frame-right' then move the frame back onto the display when it
  moves off of it.
  If nil, you can move the frame as far off the display as you like."
    :type 'boolean :group 'Frame-Commands)

  (defcustom available-screen-pixel-bounds nil
    "*Upper left and lower right of available screen space for tiling frames.
  Integer list: (x0 y0 x1 y1), where (x0, y0) is the upper left position
  and (x1, y1) is the lower right position.  Coordinates are in pixels,
  measured from the screen absolute origin, (0, 0), at the upper left.

  If this is nil, then the available space is calculated.  That should
  give good results in most cases."
    :type '(list
            (integer :tag "X0 (upper left) - pixels from screen left")
            (integer :tag "Y0 (upper left) - pixels from screen top")
            (integer :tag "X1 (lower right) - pixels from screen left" )
            (integer :tag "Y1 (lower right) - pixels from screen top"))
    :group 'Frame-Commands)



  ;;; FUNCTIONS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;###autoload
  (defun save-frame-config ()
    "Save current frame configuration.
  You can restore it with \\[jump-to-frame-config-register]."
    (interactive)
    (frame-configuration-to-register frame-config-register)
    (when (fboundp 'doremi-push-current-frame-config) ; In `doremi-frm.el'.
      (doremi-push-current-frame-config))
    (message
     (substitute-command-keys
      (if (fboundp 'doremi-frame-configs) ; In `doremi-frm.el'.
          (format "Use `\\[jump-to-frame-config-register]' (`C-x r j %c') or \
  `\\[doremi-frame-configs]' to restore frames as before (undo)." frame-config-register)
        "Use `\\[jump-to-frame-config-register]' to restore frames as before (undo)."))))

  ;;;###autoload
  (defun jump-to-frame-config-register ()
    "Restore frame configuration saved in `frame-config-register'."
    (interactive)
    (jump-to-register frame-config-register))

  ;;;###autoload
  (defun deiconify-everything ()
    "Deiconify any iconified frames."
    (interactive)
    (frame-configuration-to-register frame-config-register)
    (dolist (frame  (frame-list))
      (when (eq 'icon (frame-visible-p frame)) (make-frame-visible frame))))

  ;;;###autoload
  (defun iconify-everything ()
    "Iconify all frames of session at once.
  Remembers frame configuration in register `C-l' (Control-L).
  To restore this frame configuration, use `\\[jump-to-register] C-l'."
    (interactive)
    (frame-configuration-to-register frame-config-register)
    (let ((thumfr-thumbify-dont-iconify-flag  nil)) ; Defined in `thumb-frm.el'.
      (dolist (frame  (visible-frame-list))
        (when rename-frame-when-iconify-flag (rename-non-minibuffer-frame frame))
        (iconify-frame frame))))

  ;;;###autoload
  (defun hide-everything ()
    "Hide all frames of session at once.
  Iconify minibuffer frame; make all others invisible.
  Remembers frame configuration in register `C-l' (Control-L).
  To restore this frame configuration, use `\\[jump-to-register] C-l'."
    (interactive)
    (frame-configuration-to-register frame-config-register)
    (let ((minibuf-frame-name                 (and (boundp '1on1-minibuffer-frame)
                                                   (cdr (assq 'name (frame-parameters
                                                                     1on1-minibuffer-frame)))))
          (thumfr-thumbify-dont-iconify-flag  nil)) ; Defined in `thumb-frm.el'.
      (dolist (frame  (frame-list))
        (if (eq minibuf-frame-name (cdr (assq 'name (frame-parameters frame))))
            (iconify-frame frame)         ; minibuffer frame
          (make-frame-invisible frame t))))) ; other frames

  ;;;###autoload
  (defun show-hide ()
    "1 frame visible: `show-hide-show-function'; else: `hide-everything'.
  This acts as a toggle between showing all frames and showing only an
  iconified minibuffer frame."
    (interactive)
    (if (< (length (visible-frame-list)) 2) (funcall show-hide-show-function) (hide-everything)))

  ;;;###autoload
  (defun show-buffer-menu ()
    "Call `buffer-menu' after making all frames visible.
  Useful after using `hide-everything' because of a Windows bug that
  doesn't let you display frames that have been made visible after
  being made invisible."
    (interactive)
    (let ((minibuf-frame-name  (and (boundp '1on1-minibuffer-frame)
                                    (cdr (assq 'name (frame-parameters 1on1-minibuffer-frame))))))
      (dolist (frame  (frame-list))
        (if (eq minibuf-frame-name (cdr (assq 'name (frame-parameters frame))))
            (make-frame-visible frame)    ; minibuffer frame
          (iconify-frame frame)))         ; other frames
      (buffer-menu)))

  ;;;###autoload
  (defun mouse-show-hide-mark-unmark (event)
    "In minibuffer: `show-hide'.  In dired: mark/unmark; else: buffer menu."
    (interactive "e")
    (if (window-minibuffer-p (posn-window (event-start event)))
        (show-hide)
      (or (and (memq major-mode '(dired-mode vc-dired-mode))
               (fboundp 'diredp-mouse-mark/unmark)
               (diredp-mouse-mark/unmark event)) ; Return nil if not on a file or dir.
          (mouse-buffer-menu event))))

  ;;;###autoload
  (defalias 'iconify/map-frame 'iconify/show-frame) ; `.../map...' is the old name.
  ;;;###autoload
  (defun iconify/show-frame (&optional all-action)
    "Iconify selected frame if now shown.  Show it if now iconified.
  A non-negative prefix arg iconifies all shown frames.
  A negative prefix arg deiconifies all iconified frames."
    (interactive "P")
    (cond ((not all-action)
           (when rename-frame-when-iconify-flag (rename-non-minibuffer-frame))
           (iconify-or-deiconify-frame))
          ((natnump (prefix-numeric-value all-action))
           (iconify-everything))
          (t
           (deiconify-everything))))

  ;;;###autoload
  (defalias 'mouse-iconify/map-frame 'mouse-iconify/show-frame) ; `.../map...' is the old name.
  ;;;###autoload
  (defun mouse-iconify/show-frame (event)
    "Iconify frame you click, if now shown.  Show it if now iconified."
    (interactive "e")
    (select-window (posn-window (event-start event)))
    (when rename-frame-when-iconify-flag (rename-non-minibuffer-frame))
    (iconify-or-deiconify-frame))



  ;; ADVISE ORIGINAL (built-in):
  ;;
  ;; If WINDOW is the only one in its frame, `delete-frame'.
  (defadvice delete-window (around delete-frame-if-one-win activate)
    "If WINDOW is the only one in its frame, then `delete-frame' too."
    (save-current-buffer
      (select-window (or (ad-get-arg 0)  (selected-window)))
      (if (one-window-p t) (delete-frame) ad-do-it)))

  ;;;###autoload
  (defun delete-windows-for (&optional buffer)
    "`delete-window' or prompt for buffer and delete its windows.
  With no prefix arg, delete the selected window.
  With a prefix arg, prompt for a buffer and delete all windows, on any
    frame, that show that buffer."
    (interactive (list (and current-prefix-arg  (frcmds-read-buffer-for-delete-windows))))
    (if buffer (delete-windows-on buffer) (delete-window)))



  ;; REPLACES ORIGINAL (built-in):
  ;;
  ;; 1) Use `read-buffer' in interactive spec.
  ;; 2) Do not raise an error if BUFFER is a string that does not name a buffer.
  ;; 3) Call `delete-window', so if you use the advised `delete-window' here then this also deletes
  ;;    frames where window showing the BUFFER is the only window.
  ;;
  ;;;###autoload
  (defun delete-windows-on (&optional buffer frame)
    "Delete windows showing BUFFER.
  Optional arg BUFFER defaults to the current buffer.

  Optional second arg FRAME controls which frames are considered.
    If nil or omitted, delete all windows showing BUFFER in any frame.
    If t, delete only windows showing BUFFER in the selected frame.
    If `visible', delete all windows showing BUFFER in any visible frame.
    If a frame, delete only windows showing BUFFER in that frame.

  Interactively, FRAME depends on the prefix arg, as follows:
    Without a prefix arg (prefix = nil), FRAME is nil (all frames).
    With prefix arg >= 0, FRAME is t (this frame only).
    With prefix arg < 0,  FRAME is `visible' (all visible frames)."
    (interactive
     (list (frcmds-read-buffer-for-delete-windows)
           (and current-prefix-arg
                (or (natnump (prefix-numeric-value current-prefix-arg))  'visible))))
    (unless buffer (setq buffer  (current-buffer))) ; Like Emacs 23+ - unlike Emacs 21-22.

    ;; `get-buffer-window' interprets FRAME oppositely for t and nil, so switch.
    (setq frame  (if (eq t frame) nil (if (eq nil frame) t frame)))
    (let (win)
      ;; Vanilla Emacs version raises an error if BUFFER is a string that does not name a buffer.
      ;; We do not raise an error - we do nothing.
      (and (get-buffer buffer)
           (while (setq win  (get-buffer-window buffer frame)) (delete-window win))
           nil)))                         ; Return nil always, like vanilla Emacs.

  (defun frcmds-read-buffer-for-delete-windows ()
    "Read buffer name for delete-windows commands.
  Only displayed buffers are completion candidates."
    (completing-read "Delete windows on buffer: "
                     (let ((all-bufs   (buffer-list))
                           (cand-bufs  ()))
                       (dolist (buf  all-bufs)
                         (when (get-buffer-window buf t)
                           (push (list (buffer-name buf)) cand-bufs)))
                       cand-bufs)
                     nil t nil 'minibuffer-history (buffer-name (current-buffer)) t))

  (defsubst frcmds-frame-iconified-p (frame)
    "Return non-nil if FRAME is `frame-live-p' and `frame-visible-p'."
    (and (frame-live-p frame)  (eq (frame-visible-p frame) 'icon)))

  ;; (defun remove-window (&optional window)
  ;;   "Remove WINDOW from the display.  Default is `selected-window'.
  ;; If WINDOW is the only one in its frame, then:
  ;;    If WINDOW is dedicated to its buffer, then make its frame invisible.
  ;;    Otherwise, delete its frame (as well as the window)."
  ;;   (interactive)
  ;;   (setq window  (or window  (selected-window)))
  ;;   (select-window window)
  ;;   (if (and (window-dedicated-p (selected-window))
  ;;            (one-window-p t))
  ;;       (let ((fr  (selected-frame)))
  ;;         ;; HACK because of Emacs bug: `raise-frame' won't raise a frame
  ;;         ;; that was first iconified and then made invisible.
  ;;         ;; So, here we don't make an iconified frame invisible.
  ;;         (unless (frcmds-frame-iconified-p fr)
  ;;           (make-frame-invisible fr)))
  ;;     (delete-window)))

  ;; REMOVED old definition, above, because of problems with invisible
  ;; *Completions* frame when use completion window with subsequent args
  ;; to a command.  Just use `delete-window' now, which deletes frame if
  ;; `one-window-p'.  Use a `defalias' because its easier than replacing
  ;; all my calls to `remove-window' with `delete-window'.
  ;;
  ;;;###autoload
  (defalias 'remove-window 'delete-window)

  ;;;###autoload
  (defun remove-windows-on (buffer)
    "Remove all windows showing BUFFER.  This calls `remove-window'
  on each window showing BUFFER."
    (interactive
     (list (read-buffer "Remove all windows showing buffer: " (current-buffer) 'existing)))
    (setq buffer  (get-buffer buffer))     ; Convert to buffer.
    (when buffer                          ; Do nothing if null BUFFER.
      (dolist (fr (frames-on buffer t))
        (remove-window (get-buffer-window buffer t)))))

  ;;;###autoload
  (defun mouse-remove-window (event)
    "Remove the window you click on.  (This calls `remove-window'.)
  This command must be bound to a mouse click."
    (interactive "e")
    (mouse-minibuffer-check event)
    (remove-window (posn-window (event-start event))))

  ;;;###autoload
  (defun delete/iconify-window (&optional window frame-p)
    "Delete or iconify WINDOW (default: `selected-window').
  If WINDOW is the only one in its frame (`one-window-p'), then optional
  arg FRAME-P determines the behavior regarding the frame, as follows:
    If FRAME-P is nil, then the frame is deleted (with the window).
    If FRAME-P is t, then the frame is iconified.
    If FRAME-P is a symbol naming a function, the function is applied
               to WINDOW as its only arg.
               If the result is nil, then the frame is deleted.
               If the result is non-nil, then the frame is iconified.
    If FRAME-P is anything else, then behavior is as if FRAME-P were the
               symbol `window-dedicated-p': the frame is iconified if
               WINDOW is dedicated, otherwise the frame is deleted.

  Interactively, FRAME-P depends on the prefix arg, as follows:
    Without a prefix arg (prefix = nil), FRAME-P is `window-dedicated-p'.
    With prefix arg < 0, FRAME-P is t.  The frame is iconified.
    With prefix arg >= 0, FRAME-P is nil.  The frame is deleted."
    (interactive
     (list nil (if current-prefix-arg
                   (not (natnump (prefix-numeric-value current-prefix-arg)))
                 'window-dedicated-p)))
    (setq window  (or window  (selected-window)))
    (let ((one-win-p  t))
      (save-window-excursion
        (select-window window)
        (if (one-window-p)
            (if frame-p
                (if (eq t frame-p)
                    (iconify-frame)
                  (unless (and (symbolp frame-p)  (fboundp frame-p))
                    (setq frame-p  'window-dedicated-p))
                  (if (funcall frame-p window) (iconify-frame) (delete-frame)))
              (delete-frame))             ; Default.
          (setq one-win-p  nil)))
      ;; Do this outside `save-window-excursion'.
      (unless one-win-p (delete-window window))))

  ;;;###autoload
  (defun delete/iconify-windows-on (buffer &optional frame frame-p)
    "For each window showing BUFFER: delete it or iconify its frame.
  \(This calls `delete/iconify-window' on each window showing BUFFER.)

  Optional second arg FRAME controls which frames are considered.
    If nil or omitted, treat all windows showing BUFFER in any frame.
    If t, treat only windows showing BUFFER in the selected frame.
    If `visible', treat all windows showing BUFFER in any visible frame.
    If a frame, treat only windows showing BUFFER in that frame.

  Optional third arg FRAME-P controls what to do with one-window frames.
    If FRAME-P is nil, then one-window frames showing BUFFER are deleted.
    If FRAME-P is t, then one-window frames are iconified.
    If FRAME-P is a symbol naming a function, the function is applied
               to each window showing buffer in a frame by itself.
               If the result is nil, then the frame is deleted.
               If the result is non-nil, then the frame is iconified.
    If FRAME-P is anything else, then behavior is as if FRAME-P were the
               symbol `window-dedicated-p': One-window frames are
               iconified if window is dedicated, else they are deleted.

  Interactively, FRAME is nil, and FRAME-P depends on the prefix arg:
    Without a prefix arg (prefix = nil), FRAME-P is `window-dedicated-p'.
    With prefix arg < 0, FRAME-P is t.  The frame is iconified.
    With prefix arg >= 0, FRAME-P is nil.  The frame is deleted."
    (interactive
     (list (read-buffer "Delete windows on buffer: " (current-buffer) 'existing)
           nil
           (if current-prefix-arg
               (not (natnump (prefix-numeric-value current-prefix-arg)))
             'window-dedicated-p)))
    (setq buffer  (get-buffer buffer))     ; Convert to buffer.
    (when buffer                          ; Do nothing if null BUFFER.
      ;; `get-buffer-window' interprets FRAME oppositely for t and nil,
      ;; so switch.
      (setq frame  (if (eq t frame) nil (if (eq nil frame) t frame)))
      (dolist (fr (frames-on buffer frame))
        (delete/iconify-window (get-buffer-window buffer frame) frame-p))))

  ;;;###autoload
  (defun rename-frame (&optional old-name new-name all-named)
    "Rename a frame named OLD-NAME to NEW-NAME.
  Prefix arg non-nil means rename all frames named OLD-NAME to NEWNAME.
  OLD-NAME may be a frame, its name, or nil.  Default is `selected-frame'.
  NEW-NAME is a string or nil.  Default NEW-NAME is current `buffer-name'."
    (interactive
     (list (read-frame (concat "Rename " (and current-prefix-arg  "all ")
                               "frame" (and current-prefix-arg  "s named") ": ")
                       nil t)             ; Default = selected.  Must exist.
           (read-from-minibuffer "Rename to (new name): " (cons (buffer-name) 1))
           current-prefix-arg))
    (setq old-name  (or old-name  (get-frame-name)) ; Batch defaults from current.
          new-name  (or new-name  (buffer-name (window-buffer (frame-selected-window)))))
    ;; Convert to frame if string.
    (let ((fr  (get-a-frame old-name)))
      (if all-named
          (while fr
            (modify-frame-parameters fr (list (cons 'name new-name)))
            (setq fr  (get-a-frame old-name))) ; Get another.
        (when (string= (get-frame-name fr) (get-frame-name))
          (setq fr  (selected-frame)))
        (modify-frame-parameters fr (list (cons 'name new-name))))))

  ;;;###autoload
  (defun rename-non-minibuffer-frame (&optional old-name new-name all-named)
    "Unless OLD-NAME names the minibuffer frame, use `rename-frame'
  to rename a frame named OLD-NAME to NEW-NAME.
  Prefix arg non-nil means rename all frames named OLD-NAME to NEW-NAME.
  OLD-NAME may be a frame, its name, or nil.  Default is `selected-frame'.
  NEW-NAME is a string or nil.  Default NEW-NAME is current `buffer-name'."
    (interactive
     (list (read-frame (concat "Rename " (and current-prefix-arg  "all ")
                               "frame" (and current-prefix-arg  "s named") ": ")
                       nil t)             ; Default = selected.  Must exist.
           (read-from-minibuffer "Rename to (new name): " (cons (buffer-name) 1))
           current-prefix-arg))
    (setq old-name  (or old-name  (get-frame-name)) ; Batch defaults from current.
          new-name  (or new-name  (buffer-name (window-buffer (frame-selected-window)))))
    (let ((fr  (get-a-frame old-name)))   ; Convert to frame if string.
      (if (and (boundp '1on1-minibuffer-frame)
               (eq (cdr (assq 'name (frame-parameters 1on1-minibuffer-frame)))
                   (cdr (assq 'name (frame-parameters fr)))))
          (and (interactive-p)
               (error "Use `rename-frame' if you really want to rename minibuffer frame"))
        (rename-frame old-name new-name))))

  ;;;###autoload
  (defun name-all-frames-numerically (&optional startover)
    "Rename all frames to numerals in 1,2,3...
  With optional arg STARTOVER (prefix arg, interactively), rename all
  starting over from 1.  Otherwise, numbering continues from the highest
  existing frame number."
    (interactive "P")
    (when startover
      (dolist (fr  (frame-list))
        (rename-non-minibuffer-frame fr (format "a%s" (frame-parameter fr 'name)))))
    (mapc #'name-frame-numerically (frame-list)))

  ;;;###autoload
  (defun name-frame-numerically (&optional frame frames)
    "Name FRAME (default, selected frame) to a numeral in 1,2,3...
  If FRAME's name is already such a numeral, do nothing.
  Else:
   Rename it to a numeral one greater than the max numeric frame name.
   Rename any other frames to numerals also.

  To automatically name new frames numerically, you can do this in your
  init file:

    (add-hook 'after-make-frame-functions 'name-frame-numerically)"
    (interactive)
    (setq frame   (or frame   (selected-frame))
          frames  (or frames  (list frame)))
    (let ((onum  (frcmds-frame-number frame))
          onums max)
      (unless onum
        (dolist (fr  (frcmds-set-difference (frame-list) frames))
          (unless (eq fr frame)
            (name-frame-numerically fr (cons fr frames))))
        (setq onums  (delq nil (mapcar #'frcmds-frame-number (frame-list)))
              max    (if onums (apply #'max onums) 0))
        (rename-non-minibuffer-frame frame (number-to-string (1+ max))))))

  (defun frcmds-frame-number (frame)
    "Return FRAME's number, or nil if its name is not a numeral 1,2,3..."
    (let ((num  (string-to-number (frame-parameter frame 'name))))
      (and (wholenump num)  (not (zerop num))  num)))

  ;;;###autoload
  (defun show-frame (frame)
    "Make FRAME visible and raise it, without selecting it.
  FRAME may be a frame or its name."
    (interactive (list (read-frame "Frame to make visible: ")))
    (setq frame  (get-a-frame frame))
    (make-frame-visible frame)
    (raise-frame frame))

  ;;;###autoload
  (defun hide-frame (frame &optional prefix)
    "Make FRAME invisible.  Like `make-frame-invisible', but reads frame name.
  Non-nil PREFIX makes it invisible even if all other frames are invisible."
    (interactive (list (read-frame "Frame to make invisible: ")))
    (make-frame-invisible (get-a-frame frame) prefix))

  ;;;###autoload
  (defun show-a-frame-on (buffer)
    "Make visible and raise a frame showing BUFFER, if there is one.
  Neither the frame nor the BUFFER are selected.
  BUFFER may be a buffer or its name (a string)."
    (interactive
     (list (read-buffer "Show a frame showing buffer: "
                        (if (fboundp 'another-buffer) ; Defined in `misc-fns.el'.
                            (another-buffer nil t)
                          (other-buffer (current-buffer)))
                        'existing)))
    (when buffer                          ; Do nothing if null BUFFER.
      (let ((fr  (car (frames-on buffer)))) (when fr (show-frame fr)))))

  ;;;###autoload
  (defun show-*Help*-buffer ()
    "Raise a frame showing buffer *Help*, without selecting it."
    (interactive) (show-a-frame-on "*Help*"))

  ;;;###autoload
  (defun delete-1-window-frames-on (buffer)
    "Delete all visible 1-window frames showing BUFFER."
    (interactive
     (list (read-buffer "Delete all visible 1-window frames showing buffer: "
                        (current-buffer) 'existing)))
    (setq buffer  (get-buffer buffer))
    (save-excursion
      (when (buffer-live-p buffer)        ; Do nothing if dead buffer.
        (dolist (fr (frames-on buffer))   ; Is it better to search through
          (save-window-excursion          ; `frames-on' or `get-buffer-window-list'?
            (select-frame fr)
            (when (one-window-p t fr) (delete-frame)))))))

  ;;;###autoload
  (defun delete-other-frames (&optional frame)
    "Delete all frames except FRAME (default: selected frame).
  Interactively, use a prefix arg (`\\[universal-argument]') to be prompted for FRAME."
    (interactive (list (if current-prefix-arg
                           (get-a-frame (read-frame "Frame to make invisible: "))
                         (selected-frame))))
    (when frame
      (dolist (fr  (frame-list))
        (unless (eq fr frame) (condition-case nil (delete-frame fr) (error nil))))))

  ;;;###autoload
  (defun maximize-frame-horizontally (&optional frame)
    "Maximize selected frame horizontally."
    (interactive (list (selected-frame)))
    (maximize-frame 'horizontal frame))

  ;;;###autoload
  (defun maximize-frame-vertically (&optional frame)
    "Maximize selected frame vertically."
    (interactive (list (selected-frame)))
    (maximize-frame 'vertical frame))

  ;;;###autoload
  (defun maximize-frame (&optional direction frame)
    "Maximize selected frame horizontally, vertically, or both.
  With no prefix arg, maximize both directions.
  With a non-negative prefix arg, maximize vertically.
  With a negative prefix arg, maximize horizontally.

  In Lisp code:
   DIRECTION is the direction: `horizontal', `vertical', or `both'.
   FRAME is the frame to maximize."
    (interactive (list (if current-prefix-arg
                           (if (natnump (prefix-numeric-value current-prefix-arg))
                               'vertical
                             'horizontal)
                         'both)))
    (unless frame (setq frame  (selected-frame)))
    (unless direction (setq direction  'both))
    (let (;; Size of a frame that uses all of the available screen area,
          ;; but leaving room for a minibuffer frame at bottom of display.
          (fr-pixel-width   (frcmds-available-screen-pixel-width))
          (fr-pixel-height  (frcmds-available-screen-pixel-height))
          (fr-origin        (if (eq direction 'horizontal)
                                (car (frcmds-effective-screen-pixel-bounds))
                              (cadr (frcmds-effective-screen-pixel-bounds))))
          (orig-left        (frame-parameter frame 'left))
          (orig-top         (frame-parameter frame 'top))
          (orig-width       (frame-parameter frame 'width))
          (orig-height      (frame-parameter frame 'height)))
      (let* ((borders     (* 2 (cdr (assq 'border-width (frame-parameters frame)))))
             (new-left    (if (memq direction '(horizontal both)) 0 orig-left))
             (new-top     (if (memq direction '(vertical   both)) 0 orig-top))
             ;; Subtract borders, scroll bars, & title bar, then convert pixel sizes to char sizes.
             (new-width   (if (memq direction '(horizontal both))
                              (/ (- fr-pixel-width borders (frcmds-extra-pixels-width frame))
                                 (frame-char-width frame))
                            orig-width))
             (new-height  (if (memq direction '(vertical both))
                              (- (/ (- fr-pixel-height borders
                                       (frcmds-extra-pixels-height frame)
                                       window-mgr-title-bar-pixel-height
                                       (frcmds-smart-tool-bar-pixel-height))
                                    (frame-char-height frame))
                                 ;; Subtract menu bar unless on Carbon Emacs (menu bar not in the frame).
                                 (if (eq window-system 'mac)
                                     0
                                   (cdr (assq 'menu-bar-lines (frame-parameters frame)))))
                            orig-height)))
        (modify-frame-parameters
         frame
         `((left   . ,new-left)
           (width  . ,new-width)
           (top    . ,new-top)
           (height . ,new-height)
           ;; If we actually changed a parameter, record the old one for restoration.
           ,(and new-left    (/= (frame-geom-value-numeric 'left orig-left)
                                 (frame-geom-value-numeric 'left new-left))
                 (cons 'restore-left   orig-left))
           ,(and new-top     (/= (frame-geom-value-numeric 'top orig-top)
                                 (frame-geom-value-numeric 'top new-top))
                 (cons 'restore-top    orig-top))
           ,(and new-width   (/= (frame-geom-value-numeric 'width orig-width)
                                 (frame-geom-value-numeric 'width new-width))
                 (cons 'restore-width  orig-width))
           ,(and new-height  (/= (frame-geom-value-numeric 'height orig-height)
                                 (frame-geom-value-numeric 'height new-height))
                 (cons 'restore-height orig-height)))))
      (show-frame frame)
      (incf fr-origin (if (eq direction 'horizontal) fr-pixel-width fr-pixel-height))))

  ;;;###autoload
  (unless (fboundp 'restore-frame-horizontally)
    (defalias 'restore-frame-horizontally 'toggle-max-frame-horizontally))
  ;;;###autoload
  (defun toggle-max-frame-horizontally (&optional frame)
    "Toggle maximization of FRAME horizontally.
  If used once, this restores the frame.  If repeated, it maximizes.
  This affects the `left' and `width' frame parameters.

  FRAME defaults to the selected frame."
    (interactive (list (selected-frame)))
    (toggle-max-frame 'horizontal frame))

  ;;;###autoload
  (unless (fboundp 'restore-frame-vertically)
    (defalias 'restore-frame-vertically 'toggle-max-frame-vertically))
  ;;;###autoload
  (defun toggle-max-frame-vertically (&optional frame)
    "Toggle maximization of FRAME vertically.
  If used once, this restores the frame.  If repeated, it maximizes.
  This affects the `top' and `height' frame parameters.

  FRAME defaults to the selected frame."
    (interactive (list (selected-frame)))
    (toggle-max-frame 'vertical frame))

  ;;;###autoload
  (unless (fboundp 'restore-frame) (defalias 'restore-frame 'toggle-max-frame))
  ;;;###autoload
  (defun toggle-max-frame (&optional direction frame)
    "Toggle maximization of FRAME horizontally, vertically, or both.
  Reverses or (if restored) repeats the effect of the Emacs maximize
  commands.  Does not restore from maximization effected outside Emacs.

  With no prefix arg, toggle both directions.
  With a non-negative prefix arg, toggle only vertically.
  With a negative prefix arg, toggle horizontally.

  When toggling both directions, each is toggled from its last maximize
  or restore state.  This means that using this after
  `maximize-frame-horizontally', `maximize-frame-vertically',
  `toggle-max-frame-horizontally', or `toggle-max-frame-vertically' does
  not necessarily just reverse the effect of that command.

  In Lisp code:
   DIRECTION is the direction: `horizontal', `vertical', or `both'.
   FRAME is the frame to change.  It defaults to the selected frame."
    (interactive (list (if current-prefix-arg
                           (if (natnump (prefix-numeric-value current-prefix-arg))
                               'vertical
                             'horizontal)
                         'both)))
    (unless frame (setq frame  (selected-frame)))
    (unless direction (setq direction  'both))
    (let ((restore-left    (frame-parameter frame 'restore-left))
          (restore-top     (frame-parameter frame 'restore-top))
          (restore-width   (frame-parameter frame 'restore-width))
          (restore-height  (frame-parameter frame 'restore-height))
          (orig-left       (frame-parameter frame 'left))
          (orig-top        (frame-parameter frame 'top))
          (orig-width      (frame-parameter frame 'width))
          (orig-height     (frame-parameter frame 'height))
          (horiz           (memq direction '(horizontal both)))
          (vert            (memq direction '(vertical both))))
      (case direction
        (both        (unless (and restore-left  restore-width  restore-top  restore-height)
                       (maximize-frame 'both frame)))
        (vertical    (unless (and restore-top  restore-height) (maximize-frame-vertically frame)))
        (horizontal  (unless (and restore-left  restore-width) (maximize-frame-horizontally frame))))
      (modify-frame-parameters
       frame `(,(and horiz  restore-left    (cons 'left           restore-left))
               ,(and horiz  restore-width   (cons 'width          restore-width))
               ,(and vert   restore-top     (cons 'top            restore-top))
               ,(and vert   restore-height  (cons 'height         restore-height))
               ,(and horiz  orig-left       (cons 'restore-left   orig-left))
               ,(and horiz  orig-width      (cons 'restore-width  orig-width))
               ,(and vert   orig-top        (cons 'restore-top    orig-top))
               ,(and vert   orig-height     (cons 'restore-height orig-height)))))
    (show-frame frame))

  ;;;###autoload
  (defalias 'tile-frames-side-by-side 'tile-frames-horizontally)
  ;;;###autoload
  (defun tile-frames-horizontally (&optional frames)
    "Tile frames horizontally (side by side).
  Interactively:
    With prefix arg, you are prompted for names of two frames to tile.
    With no prefix arg, all visible frames are tiled, except a
         standalone minibuffer frame, if any.
  If called from a program, all frames in list FRAMES are tiled."
    (interactive (and current-prefix-arg  (frcmds-read-args-for-tiling)))
    (frcmds-tile-frames 'horizontal frames))

  ;;;###autoload
  (defalias 'tile-frames-top-to-bottom 'tile-frames-vertically)
  ;;;###autoload
  (defun tile-frames-vertically (&optional frames)
    "Tile frames vertically (stacking from the top of the screen downward).
  Interactively:
    With prefix arg, you are prompted for names of two frames to tile.
    With no prefix arg, all visible frames are tiled, except a
         standalone minibuffer frame, if any.
  If called from a program, all frames in list FRAMES are tiled."
    (interactive (and current-prefix-arg  (frcmds-read-args-for-tiling)))
    (frcmds-tile-frames 'vertical frames))

  ;;;###autoload
  (defun create-frame-tiled-horizontally ()
    "Horizontally tile screen with selected frame and a copy.
  The same character size is used for the new frame."
    (interactive)
    (let* ((fr1    (selected-frame))
           (font1  (frame-parameter fr1 'font))
           (fr2    (make-frame-command)))
      (save-selected-window (select-frame fr2) (set-frame-font font1))
      (frcmds-tile-frames 'horizontal (list fr1 fr2))))

  ;;;###autoload
  (defun create-frame-tiled-vertically ()
    "Vertically tile screen with selected frame and a copy.
  The same character size is used for the new frame."
    (interactive)
    (let* ((fr1    (selected-frame))
           (font1  (frame-parameter fr1 'font))
           (fr2    (make-frame-command)))
      (frcmds-tile-frames 'vertical (list fr1 fr2))))

  ;;;###autoload
  (defun split-frame-horizontally (num)
    "Horizontally split the selected frame.
  With a prefix arg, create that many new frames.
  The same character size is used for the new frames."
    (interactive "p")
    (frcmds-split-frame-1 'horizontal num))

  ;;;###autoload
  (defun split-frame-vertically (num)
    "Vertically split the selected frame.
  With a prefix arg, create that many new frames.
  The same character size is used for the new frames."
    (interactive "p")
    (frcmds-split-frame-1 'vertical num))

  (defun frcmds-split-frame-1 (direction num)
    "Helper for `split-frame-horizontally' and `split-frame-vertically'.
  DIRECTION is `horizontal' or `vertical'.
  NUM is the desired number of new frames to create."
    (let* ((fr1     (selected-frame))
           (font1   (frame-parameter fr1 'font))
           (x-min   (frame-geom-value-numeric 'left (frame-parameter fr1 'left)))
           (y-min   (frame-geom-value-numeric 'top  (frame-parameter fr1 'top)))
           (wid     (frame-pixel-width fr1))
           (hght    (frcmds-frame-pixel-height fr1))
           (frames  (list fr1))
           fr)
      (dotimes (ii num)
        (setq fr  (make-frame-command))
        (save-selected-window (select-frame fr) (set-frame-font font1))
        (push fr frames))
      (frcmds-tile-frames direction frames x-min y-min wid hght)))

  (defun frcmds-frame-pixel-height (frame)
    "Pixel height of FRAME, including the window-manager title bar and menu-bar.
  For the title bar, `window-mgr-title-bar-pixel-height' is used.
  For the menu-bar, the frame char size is multiplied by frame parameter
  `menu-bar-lines'.  But that parameter does not take into account
  menu-bar wrapping."
    (+ window-mgr-title-bar-pixel-height
       (frame-pixel-height frame)
       (if (not (eq window-system 'x))
           0
         (+ (* (frame-char-height frame)
               (cdr (assq 'menu-bar-lines (frame-parameters frame))))))))

  (defun frcmds-tile-frames (direction frames &optional x-min-pix y-min-pix pix-width pix-height)
    "Tile visible frames horizontally or vertically, depending on DIRECTION.
  Arg DIRECTION is `horizontal' or `vertical' (meaning side by side or
  above and below, respectively).

  Arg FRAMES is the list of frames to tile.  If nil, then tile all visible
  frames (except a standalone minibuffer frame, if any).

  The optional args cause tiling to be limited to the bounding rectangle
  they specify.  X-MIN-PIX and Y-MIN-PIX are the `left' and `top' screen
  pixel positions of the rectangle.  X-PIX-WIDTH and Y-PIX-HEIGHT are
  the pixel width and height of the rectangle."
    (let ((visible-frames   (or frames
                                (filtered-frame-list ; Get visible frames, except minibuffer.
                                 #'(lambda (fr)
                                     (and (eq t (frame-visible-p fr))
                                          (or (not (fboundp 'thumfr-thumbnail-frame-p))
                                              (not (thumfr-thumbnail-frame-p fr)))
                                          (or (not (boundp '1on1-minibuffer-frame))
                                              (not (eq (cdr (assq 'name (frame-parameters
                                                                         1on1-minibuffer-frame)))
                                                       (cdr (assq 'name (frame-parameters fr)))))))))))
          ;; Size of a frame that uses all of the available screen area,
          ;; but leaving room for a minibuffer frame at bottom of display.
          (fr-pixel-width   (or pix-width   (frcmds-available-screen-pixel-width)))
          (fr-pixel-height  (or pix-height  (frcmds-available-screen-pixel-height)))
          (fr-origin        (if (eq direction 'horizontal)
                                (or x-min-pix  (car (frcmds-effective-screen-pixel-bounds)))
                              (or y-min-pix  (cadr (frcmds-effective-screen-pixel-bounds))))))
      (case direction                     ; Size of frame in pixels.
        (horizontal  (setq fr-pixel-width   (/ fr-pixel-width  (length visible-frames))))
        (vertical    (setq fr-pixel-height  (/ fr-pixel-height (length visible-frames))))
        (otherwise   (error "`frcmds-tile-frames': DIRECTION must be `horizontal' or `vertical'")))
      (dolist (fr  visible-frames)
        (if (or (> emacs-major-version 24)
                (and (= emacs-major-version 24)  (> emacs-minor-version 3)))
            (let ((frame-resize-pixelwise  t))
              (set-frame-size
               fr
               ;; Subtract scroll bars, & title bar.
               (- fr-pixel-width (frcmds-extra-pixels-width fr))
               (- fr-pixel-height
                  window-mgr-title-bar-pixel-height
                  (if pix-height 0 (frcmds-smart-tool-bar-pixel-height fr))
                  (if (not (eq window-system 'x)) ; Menu bar for X is not in the frame.
                      0
                    (* (frame-char-height fr) (cdr (assq 'menu-bar-lines (frame-parameters fr))))))
               'PIXELWISE))
          (set-frame-size
           fr
           ;; Subtract scroll bars, & title bar, then convert pixel sizes to char sizes.
           (/ (- fr-pixel-width
                 (frcmds-extra-pixels-width fr))
              (frame-char-width fr))
           (/ (- fr-pixel-height
                 (frcmds-extra-pixels-height fr)
                 window-mgr-title-bar-pixel-height
                 (if pix-height 0 (frcmds-smart-tool-bar-pixel-height fr))
                 (if (not (eq window-system 'x)) ; Menu bar for X is not in the frame.
                     0
                   (* (frame-char-height fr) (cdr (assq 'menu-bar-lines (frame-parameters fr))))))
              (frame-char-height fr))))
        (set-frame-position fr
                            (if (eq direction 'horizontal) fr-origin (or x-min-pix  0))
                            (if (eq direction 'horizontal) (or y-min-pix  0) fr-origin))
        (show-frame fr)
        ;; Move over the width or height of one frame, and add one border width.
        (incf fr-origin (+ (or (cdr (assq 'border-width (frame-parameters fr)))  0)
                           (if (eq direction 'horizontal) fr-pixel-width fr-pixel-height))))))

  (defun frcmds-extra-pixels-width (frame)
    "Pixel difference between FRAME total width and its text area width."
    (- (frame-pixel-width frame) (* (frame-char-width frame) (frame-width frame))))

  (defun frcmds-extra-pixels-height (frame)
    "Pixel difference between FRAME total height and its text area height."
    (- (frame-pixel-height frame) (* (frame-char-height frame) (frame-height frame))))

  (defun frcmds-smart-tool-bar-pixel-height (&optional frame)
    "Pixel height of Mac smart tool bar."
    (if (and (boundp 'mac-tool-bar-display-mode)  (> (frame-parameter frame 'tool-bar-lines) 0))
        (if (eq mac-tool-bar-display-mode 'icons) 40 56)
      0))

  (defun frcmds-read-args-for-tiling ()
    "Read arguments for `frcmds-tile-frames'."
    (list
     (list
      ;; Note: `read-frame' puts selected-frame name at front of `frame-name-history'.
      (get-a-frame (read-frame "Tile two frames - First frame: " nil t))
      ;; Get next visible frame.  For default (prompt) value:
      ;;   If there is another visible frame in `frame-name-history', use next such.
      ;;   Else if there is another visible frame in internal frame list, use next such.
      ;;   Else use selected frame. (`frame-name-history' is defined in `frame.el'.)
      (get-a-frame
       (read-frame
        "Second frame: "
        (let ((fr-names   (cdr frame-name-history))
              (visible-p  nil)
              (fr         nil))
          (while (and (not fr)  fr-names) ; While no visible frame found and still fr-names to check.
            (setq fr        (car fr-names) ; Name
                  fr        (get-a-frame fr) ; Frame
                  fr        (and fr  (eq t (frame-visible-p fr)) fr) ; Visible frame
                  fr-names  (cdr fr-names)))

          ;; If no visible frames in history, besides selected-frame,
          ;; then get next visible frame (not its name) from internal frame list.
          (unless fr
            (setq fr  (selected-frame))
            (while (and (not visible-p)
                        (setq fr  (next-frame fr))
                        (not (equal fr (selected-frame)))) ; equal => no other found.
              (setq visible-p  (eq t (frame-visible-p fr)))))
          fr)
        t)))))

  (defun frcmds-available-screen-pixel-bounds ()
    "Returns a value of the same form as option `available-screen-pixel-bounds'.
  This represents the currently available screen area."
    (or available-screen-pixel-bounds     ; Use the option value, if available.
        (if (fboundp 'mac-display-available-pixel-bounds) ; Mac-OS-specific.
            (mac-display-available-pixel-bounds)
          (list 0 0 (x-display-pixel-width) (x-display-pixel-height)))))

  ; Emacs 20 doesn't have `butlast'.  Define it to avoid requiring `cl.el' at runtime.  From `subr.el'.
  (unless (fboundp 'butlast)
    (defun nbutlast (list &optional n)
      "Modifies LIST to remove the last N elements."
      (let ((m  (length list)))
        (or n  (setq n  1))
        (and (< n m)  (progn (when (> n 0) (setcdr (nthcdr (- (1- m) n) list) ()))
                             list))))

    (defun butlast (list &optional n)
      "Return a copy of LIST with the last N elements removed."
      (if (and n  (<= n 0)) list (nbutlast (copy-sequence list) n))))

  (defun frcmds-effective-screen-pixel-bounds ()
    "Upper left and lower right of available screen space for tiling frames.
  This is `frcmds-available-screen-pixel-bounds', possibly adjusted to
  allow for the standalone minibuffer frame provided by `oneonone.el'."
    (if (boundp '1on1-minibuffer-frame)
        (append (butlast (frcmds-available-screen-pixel-bounds))
                (list (frame-geom-value-numeric 'top (cdr (assq 'top (frame-parameters
                                                                      1on1-minibuffer-frame))))))
      (frcmds-available-screen-pixel-bounds)))

  (defun frcmds-available-screen-pixel-width (&optional include-mini-p)
    "Width of the usable screen, in pixels.
  Non-nil optional argument `include-mini-p' means include the space
  occupied by a standalone minibuffer, if any."
    (let ((bounds  (if include-mini-p
                       (frcmds-available-screen-pixel-bounds)
                     (frcmds-effective-screen-pixel-bounds))))
      (- (caddr bounds) (car bounds)))) ; X1 - X0

  (defun frcmds-available-screen-pixel-height (&optional include-mini-p)
    "Height of the usable screen, in pixels.
  Non-nil optional argument `include-mini-p' means include the
  space occupied by a standalone minibuffer, if any."
    (let ((bounds  (if include-mini-p
                       (frcmds-available-screen-pixel-bounds)
                     (frcmds-effective-screen-pixel-bounds))))
      (- (cadddr bounds) (cadr bounds)))) ; Y1 - Y0

  ;; Inspired by `sk-grow-frame' from Sarir Khamsi [sarir.khamsi@raytheon.com]
  ;;;###autoload
  (defun enlarge-frame (&optional increment frame) ; Suggested binding: `C-M-down'.
    "Increase the height of FRAME (default: selected-frame) by INCREMENT.
  INCREMENT is in lines (characters).
  Interactively, it is given by the prefix argument."
    (interactive "p")
    (set-frame-height frame (+ (frame-height frame) increment)))

  ;;;###autoload
  (defun enlarge-frame-horizontally (&optional increment frame) ; Suggested binding: `C-M-right'.
    "Increase the width of FRAME (default: selected-frame) by INCREMENT.
  INCREMENT is in columns (characters).
  Interactively, it is given by the prefix argument."
    (interactive "p")
    (set-frame-width frame (+ (frame-width frame) increment)))

  ;;;###autoload
  (defun shrink-frame (&optional increment frame) ; Suggested binding: `C-M-up'.
    "Decrease the height of FRAME (default: selected-frame) by INCREMENT.
  INCREMENT is in lines (characters).
  Interactively, it is given by the prefix argument."
    (interactive "p")
    (set-frame-height frame (- (frame-height frame) increment)))

  ;;;###autoload
  (defun shrink-frame-horizontally (&optional increment frame) ; Suggested binding: `C-M-left'.
    "Decrease the width of FRAME (default: selected-frame) by INCREMENT.
  INCREMENT is in columns (characters).
  Interactively, it is given by the prefix argument."
    (interactive "p")
    (set-frame-width frame (- (frame-width frame) increment)))

  ;;;###autoload
  (defun move-frame-down (&optional n frame) ; Suggested binding: `M-down'.
    "Move selected frame down.
  Move it N times `frame-char-height', where N is the prefix arg.
  In Lisp code, FRAME is the frame to move."
    (interactive "p")
    (unless n (setq n  1))
    (setq n  (* n (frame-char-height frame)))
    (modify-frame-parameters frame (list (list 'top '+ (frcmds-new-frame-position frame 'top n)))))

  ;;;###autoload
  (defun move-frame-up (&optional n frame) ; Suggested binding: `M-up'.
    "Move selected frame up.
  Same as `move-frame-down', except movement is up."
    (interactive "p")
    (unless n (setq n  1))
    (move-frame-down (- n)))

  ;;;###autoload
  (defun move-frame-right (&optional n frame) ; Suggested binding: `M-right'.
    "Move frame to the right.
  Move it N times `frame-char-width', where N is the prefix arg.
  In Lisp code, FRAME is the frame to move."
    (interactive "p")
    (unless n (setq n  1))
    (setq n  (* n (frame-char-width frame)))
    (modify-frame-parameters frame (list (list 'left '+ (frcmds-new-frame-position frame 'left n)))))

  ;;;###autoload
  (defun move-frame-left (&optional n frame) ; Suggested binding: `M-left'.
    "Move frame to the left.
  Same as `move-frame-right', except movement is to the left."
    (interactive "p")
    (unless n (setq n  1))
    (move-frame-right (- n)))

  ;; Helper function.
  (defun frcmds-new-frame-position (frame type incr)
    "Return the new TYPE position of FRAME, incremented by INCR.
  TYPE is `left' or `top'.
  INCR is the increment to use when changing the position."
    (let ((new-pos            (+ incr (cadr (frame-geom-value-cons
                                             type (cdr (assq type (frame-parameters frame)))))))
          (display-dimension  (if (eq 'left type)
                                  (frcmds-available-screen-pixel-width t)
                                (frcmds-available-screen-pixel-height t)))
          (frame-dimension    (if (eq 'left type) (frame-pixel-width frame) (frame-pixel-height frame))))
      (if (not move-frame-wrap-within-display-flag)
          new-pos
        (when (< new-pos (- frame-dimension)) (setq new-pos  display-dimension))
        (when (> new-pos display-dimension)   (setq new-pos  (- frame-dimension)))
        new-pos)))

  ;;;###autoload
  (defun move-frame-to-screen-top (arg &optional frame) ; Suggested binding: `M-S-v'.
    "Move FRAME (default: selected-frame) to the top of the screen.
  With a prefix arg, offset it that many char heights from the top."
    (interactive (list (if current-prefix-arg
                           (* (frame-char-height) (prefix-numeric-value current-prefix-arg))
                         0)
                       (get-a-frame (read-frame "Frame: " nil 'EXISTING))))
    (modify-frame-parameters frame `((top . ,arg))))

  ;;;###autoload
  (defun move-frame-to-screen-bottom (arg &optional frame) ; Suggested binding: `C-S-v'.
    "Move FRAME (default: selected-frame) to the bottom of the screen.
  With a prefix arg, offset it that many char heights from the bottom."
    (interactive (list (if current-prefix-arg
                           (* (frame-char-height) (prefix-numeric-value current-prefix-arg))
                         0)
                       (get-a-frame (read-frame "Frame: " nil 'EXISTING))))
    (let* ((borders       (* 2 (cdr (assq 'border-width (frame-parameters frame)))))
           (avail-height  (- (/ (- (frcmds-available-screen-pixel-height) borders
                                   (frcmds-extra-pixels-height frame)
                                   window-mgr-title-bar-pixel-height
                                   (frcmds-smart-tool-bar-pixel-height))
                                (frame-char-height frame))
                             ;; Subtract menu bar unless on Carbon Emacs (menu bar not in the frame).
                             (if (eq window-system 'mac)
                                 0
                               (cdr (assq 'menu-bar-lines (frame-parameters frame)))))))
      (modify-frame-parameters frame `((top . ,(- (+ avail-height arg)))))))

  ;;;###autoload
  (defun move-frame-to-screen-left (arg &optional frame) ; Suggested binding: `C-S-prior'.
    "Move FRAME (default: selected-frame) to the left side of the screen.
  With a prefix arg, offset it that many char widths from the left."
    (interactive (list (if current-prefix-arg
                           (* (frame-char-width) (prefix-numeric-value current-prefix-arg))
                         0)
                       (get-a-frame (read-frame "Frame: " nil 'EXISTING))))
    (modify-frame-parameters frame `((left . ,arg))))

  ;;;###autoload
  (defun move-frame-to-screen-right (arg &optional frame) ; Suggested binding: `C-S-next'.
    "Move FRAME (default: selected-frame) to the right side of the screen.
  With a prefix arg, offset it that many char widths from the right."
    (interactive (list (if current-prefix-arg
                           (* (frame-char-width) (prefix-numeric-value current-prefix-arg))
                         0)
                       (get-a-frame (read-frame "Frame: " nil 'EXISTING))))
    (modify-frame-parameters
     frame                                ; Hard-code 7 here - what does it depend on?
     `((left . ,(- (x-display-pixel-width) (+ (frame-pixel-width) 7 arg))))))

  ;;;###autoload
  (defun move-frame-to-screen-top-left (arg &optional frame) ; Suggested binding: `C-S-home'.
    "Move FRAME (default: selected-frame) to the top and left of the screen.
  With a prefix arg, offset it that many char widths from the edges.

  Note: You can use this command to move an off-screen (thus not
  visible) frame back onto the screen."
    (interactive (list (if current-prefix-arg
                           (* (frame-char-width) (prefix-numeric-value current-prefix-arg))
                         0)
                       (get-a-frame (read-frame "Frame: " nil 'EXISTING))))
    (modify-frame-parameters frame '((top . ,arg) (left . ,arg))))


  ;; This does not work 100% well.  For instance, set frame font to
  ;; "-raster-Terminal-normal-r-normal-normal-12-90-96-96-c-50-ms-oemlatin", then decrease font size.
  ;; The next smaller existing font on my machine is
  ;; "-raster-Terminal-normal-r-normal-normal-11-*-96-96-c-*-ms-oemlatin".  Decrease size again.
  ;; Next smaller font is "-raster-Terminal-bold-r-normal-normal-5-37-96-96-c-60-ms-oemlatin".  Notice
  ;; the switch to bold from regular.  Cannot decrease any more.  Increase size.  Next larger font is
  ;; "-raster-Terminal-bold-r-normal-normal-8-*-96-96-c-*-ms-oemlatin".  Can no longer increase size.
  ;;
  ;;;###autoload
  (defun enlarge-font (&optional increment frame)
    "Increase size of font in FRAME by INCREMENT.
  Interactively, INCREMENT is given by the prefix argument.
  Optional FRAME parameter defaults to current frame."
    (interactive "p")
    (setq frame  (or frame  (selected-frame)))
    (let ((fontname  (cdr (assq 'font (frame-parameters frame))))
          (count     enlarge-font-tries))
      (setq fontname  (frcmds-enlarged-font-name fontname frame increment))
      (while (and (not (x-list-fonts fontname))  (wholenump (setq count  (1- count))))
        (setq fontname  (frcmds-enlarged-font-name fontname frame increment)))
      (unless (x-list-fonts fontname) (error "Cannot change font size"))
      (modify-frame-parameters frame (list (cons 'font fontname)))
      ;; Update faces that want a bold or italic version of the default font.
      (when (< emacs-major-version 21) (frame-update-faces frame))))

  ;;; This was a workaround hack for an Emacs 23 bug (#119, aka #1562).
  ;;; This works OK, but it is not as refined as the version I use, and it does not work for
  ;;; older Emacs versions.
  ;;;
  ;;; (when (> emacs-major-version 22)
  ;;;   (defun enlarge-font (&optional increment frame)
  ;;;     "Increase size of font in FRAME by INCREMENT.
  ;;; Interactively, INCREMENT is given by the prefix argument.
  ;;; Optional FRAME parameter defaults to current frame."
  ;;;     (interactive "p")
  ;;;     (setq frame  (or frame  (selected-frame)))
  ;;;     (set-face-attribute
  ;;;      'default frame :height (+ (* 10 increment)
  ;;;                                (face-attribute 'default :height frame 'default)))))





  ;;; Define error symbols `font-too-small' and `font-size', and their error conditions and messages.
  ;;;
  ;;; You can use these to handle an error of trying to make the font too small.
  ;;; See library `thumb-frm.el', command `thumfr-thumbify-frame'.
  ;;;
  (put 'font-too-small 'error-conditions '(error font-size font-too-small))
  (put 'font-too-small 'error-message    "Font size is too small")

  (put 'font-size      'error-conditions '(error font-size))
  (put 'font-size      'error-message    "Bad font size")

  (defun frcmds-enlarged-font-name (fontname frame increment)
    "FONTNAME, after enlarging font size of FRAME by INCREMENT.
  FONTNAME is the font of FRAME."
    (when (query-fontset fontname)
      (let ((ascii  (assq 'ascii (aref (fontset-info fontname frame) 2))))
        (when ascii (setq fontname  (nth 2 ascii)))))
    (let ((xlfd-fields  (x-decompose-font-name fontname)))
      (unless xlfd-fields (error "Cannot decompose font name"))
      (let ((new-size  (+ (string-to-number (aref xlfd-fields xlfd-regexp-pixelsize-subnum))
                          increment)))
        (unless (> new-size 0) (signal 'font-too-small (list new-size)))
        (aset xlfd-fields xlfd-regexp-pixelsize-subnum (number-to-string new-size)))
      ;; Set point size & width to "*", so frame width will adjust to new font size
      (aset xlfd-fields xlfd-regexp-pointsize-subnum "*")
      (aset xlfd-fields xlfd-regexp-avgwidth-subnum "*")
      (x-compose-font-name xlfd-fields)))

  ;;;###autoload
  (defun set-frame-alist-parameter-from-frame (alist parameter &optional frame)
    "Set PARAMETER of frame alist ALIST to its current value in FRAME.
  FRAME defaults to the selected frame.  ALIST is a variable (symbol)
  whose value is an alist of frame parameters."
    (interactive
     (let ((symb                          (or (and (fboundp 'symbol-nearest-point)
                                                   (symbol-nearest-point))
                                              (symbolp (variable-at-point))))
           (enable-recursive-minibuffers  t))
       (list (intern (completing-read
                      "Frame alist to change (variable): "
                      (frcmds-frame-alist-var-names) nil t nil nil 'default-frame-alist t))
             (intern (completing-read "Parameter to set:" ; Lax completion - not just known parameters.
                                      (frcmds-frame-parameter-names) nil nil nil nil 'left t))
             (get-a-frame (read-frame "Frame to copy parameter value from: " nil t)))))
    (unless (boundp alist)
      (error "Not a defined Emacs variable: `%s'" alist))
    (set alist (assq-delete-all parameter (copy-alist (eval alist))))
    (set alist (cons (assq parameter (frame-parameters frame)) (eval alist)))
    (tell-customize-var-has-changed alist))

  ;;; Standard Emacs 21+ function, defined here for Emacs 20.
  (unless (fboundp 'assq-delete-all)
    (defun assq-delete-all (key alist)
      "Delete from ALIST all elements whose car is `eq' to KEY.
  Return the modified alist.
  Elements of ALIST that are not conses are ignored."
      (while (and (consp (car alist))  (eq (car (car alist)) key)) (setq alist  (cdr alist)))
      (let ((tail  alist)
            tail-cdr)
        (while (setq tail-cdr  (cdr tail))
          (if (and (consp (car tail-cdr))  (eq (car (car tail-cdr)) key))
              (setcdr tail (cdr tail-cdr))
            (setq tail  tail-cdr))))
      alist))

  ;; Define this to avoid requiring `cl.el' at runtime.  Same as `icicle-set-difference'.
  (defun frcmds-set-difference (list1 list2 &optional key)
    "Combine LIST1 and LIST2 using a set-difference operation.
  Optional arg KEY is a function used to extract the part of each list
  item to compare.

  The result list contains all items that appear in LIST1 but not LIST2.
  This is non-destructive; it makes a copy of the data if necessary, to
  avoid corrupting the original LIST1 and LIST2."
    (if (or (null list1)  (null list2))
        list1
      (let ((keyed-list2  (and key  (mapcar key list2)))
            (result       ()))
        (while list1
          (unless (if key
                      (member (funcall key (car list1)) keyed-list2)
                    (member (car list1) list2))
            (setq result  (cons (car list1) result)))
          (setq list1  (cdr list1)))
        result)))

  ;;;###autoload
  (defun set-all-frame-alist-parameters-from-frame (alist &optional frame really-all-p)
    "Set frame parameters of ALIST to their current values in FRAME.
  Unless optional argument REALLY-ALL-P (prefix arg) is non-nil, the
  frame parameters in list `frame-parameters-to-exclude' are
  excluded: they are not copied from FRAME to ALIST.
  ALIST is a variable (symbol) whose value is an alist of frame parameters.
  FRAME defaults to the selected frame."
    (interactive
     (let ((symb                          (or (and (fboundp 'symbol-nearest-point)
                                                   (symbol-nearest-point))
                                              (symbolp (variable-at-point))))
           (enable-recursive-minibuffers  t))
       (list (intern (completing-read
                      "Frame alist to change (variable): "
                      (frcmds-frame-alist-var-names) nil t nil nil 'default-frame-alist t))
             (get-a-frame (read-frame "Frame to copy parameter values from: " nil t))
             current-prefix-arg)))
    (unless (boundp alist)
      (error "Not a defined Emacs variable: `%s'" alist))
    (set alist (frcmds-set-difference (frame-parameters frame)
                                      (and (not really-all-p)  frame-parameters-to-exclude)
                                      #'car))
    (tell-customize-var-has-changed alist))

  (defun frcmds-frame-alist-var-names ()
    "Return an alist of all variable names that end in \"frame-alist\".
  The CAR of each list item is a string variable name.
  The CDR is nil."
    (let ((vars  ()))
      (mapatoms (lambda (sym) (and (boundp sym)
                                   (setq sym  (symbol-name sym))
                                   (string-match "frame-alist$" sym)
                                   (push (list sym) vars))))
      vars))

  (defun frcmds-frame-parameter-names ()
    "Return an alist of all available frame-parameter names.
  These are the documented, out-of-the-box (predefined) parameters.
  The CAR of each list item is a string parameter name.
  The CDR is nil."
    (let ((params  '(("auto-lower")
                     ("auto-raise")
                     ("background-color")
                     ("background-mode")
                     ("border-color")
                     ("border-width")
                     ("buffer-list")
                     ("buffer-predicate")
                     ("cursor-color")
                     ("cursor-type")
                     ("display")
                     ("display-type")
                     ("font")
                     ("foreground-color")
                     ("height")
                     ("horizontal-scroll-bars")
                     ("icon-left")
                     ("icon-name")
                     ("icon-top")
                     ("icon-type")
                     ("internal-border-width")
                     ("left")
                     ("menu-bar-lines")
                     ("minibuffer")
                     ("mouse-color")
                     ("name")
                     ("scroll-bar-width")
                     ("title")
                     ("top")
                     ("unsplittable")
                     ("user-position")
                     ("vertical-scroll-bars")
                     ("visibility")
                     ("width")
                     ("window-id"))))
      (when (> emacs-major-version 20)
        (setq params  (nconc params '(("fullscreen")
                                      ("left-fringe")
                                      ("line-spacing")
                                      ("outer-window-id")
                                      ("right-fringe")
                                      ("screen-gamma")
                                      ("scroll-bar-background")
                                      ("scroll-bar-foreground")
                                      ("tool-bar-lines")
                                      ("tty-color-mode")
                                      ("wait-for-wm")))))
      (when (> emacs-major-version 21)
        (setq params  (nconc params '(("user-size")))))
      (when (> emacs-major-version 22)
        (setq params  (nconc params '(("alpha")
                                      ("display-environment-variable")
                                      ("font-backend")
                                      ("sticky")
                                      ("term-environment-variable")))))
      (when (> emacs-major-version 23)
        (setq params  (nconc params '(("explicit-name")
                                      ("tool-bar-position")))))
      params))

  ;;;###autoload
  (defun tell-customize-var-has-changed (variable)
    "Tell Customize to recognize that VARIABLE has been set (changed).
  VARIABLE is a symbol that names a user option."
    (interactive "vVariable: ")
    (put variable 'customized-value (list (custom-quote (eval variable)))))

  ;;;###autoload
  (defun other-window-or-frame (arg)
    "`other-frame', if `one-window-p'; otherwise, `other-window'."
    (interactive "p")
    (if (one-window-p) (other-frame arg) (other-window arg)))

  ;;;;;;;;;;;;;;;;;;;;;;;

  (provide 'frame-cmds)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; frame-cmds.el ends here
#+END_SRC
**** zoom-frm
:PROPERTIES:
:CREATED:  [2018-04-19 Thu 10:52]
:END:
#+BEGIN_SRC emacs-lisp
    ;;; zoom-frm.el --- Commands to zoom frame font size.
    ;;
    ;; Filename: zoom-frm.el
    ;; Description: Commands to zoom frame font size.
    ;; Author: Drew Adams
    ;; Maintainer: Drew Adams (concat "drew.adams" "@" "oracle" ".com")
    ;; Copyright (C) 2005-2018, Drew Adams, all rights reserved.
    ;; Created: Fri Jan 07 10:24:35 2005
    ;; Version: 0
    ;; Package-Requires: ((frame-fns "0") (frame-cmds "0"))
    ;; Last-Updated: Mon Jan  1 16:31:06 2018 (-0800)
    ;;           By: dradams
    ;;     Update #: 344
    ;; URL: https://www.emacswiki.org/emacs/download/zoom-frm.el
    ;; Doc URL: https://emacswiki.org/emacs/SetFonts
    ;; Keywords: frames, extensions, convenience
    ;; Compatibility: GNU Emacs: 20.x, 21.x, 22.x, 23.x, 24.x, 25.x, 26.x
    ;;
    ;; Features that might be required by this library:
    ;;
    ;;   `avoid', `frame-cmds', `frame-fns', `misc-fns', `strings',
    ;;   `thingatpt', `thingatpt+'.
    ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;
    ;;; Commentary:
    ;;
    ;;  Commands to zoom into and out of text.  They zoom a frame or a
    ;;  buffer, so that the text appears larger or smaller.
    ;;
    ;;  Commands `zoom-in', `zoom-out', and `zoom-in/out' do both kinds of
    ;;  zooming.  They can behave like command `text-scale-adjust',
    ;;  zooming a buffer wherever it is displayed, or they can zoom an
    ;;  entire single frame (all of its windows).  Hit `C-u' at any time
    ;;  while using these commands to toggle between buffer and frame
    ;;  zooming.
    ;;
    ;;  Because it is a more general replacement for `text-scale-adjust',
    ;;  I suggest you bind `zoom-in/out' to the keys bound by default to
    ;;  `text-scale-adjust': `C-x C-+', `C-x C-=', `C-x C--', and `C-x
    ;;  C-0'.
    ;;
    ;;  It is also handy to use a mouse button or wheel for zooming, hence
    ;;  the mouse binding suggestions.  For example, binding `zoom-in' and
    ;;  `zoom-out' to mouse wheel events gives you the zooming effect you
    ;;  are perhaps used to in a Web browser.
    ;;
    ;;  User option `zoom-frame/buffer' determines which kind of zooming
    ;;  (frame or buffer) is used by default.  You can customize this
    ;;  option, but (in Emacs 23 or later) you can also toggle it just by
    ;;  providing a prefix arg (`C-u') to `zoom-in/out', `zoom-in', or
    ;;  `zoom-out'.
    ;;
    ;;  Note about saving changes made dynamically using the commands
    ;;  defined here:
    ;;
    ;;    Some of the commands defined here change frame properties.  You
    ;;    can save any changes you have made, by using Customize.  To
    ;;    visit a Customize buffer of all unsaved changes you have made,
    ;;    use command `customize-customized'.
    ;;
    ;;    Frame parameter changes, such as font size, can be saved for
    ;;    future use by all frames or all frames of a certain kind.  For
    ;;    that, you must change the frame parameters of the correponding
    ;;    frame-alist variable.
    ;;
    ;;    There is no single variable for saving changes to parameters of
    ;;    the current frame.  Instead, there are several different
    ;;    frame-alist variables, which you can use to define different
    ;;    kinds of frames.  These include: `default-frame-alist',
    ;;    `initial-frame-alist', and `special-display-frame-alist'.  The
    ;;    complete list of such frame alist variables is available using
    ;;    function `frame-alist-var-names', defined in library
    ;;    `frame-cmds.el'.
    ;;
    ;;    Example: Suppose you change the font size of a frame and want to
    ;;    make that the default font size for new frames in the future.
    ;;    You will need to update the value of variable
    ;;    `default-frame-alist' to use the `font' parameter setting of the
    ;;    changed frame.
    ;;
    ;;    You can easily copy one or all parameter values from any given
    ;;    frame to any frame alist (such as `default-frame-alist'), by
    ;;    using the commands `set-frame-alist-parameter-from-frame' and
    ;;    `set-all-frame-alist-parameters-from-frame'.  Those commands are
    ;;    defined in library `frame-cmds.el'.
    ;;
    ;;
    ;;  Commands defined here:
    ;;
    ;;    `toggle-zoom-frame', `zoom-all-frames-in',
    ;;    `zoom-all-frames-out', `zoom-frm-in', `zoom-frm-out',
    ;;    `zoom-frm-unzoom', `zoom-in', `zoom-in/out' (Emacs 23+),
    ;;    `zoom-out'.
    ;;
    ;;
    ;;  User options (variables) defined here:
    ;;
    ;;    `frame-zoom-font-difference', `zoom-frame/buffer' (Emacs 23+).
    ;;
    ;;
    ;;  Put this in your init file (`~/.emacs'): (require 'zoom-frm)
    ;;
    ;;  Suggested key bindings:
    ;;
    ;;    Emacs 23 and later:
    ;;
    ;;    (define-key ctl-x-map [(control ?+)] 'zoom-in/out)
    ;;    (define-key ctl-x-map [(control ?-)] 'zoom-in/out)
    ;;    (define-key ctl-x-map [(control ?=)] 'zoom-in/out)
    ;;    (define-key ctl-x-map [(control ?0)] 'zoom-in/out)
    ;;
    ;;    Any Emacs version:
    ;;
    ;;    (global-set-key (if (boundp 'mouse-wheel-down-event) ; Emacs 22+
    ;;                        (vector (list 'control
    ;;                                      mouse-wheel-down-event))
    ;;                      [C-mouse-wheel])    ; Emacs 20, 21
    ;;                    'zoom-in)
    ;;    (when (boundp 'mouse-wheel-up-event) ; Emacs 22+
    ;;      (global-set-key (vector (list 'control mouse-wheel-up-event))
    ;;                      'zoom-out))
    ;;
    ;;    (global-set-key [S-mouse-1]    'zoom-in)
    ;;    (global-set-key [C-S-mouse-1]  'zoom-out)
    ;;    ;; Get rid of `mouse-set-font' or `mouse-appearance-menu':
    ;;    (global-set-key [S-down-mouse-1] nil)
    ;;
    ;;  Some of the commands are not autoloaded by default, because this
    ;;  library works with old as well as recent Emacs releases.  The
    ;;  commands that are not autoloaded are not usable in older releases.
    ;;  You can autoload such commands yourself.  For example, if you use
    ;;  Emacs 23 or later, you can add this to your init file, to autoload
    ;;  `zoom-in/out':
    ;;
    ;;  (autoload 'zoom-in/out "zoom-frm"
    ;;            "Zoom current frame or buffer in or out" t)
    ;;
    ;;  The first two of the mouse bindings mean that in Emacs 22 or later
    ;;  you can hold the Control key and rotate the mouse wheel to zoom in
    ;;  and out, just as you might do in a Web browser.
    ;;
    ;;  (In Emacs 20 and 21, Control plus mouse wheeling zooms in, but to
    ;;  zoom out you need to use `C--' before wheeling with Control.  This
    ;;  is because Emacs 20 and 21 do not have separate events for the
    ;;  mouse wheel directions, and it is the prefix arg, not the wheel
    ;;  direction, that determines the effect.)
    ;;
    ;;
    ;;  See also these files for other frame commands:
    ;;
    ;;     `autofit-frame.el' - Automatically fit each frame to its
    ;;                          selected window.  Uses `fit-frame.el'.
    ;;
    ;;     `fit-frame.el'     - 1) Fit a frame to its selected window.
    ;;                          2) Incrementally resize a frame.
    ;;
    ;;     `doremi-frm.el'    - Incrementally adjust frame properties
    ;;                          using arrow keys and/or mouse wheel.
    ;;
    ;;     `frame-cmds.el'    - Miscellaneous frame and window commands.
    ;;
    ;;     `thumb-frm.el'     - Shrink frames to a thumbnail size and
    ;;                          restore them again.
    ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;
    ;;; Change Log:
    ;;
    ;; 2015/11/01 dadams
    ;;     Require cl.el at compile time, for macro case.
    ;; 2015/01/10 dadams
    ;;     zoom-in, zoom-out: Added message about new zoom type.
    ;;     zoom-in/out: Corrected msg: C- modifier was missing.  Reminder at end of doc string.
    ;; 2013/12/31 dadams
    ;;     zoom-in/out: Use set-transient-map, if defined.
    ;; 2013/09//29 dadams
    ;;     zoom-in/out: Only for Emacs 24.3+ (needs set-temporary-overlay-map).
    ;; 2013/09/13 dadams
    ;;     Added: zoom-all-frames-in, zoom-all-frames-out.
    ;; 2013/04/21 dadams
    ;;     Added: zoom-in/out.
    ;; 2011/01/04 dadams
    ;;     Added autoload cookies for defgroup and defcustom.
    ;; 2010/07/06 dadams
    ;;     zoom-(in|out): Put doc strings before interactive spec.  Thx to Yidong Chong.
    ;; 2009/06/11 dadams
    ;;     Added buffer zooming, for Emacs 23.
    ;;       Added zoom-(in|out), group zoom, zoom-frame/buffer.
    ;; 2006/01/07 dadams
    ;;     Added :link for sending bug report.
    ;; 2006/01/06 dadams
    ;;     frame-zoom-font-difference: Changed :group to Frame-Commands. Added :link.
    ;; 2005/01/18 dadams
    ;;     Changed default value of frame-zoom-font-difference.
    ;;     Added Note on saving changes.
    ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;
    ;; This program is free software; you can redistribute it and/or modify
    ;; it under the terms of the GNU General Public License as published by
    ;; the Free Software Foundation; either version 2, or (at your option)
    ;; any later version.

    ;; This program is distributed in the hope that it will be useful,
    ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
    ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    ;; GNU General Public License for more details.

    ;; You should have received a copy of the GNU General Public License
    ;; along with this program; see the file COPYING.  If not, write to
    ;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
    ;; Floor, Boston, MA 02110-1301, USA.
    ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;
    ;;; Code:

    (eval-when-compile (require 'cl)) ;; case

    (require 'frame-cmds) ;; enlarge-font


    (defvar zoom-frame/buffer) ;; Defined here for Emacs 22+.

    ;;;;;;;;;;;;;;;;;;;;;;;;


    ;;; USER OPTIONS (VARIABLES) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;;;###autoload
    (defgroup zoom nil
      "Zoom a frame or buffer."
      :group 'frames :group 'Frame-Commands ; Defined in `frame-cmds.el'.
      :link `(url-link :tag "Send Bug Report"
                      ,(concat "mailto:" "drew.adams" "@" "oracle" ".com?subject=\
    zoom-frm.el bug: \
    &body=Describe bug here, starting with `emacs -q'.  \
    Don't forget to mention your Emacs and library versions."))
      :link '(url-link :tag "Other Libraries by Drew"
                      "https://www.emacswiki.org/emacs/DrewsElispLibraries")
      :link '(url-link :tag "Download"
                      "https://www.emacswiki.org/emacs/download/zoom-frm.el")
      :link '(url-link :tag "Description"
                      "https://www.emacswiki.org/emacs/SetFonts#ChangingFontSize")
      :link '(emacs-commentary-link :tag "Commentary" "zoom-frm"))

    ;;;###autoload
    (defcustom frame-zoom-font-difference 1
      "*Number of points to change the frame font size when zooming.
    This applies to commands `zoom-in/out', `zoom-in', `zoom-out',
    `zoom-frm-in', and `zoom-frm-out' when zooming a frame.

    The absolute value of the value must be less than the current font
    size for the frame, because the new font size cannot be less than one
    point."
      :type 'integer :group 'zoom)

    (when (> emacs-major-version 22)
      (defcustom zoom-frame/buffer 'frame
        "*What to zoom: current frame or current buffer.
    See command `zoom-in/out', `zoom-in', or `zoom-out'."
        :type '(choice (const :tag "Zoom frame"  frame) (const :tag "Zoom buffer" buffer))
        :group 'zoom))


    ;;; FUNCTIONS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    (unless (> emacs-major-version 22) (defalias 'zoom-in 'zoom-frm-in))
    ;;;###autoload
    (defun zoom-frm-in (&optional frame flip)
      "Zoom FRAME in by `frame-zoom-font-difference', making text larger.
    If `frame-zoom-font-difference' is negative, make text smaller.
    With prefix argument FLIP, reverse the direction:
    if `frame-zoom-font-difference' is positive, then make text smaller.
    This is equal but opposite to `zoom-frm-out'."
      (interactive (list (selected-frame) current-prefix-arg))
      (setq frame  (or frame  (selected-frame)))
      (let ((zoom-factor  (frame-parameter frame 'zoomed))
            (increment    (if flip (- frame-zoom-font-difference) frame-zoom-font-difference)))
        (unless zoom-factor (setq zoom-factor  0))
        (setq zoom-factor  (+ zoom-factor increment))
        (enlarge-font increment frame)
        (modify-frame-parameters frame (list (cons 'zoomed zoom-factor)))))

    (unless (> emacs-major-version 22) (defalias 'zoom-out 'zoom-frm-out))
    ;;;###autoload
    (defun zoom-frm-out (&optional frame flip)
      "Zoom FRAME out by `frame-zoom-font-difference', making text smaller.
    If `frame-zoom-font-difference' is negative, make text larger.
    With prefix argument FLIP, reverse the direction:
    if `frame-zoom-font-difference' is positive, then make text larger.
    This is equal but opposite to `zoom-frm-in'."
      (interactive (list (selected-frame) current-prefix-arg))
      (setq frame  (or frame  (selected-frame)))
      (let ((frame-zoom-font-difference  (- frame-zoom-font-difference)))
        (zoom-frm-in frame flip)))

    ;;;###autoload
    (defun zoom-frm-unzoom (&optional frame)
      "Cancel zoom of FRAME."
      (interactive)
      (setq frame  (or frame  (selected-frame)))
      (let ((zoom-factor  (frame-parameter frame 'zoomed)))
        (if (not zoom-factor)
            (error "Frame is not zoomed")
          (enlarge-font (- zoom-factor) frame)
          (modify-frame-parameters frame '((zoomed))))))

    ;;;###autoload
    (defun toggle-zoom-frame (&optional frame)
      "Alternately zoom/unzoom FRAME by `frame-zoom-font-difference'."
      (interactive)
      (setq frame  (or frame  (selected-frame)))
      (if (frame-parameter frame 'zoomed) (zoom-frm-unzoom frame) (zoom-frm-in frame)))

    (when (> emacs-major-version 22)
      (defun zoom-in (arg)
        "Zoom current frame or buffer in.
    With a prefix arg, toggle between zooming frame and zooming buffer.
    Frame zooming uses command `zoom-frm-in'.
    Buffer zooming uses command `text-scale-increase'."
        (interactive "P")
        (when arg
          (setq zoom-frame/buffer  (if (eq zoom-frame/buffer 'frame) 'buffer 'frame))
          (message "%s zooming from now on" (upcase (symbol-name zoom-frame/buffer)))
          (sit-for 1))
        (if (eq zoom-frame/buffer 'frame)
            (zoom-frm-in)
          (with-current-buffer
              (if (string-match "mouse" (format "%S" (event-basic-type
                                                      last-command-event)))
                  (window-buffer (posn-window (event-start last-command-event)))
                (current-buffer))
            (text-scale-increase 1))))

      (defun zoom-out (arg)
        "Zoom current frame or buffer out.
    With a prefix arg, toggle between zooming frame and zooming buffer.
    Frame zooming uses command `zoom-frm-out'.
    Buffer zooming uses command `text-scale-decrease'."
        (interactive "P")
        (when arg
          (setq zoom-frame/buffer  (if (eq zoom-frame/buffer 'frame) 'buffer 'frame))
          (message "%s zooming from now on" (upcase (symbol-name zoom-frame/buffer)))
          (sit-for 1))
        (if (eq zoom-frame/buffer 'frame)
            (zoom-frm-out)
          (with-current-buffer
              (if (string-match "mouse" (format "%S" (event-basic-type
                                                      last-command-event)))
                  (window-buffer (posn-window (event-start last-command-event)))
                (current-buffer))
            (text-scale-decrease 1))))

      (when (or (fboundp 'set-transient-map) ; Emacs 24.4+
                (fboundp 'set-temporary-overlay-map)) ; Emacs 24.3

        (defun zoom-in/out (arg)
          "Zoom current frame or buffer in or out.
    A prefix arg determines the behavior, as follows:
    none       : Use 1 as the zoom amount.
    plain `C-u': Toggle between zooming frame and zooming buffer.
    0          : Unzoom: reset size to the default.
    other      : Use the numeric value as the zoom amount.

    Similar to the behavior of command `text-scale-adjust', you can
    continue to use any of the keys `+', `-', `0', and `C-u' repeatedly.
    The zoom amount from the initial key sequence is used each time.

    Example: `C-3 C-x C-- C-- C-- C--' zooms out 4 times with a zoom
    amount of 3 each time.

    The zoom amount for frame zooming is a point-size increment/decrement.
    The zoom amount for buffer zooming is a number of text-scaling steps.

    Frame zooming uses command `zoom-frm-in'.
    Buffer zooming uses command `text-scale-increase'.

    User option `zoom-frame/buffer' determines the default zoom type:
    frame or buffer.  If the option value is `buffer' and you never use
    plain `C-u' with this command then it acts like `text-scale-adjust'.

    Remember that you can also use `C-u' when you are done zooming."
          (interactive "P")
          (when (or (equal arg '(4))  (eq ?\025 last-command-event)) ; `C-u'
            (setq zoom-frame/buffer  (if (eq zoom-frame/buffer 'frame) 'buffer 'frame)
                  arg                1)
            (message "%s zooming from now on" (upcase (symbol-name zoom-frame/buffer)))
            (sit-for 1))
          (let* ((ev               last-command-event)
                (echo-keystrokes  nil)
                (base             (event-basic-type ev))
                (step             (if (or (equal arg '(4))  (eq ?\025 last-command-event)) ; C-u
                                      'C-U-WAS-USED
                                    (setq arg  (prefix-numeric-value arg))
                                    (case base
                                      ((?+ ?=) arg)
                                      (?-      (- arg))
                                      (?0      0)
                                      (t       arg)))))
            (message (if (eq step 0)
                        "Reset to default size.  Use C-x C-+/C-- to zoom in/out"
                      "Use C-x C-+/C-- to zoom in/out, C-0 to reset (unzoom)"))
            (unless (eq step 'C-U-WAS-USED)
              (if (eq zoom-frame/buffer 'frame)
                  (if (eq step 0)
                      (zoom-frm-unzoom)
                    (let ((frame-zoom-font-difference  step)) (zoom-frm-in)))
                (with-current-buffer
                    (if (string-match "mouse" (format "%S" (event-basic-type last-command-event)))
                        (window-buffer (posn-window (event-start last-command-event)))
                      (current-buffer))
                  (text-scale-increase step))))
            (let ((fun  (if (fboundp 'set-transient-map)
                            #'set-transient-map
                          #'set-temporary-overlay-map)))
              (funcall fun
                      (let ((map  (make-sparse-keymap)))
                        (dolist (mods  '(() (control)))
                          (dolist (key  '(?- ?+ ?= ?0)) ; The `=' key is often unshifted `+' key.
                            (define-key map (vector (append mods (list key)))
                              `(lambda () (interactive) (zoom-in/out ',arg)))))
                        (define-key map "\C-u" `(lambda () (interactive) (zoom-in/out ',arg)))
                        map)))))))

    ;; These are not so useful, but some people might like them.
    (when (fboundp 'set-face-attribute)     ; Emacs 22+
      (defun zoom-all-frames-in (&optional flip)
        "Zoom all frames in by `frame-zoom-font-difference', making text larger.
    If `frame-zoom-font-difference' is negative, make text smaller.
    With prefix argument FLIP, reverse the direction:
    if `frame-zoom-font-difference' is positive, then make text smaller.
    This is equal but opposite to `zoom-all-frames-out'.
    Note: This zooming is unaffected by `zoom-frm-unzoom'."
        (interactive "P")
        (let ((increment  (if flip (- frame-zoom-font-difference) frame-zoom-font-difference)))
          (set-face-attribute 'default nil
                              :height  (+ (* 10 increment)
                                          (face-attribute 'default :height nil 'default)))))

      (defun zoom-all-frames-out (&optional flip)
        "Zoom all frames out by `frame-zoom-font-difference', making text smaller.
    If `frame-zoom-font-difference' is negative, make text larger.
    With prefix argument FLIP, reverse the direction:
    if `frame-zoom-font-difference' is positive, then make text larger.
    This is equal but opposite to `zoom-frm-in'.
    Note: This zooming is unaffected by `zoom-frm-unzoom'."
        (interactive "P")
        (let ((increment  (if flip frame-zoom-font-difference (- frame-zoom-font-difference))))
          (set-face-attribute 'default nil
                              :height  (+ (* 10 increment)
                                          (face-attribute 'default :height nil 'default))))))

    ;;;;;;;;;;;;;;;;;;;;;;;;;

    (provide 'zoom-frm)

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;; zoom-frm.el ends here
#+END_SRC
** Core
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:51]
:END:
*** Bookmarks
:PROPERTIES:
:CREATED:  [2018-03-02 Fri 11:01]
:END:
#+BEGIN_SRC emacs-lisp
  (setq bookmark-default-file (concat +local-directory "bookmarks"))
#+END_SRC
*** Encoding
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:51]
:END:
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))
  (prefer-coding-system        'utf-8)
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq locale-coding-system   'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)
#+END_SRC
*** Save Minibuffer history iva savehist-mode
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:52]
:END:
#+BEGIN_SRC emacs-lisp
  (setq history-length 500
        savehist-file (concat +local-directory "savehist")
        savehist-save-minibuffer-history t
        savehist-autosave-interval nil ; save on kill only
        savehist-additional-variables '(kill-ring search-ring regexp-search-ring))

  (savehist-mode 1)
#+END_SRC
*** Save Cursor position via save-place-mode
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:54]
:END:
#+BEGIN_SRC emacs-lisp
  (setq save-place-file (concat +local-directory "saveplace"))
  (save-place-mode 1)
#+END_SRC
*** Auto Revert mode
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:03]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :init
    (global-auto-revert-mode))
#+END_SRC
*** Auto Backup
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:58]
:END:
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . ,(concat +local-directory "backups/"))))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-list-file-prefix (concat +local-directory "auto-save-list/.saves-"))
  (setq auto-save-file-name-transforms `((".*" ,(concat +local-directory "auto-save-list/") t)))
#+END_SRC
*** Rencentf mode
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:06]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :hook (after-init . recentf-mode)
    :init
    (setq recentf-save-file (concat +local-directory "recentf")
          recentf-max-saved-items 1000
          recentf-filename-handlers '(file-truename)
          recentf-auto-cleanup 'never)
    :config
    (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'"))
#+END_SRC
*** Indentations
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:26]
:END:
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 2)
#+END_SRC
** DONE epa
CLOSED: [2018-03-21 Wed 15:05]
:PROPERTIES:
:CREATED: [2018-03-21 Wed 15:02]
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2018-03-21 Wed 15:05]
CLOCK: [2018-03-21 Wed 15:02]--[2018-03-21 Wed 15:05] =>  0:03
:END:
#+BEGIN_SRC emacs-lisp
  (use-package epa
    :ensure nil
    :config
    (setq epa-file-encrypt-to user-mail-address
          ;; With GPG 2.1, this forces gpg-agent to use the Emacs minibuffer to
          ;; prompt for the key passphrase.
          epa-pinentry-mode 'loopback))
#+END_SRC
* Keybindings
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:55]
:END:
** General
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:14]
:END:
:LOGBOOK:
CLOCK: [2018-05-17 Thu 11:13]--[2018-05-17 Thu 11:13] =>  0:00
- bind C-h again
CLOCK: [2018-05-17 Thu 11:07]--[2018-05-17 Thu 11:08] =>  0:01
- revert C-h
  + C-h doesn't work in macOS input method
:END:
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)
    (general-auto-unbind-keys)

    (general-create-definer
      +leader
      :prefix "SPC"
      :non-normal-prefix "M-m"
      :states '(motion insert emacs))

    (general-create-definer
      +enable-leader
      :status '(motion normal visual)
      "SPC" nil)

    (general-create-definer
      +local-leader
      :prefix "'"
      :non-normal-prefix "M-m m"
      :states '(motion insert emacs))

    (mmap "M-s" #'evil-write)

    (general-define-key
     :keymaps 'input-decode-map
     "C-h" [backspace]))
#+END_SRC
*** Truly escape key
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:15]
:END:
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps '(minibuffer-local-map
              minibuffer-local-ns-map
              minibuffer-local-completion-map
              minibuffer-local-must-match-map
              minibuffer-local-isearch-map
              read-expression-map)
   [escape] 'abort-recursive-edit)
#+END_SRC
*** DONE [[https://github.com/noctuid/general.el/issues/97][Non-prefix key error but still working? Â· Issue #97 Â· noctuid/general.el]]
CLOSED: [2018-03-02 Fri 15:33]
:PROPERTIES:
:CREATED: [2018-03-02 Fri 15:22]
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2018-03-02 Fri 15:33]
CLOCK: [2018-03-02 Fri 15:07]--[2018-03-02 Fri 15:32] =>  0:25
- use =general-auto-unbind-keys= to unbind leader key
:END:
** Evil
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:53]
:END:
:LOGBOOK:
CLOCK: [2018-03-12 Mon 16:00]--[2018-03-12 Mon 16:02] =>  0:02
- disable evil mode-line segment
- use cursor to recognize the mode
CLOCK: [2018-03-09 Fri 12:11]--[2018-03-09 Fri 12:12] =>  0:01
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-mode-line-format nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-symbol-word-search t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-visual-char-semi-exclusive t)
    (setq evil-ex-search-highlight-all nil)
    (evil-mode)
    :config
    (evil-select-search-module 'evil-search-module 'evil-search)
    (mapc #'evil-declare-ignore-repeat
          '(kill-this-buffer
            ido-kill-buffer
            outline-next-visible-heading
            outline-previous-visible-heading
            outline-up-heading
            evil-visualstar/begin-search-forward
            evil-visualstar/begin-search-backward
            org-export-dispatch
            org-end-of-line
            org-beginning-of-line
            org-open-at-point
            org-cycle
            org-shifttab
            org-ctrl-c-ctrl-c
            org-next-visible-heading
            org-previous-visible-heading
            split-window-below
            split-window-below-and-focus
            split-window-right
            split-window-right-and-focus
            evilmi-jump-items))
    (defalias 'evil-visual-update-x-selection 'ignore)

    (setq evil-normal-state-cursor '(box "DarkGoldenrod2")
          evil-insert-state-cursor '((bar . 2) "chartreuse3")
          evil-emacs-state-cursor '(box "SkyBlue2")
          evil-replace-state-cursor '((hbar . 2) "chocolate")
          evil-visual-state-cursor '((hbar . 2) "gray")
          evil-motion-state-cursor '(box "plum3"))

    (setq-default evil-shift-width 2)

    (evil-define-motion evil-goto-line (count)
      "Go to the first non-blank character of line COUNT.
  By default the (truly) last line."
      :jump t
      :type line
      (if (null count)
          (goto-char (buffer-size))
        (goto-char (point-min))
        (forward-line (1- count)))
      (evil-first-non-blank))

    (defun +evil/reselect-paste ()
      "Go back into visual mode and reselect the last pasted region."
      (interactive)
      (cl-destructuring-bind (_ _ _ beg end &optional _)
          evil-last-paste
        (evil-visual-make-selection
         (save-excursion (goto-char beg) (point-marker))
         end)))
    :general
    (nmap
      "gp" #'+evil/reselect-paste))
#+END_SRC
*** evil-args
:PROPERTIES:
:CREATED:  [2018-03-05 Mon 15:03]
:END:
:LOGBOOK:
CLOCK: [2018-03-05 Mon 15:03]--[2018-03-05 Mon 15:06] =>  0:03
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-args
    :commands (evil-inner-arg
               evil-outer-arg
               evil-forward-arg
               evil-backward-arg
               evil-jump-out-args)
    :general
    (general-define-key
     :keymaps 'evil-inner-text-objects-map
     "a" 'evil-inner-arg)
    (general-define-key
     :keymaps 'evil-outer-text-objects-map
     "a" 'evil-outer-arg))
#+END_SRC
*** evil-surround
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 14:42]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :commands (global-evil-surround-mode
               evil-surround-edit
               evil-Surround-edit
               evil-surround-region)
    :config (global-evil-surround-mode 1)
    :general
    (vmap "s" #'evil-surround-region)
    (omap
      "s" #'evil-surround-edit
      "S" #'evil-Surround-edit))
#+END_SRC
*** evil-embrace
:PROPERTIES:
:CREATED:  [2018-03-02 Fri 14:23]
:END:
:LOGBOOK:
CLOCK: [2018-03-06 Tue 15:08]--[2018-03-06 Tue 15:10] =>  0:02
- fix lazy-loading issue
CLOCK: [2018-03-02 Fri 14:23]--[2018-03-02 Fri 14:35] =>  0:12
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-embrace
    :commands (evil-embrace-enable-evil-surround-integration)
    :hook (org-mode . embrace-org-mode-hook)
    :hook (ruby-mode . embrace-ruby-mode-hook)
    :init
    (eval-after-load 'evil-surround
      (evil-embrace-enable-evil-surround-integration))
    :config
    (setq evil-embrace-show-help-p nil))
#+END_SRC
*** evil-multiedit
:PROPERTIES:
:CREATED:  [2018-03-02 Fri 14:24]
:END:
:LOGBOOK:
CLOCK: [2018-03-02 Fri 14:35]--[2018-03-02 Fri 14:47] =>  0:12
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-multiedit
    :commands (evil-multiedit-match-all
               evil-multiedit-match-and-next
               evil-multiedit-match-and-prev
               evil-multiedit-toggle-marker-here
               evil-multiedit-ex-match)
    :config
    (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match)
    :general
    (nvmap
      "R" #'evil-multiedit-match-all)
    (+leader
     "se" #'evil-multiedit-match-all
     "sr" #'evil-multiedit-restore
     "sm" #'evil-multiedit-toggle-marker-here)

    (general-define-key
     :keymaps 'evil-multiedit-state-map
     "C-f" #'iedit-restrict-function
     "S" #'evil-multiedit--substitute
     "C-n" #'evil-multiedit-next
     "C-p" #'evil-multiedit-prev)

    (general-define-key
     :keymaps '(motion evil-multiedit-state-map)
     "RET" #'evil-multiedit-toggle-or-restrict-region))
#+END_SRC
*** evil-commentary
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:07]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :commands (evil-commentary evil-commentary-yank evil-commentary-line)
    :config (evil-commentary-mode 1)
    :general
    (mmap
     "gc" #'evil-commentary))
#+END_SRC
*** evil-exchange
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:19]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-exchange
    :after evil
    :config (evil-exchange-install))
#+END_SRC
*** evil-indent-plus
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:21]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-indent-plus
    :after evil
    :config (evil-indent-plus-default-bindings))
#+END_SRC
*** evil-matchit
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:21]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-matchit
    :after evil
    :config (global-evil-matchit-mode))
#+END_SRC
*** evil-numbers
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:22]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
    :commands (evil-numbers/inc-at-pt evil-numbers/inc-at-pt)
    :general
    (mmap
     "C-a" #'evil-numbers/inc-at-pt
     "C-x" #'evil-numbers/dec-at-pt))
#+END_SRC
*** evil-visualstar
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:22]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-visualstar
    :commands (evil-visualstar/begin-search-forward
               evil-visualstar/begin-search-backward)
    :config (global-evil-visualstar-mode)
    :general
    (vmap
     "*" #'evil-visualstar/begin-search-forward
     "#" #'evil-visualstar/begin-search-backward))
#+END_SRC
*** evil-lion
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:23]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-lion
    :after evil
    :config (evil-lion-mode))
#+END_SRC
*** DONE [[https://github.com/emacs-evil/evil-ediff][emacs-evil/evil-ediff: Make ediff a little more evil]]
CLOSED: [2018-03-15 Thu 15:15]
:PROPERTIES:
:CREATED: [2018-03-15 Thu 15:12]
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2018-03-15 Thu 15:15]
CLOCK: [2018-03-15 Thu 15:12]--[2018-03-15 Thu 15:15] =>  0:03
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-ediff
    :after (evil ediff))
#+END_SRC
** Leader Keys
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:26]
:END:
#+BEGIN_SRC emacs-lisp
  (+leader
   "SPC" #'execute-extended-command

   "u" #'universal-argument

   ;; File
   "ff" #'find-file
   "fel" #'find-library
   "fS" #'evil-write-all
   "fs" #'save-buffer
   "fvd" #'add-dir-local-variable
   "fvf" #'add-file-local-variable
   "fvp" #'add-file-local-variable-prop-line

   ;; Buffer
   "bb" #'switch-to-buffer
   "bd" #'kill-this-buffer
   "bw" #'read-only-mode
   "bs" (lambda () (interactive) (switch-to-buffer "*scratch*"))
   "bm" (lambda () (interactive) (switch-to-buffer "*Messages*"))
   "TAB" (lambda () (interactive) (switch-to-buffer nil))

   ;; Jumping
   "si" #'imenu

   ;; Help
   "h" (general-simulate-key "<f1>")

   ;; Themes
   "Ts"  #'load-theme

   "en"  #'next-error
   "ep"  #'previous-error

   "w" evil-window-map
   "wd" #'evil-window-delete
   "wf" #'make-frame

   "qf" #'delete-frame
   "qq" #'save-buffers-kill-terminal)
#+END_SRC
** macOS specific keybindings
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:36]
:END:
#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'meta
        mac-option-modifier  'alt)
#+END_SRC
** CANCELLED [[https://github.com/purcell/disable-mouse][purcell/disable-mouse: Disable the mouse in Emacs]]
CLOSED: [2018-03-07 Wed 17:55]
:PROPERTIES:
:CREATED: [2018-03-07 Wed 17:53]
:END:
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2018-03-07 Wed 17:55] \\
  Don't disable mouse clicking for cursor positioning in buffers
CLOCK: [2018-03-07 Wed 17:53]--[2018-03-07 Wed 17:54] =>  0:01
:END:
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package disable-mouse
    :config
    (global-disable-mouse-mode))
#+END_SRC
* Editing/Jumping
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:06]
:END:
** avy
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:29]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :commands (avy-goto-char-2 avy-goto-line)
    :config
    (setq avy-all-windows nil
          avy-background t)
    :general
    (+leader
      "jj" #'avy-goto-char-2
      "jl" #'avy-goto-line))
#+END_SRC
** undo-tree
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 16:52]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :init
    (setq undo-tree-history-directory-alist `(("." . ,(concat +local-directory "undo-tree-history"))))
    (setq undo-tree-auto-save-history t)
    (setq undo-tree-visualizer-timestamps t)
    (global-undo-tree-mode)
    :general
    (+leader
      "au" #'undo-tree-visualize))
#+END_SRC
** editorconfig
:PROPERTIES:
:CREATED:  [2018-03-02 Fri 16:18]
:END:
:LOGBOOK:
CLOCK: [2018-03-02 Fri 16:18]--[2018-03-02 Fri 16:22] =>  0:04
:END:
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :config
    (editorconfig-mode 1))
#+END_SRC
** dumb-jump
:PROPERTIES:
:CREATED:  [2018-03-05 Mon 14:26]
:END:
:LOGBOOK:
CLOCK: [2018-03-05 Mon 14:26]--[2018-03-05 Mon 14:40] =>  0:14
:END:
- setup dumb-jump
  #+BEGIN_SRC emacs-lisp
    (use-package dumb-jump
      :commands (dumb-jump-go dumb-jump-quick-look
                 dumb-jump-back dumb-jump-result-follow)
      :config
      (setq dumb-jump-selector 'ivy))
  #+END_SRC
- override goto definition
  #+BEGIN_SRC emacs-lisp
    (defun +goto-definition (identifier &optional other-window)
      (interactive
       (list (thing-at-point 'symbol t)
             current-prefix-arg))
      (cond ((null identifier)
             (user-error "Nothing under point"))

            ((and (require 'dumb-jump nil t)
                  ;; dumb-jump doesn't tell us if it succeeded or not
                  (let ((old-fn (symbol-function 'dumb-jump-get-results))
                        successful)
                    (cl-letf (((symbol-function 'dumb-jump-get-results)
                               (lambda (&optional prompt)
                                 (let* ((plist (funcall old-fn prompt))
                                        (results (plist-get plist :results)))
                                   (when (and results (> (length results) 0))
                                     (setq successful t))
                                   plist))))
                      (if other-window
                          (dumb-jump-go-other-window)
                        (dumb-jump-go))
                      successful))))

            ((and evil-mode
                  (cl-destructuring-bind (beg . end)
                      (bounds-of-thing-at-point 'symbol)
                    (evil-goto-definition)
                    (let ((pt (point)))
                      (not (and (>= pt beg)
                                (<  pt end)))))))

            (t (user-error "Couldn't find '%s'" identifier))))

    (mmap
      "gd" #'+goto-definition)
  #+END_SRC
** ediff
:PROPERTIES:
:CREATED:  [2018-03-15 Thu 15:15]
:END:
:LOGBOOK:
CLOCK: [2018-03-15 Thu 15:15]--[2018-03-15 Thu 15:16] =>  0:01
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :config
    (setq ediff-diff-options "-w"
          ediff-split-window-function #'split-window-horizontally
          ediff-window-setup-function #'ediff-setup-windows-plain))
#+END_SRC
* Window Management
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 14:40]
:END:
** winner mode
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 14:40]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :init
    (winner-mode)
    :general
    (+leader
     "wU" 'winner-redo
     "wu" 'winner-undo))
#+END_SRC
** Popup
:PROPERTIES:
:CREATED:  [2018-03-02 Fri 11:09]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package shackle
    :init
    (shackle-mode t)
    :config
    (add-to-list 'shackle-rules '("*Help*" :popup t :align 'below :size 0.33))

    (defun +compilation-popup (buffer alist plist)
      (if (get-buffer-window buffer 'visible)
          'fail
        (shackle--display-buffer-aligned-window buffer alist plist))))
#+END_SRC
* Compilation
:LOGBOOK:
CLOCK: [2018-03-06 Tue 16:45]--[2018-03-06 Tue 16:47] =>  0:02
- fix gg in =compilation-mode-map=
:END:
  #+BEGIN_SRC emacs-lisp
    (use-package compile
      :config
      (add-to-list 'shackle-rules '(compilation-mode :custom +compilation-popup :regexp t :select nil :align 'below :size 0.33))
      :general
      (mmap
        :keymaps 'compilation-mode-map
        "g" nil
        "gg" #'evil-goto-first-line
        "gr" #'recompile)
      (+enable-leader
        :keymaps 'compilation-mode-map))
  #+END_SRC
* macOS
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:39]
:END:
** exec-path-from-shell
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:39]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :init
    (exec-path-from-shell-initialize))
#+END_SRC
** dash-at-point
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:41]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package dash-at-point
    :general
    (+leader
     "dd" 'dash-at-point
     "dD" 'dash-at-point-with-docset))
#+END_SRC
** osx-dictionary
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:43]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package osx-dictionary
    :commands (osx-dictionary-search-pointer
               osx-dictionary-search-input
               osx-dictionary-cli-find-or-recompile)
    :general
    (+leader
     "dw" 'osx-dictionary-search-pointer
     "dW" 'osx-dictionary-search-input)
    (nmap
     :keymaps 'osx-dictionary-mode-map
     "q" 'osx-dictionary-quit
     "r" 'osx-dictionary-read-word
     "s" 'osx-dictionary-search-input
     "o" 'osx-dictionary-open-dictionary.app))
#+END_SRC
** transparent title-bar
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 16:12]
:END:
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . 'nil))
#+END_SRC
* Ivy
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:30]
:END:
** Ivy itself
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:31]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :init
    (add-hook 'after-init-hook #'ivy-mode)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-truncate-lines nil)
    (setq ivy-re-builders-alist
          '((t . ivy--regex-ignore-order)))
    :general
    (+enable-leader
      :keymaps 'ivy-occur-grep-mode-map)
    (general-define-key
     :keymaps 'ivy-minibuffer-map
     [escape] 'minibuffer-keyboard-quit)
    (+local-leader
      :keymaps 'ivy-occur-grep-mode-map
      "w" #'ivy-wgrep-change-to-wgrep-mode))
#+END_SRC
** Counsel
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:32]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :after ivy
    :general
    (general-define-key
     [remap apropos]                  #'counsel-apropos
     [remap bookmark-jump]            #'counsel-bookmark
     [remap describe-face]            #'counsel-describe-face
     [remap describe-function]        #'counsel-describe-function
     [remap describe-variable]        #'counsel-describe-variable
     [remap execute-extended-command] #'counsel-M-x
     [remap find-file]                #'counsel-find-file
     [remap find-library]             #'counsel-find-library
     [remap yank-pop]                 #'counsel-yank-pop
     [remap info-lookup-symbol]       #'counsel-info-lookup-symbol
     [remap imenu]                    #'counsel-imenu
     [remap recentf-open-files]       #'counsel-recentf)
    (+leader
      "iu" #'counsel-unicode-char
      "ry" #'counsel-yank-pop
      "rm" #'counsel-mark-ring))
#+END_SRC
** Swiper
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:34]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :commands (swiper swiper-all)
    :general
    (+leader
     "ss" #'swiper))
#+END_SRC
** Sort M-x candidates using smex
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:36]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :after ivy
    :init
    (setq-default smex-history-length 32
                  smex-save-file (concat +local-directory ".smex-items")))
#+END_SRC
** ivy-rich
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:37]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :after ivy
    :init
    (setq ivy-virtual-abbreviate 'full
          ivy-rich-switch-buffer-align-virtual-buffer t)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer))
#+END_SRC
* Dired
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 15:48]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (setq dired-dwim-target t
          dired-listing-switches "-alh"
          global-auto-revert-non-file-buffers t
          image-dired-dir (concat +local-directory "image-dired/")
          image-dired-db-file (concat image-dired-dir "image-dired/db.el")
          image-dired-gallery-dir (concat image-dired-dir "gallery/")
          image-dired-temp-image-file (concat image-dired-dir "temp-image")
          image-dired-temp-rotate-image-file (concat image-dired-dir "temp-rotate-image"))
    :general
    (+leader
     "fd" 'dired-jump
     "fD" 'dired-jump-other-window)
    (+enable-leader
     :keymaps 'dired-mode-map))

  (use-package dired-x
    :ensure nil
    :commands (dired-jump
               dired-jump-other-window))

  (use-package dired-quick-sort
    :init
    (dired-quick-sort-setup))

  (use-package wdired
    :ensure nil
    :general
    (nmap
      :keymaps 'dired-mode-map
      "w" 'wdired-change-to-wdired-mode))
#+END_SRC
* Auto Completion
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 18:16]
:END:
** company
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 18:16]
:END:
:LOGBOOK:
CLOCK: [2018-03-02 Fri 16:17]--[2018-03-02 Fri 16:18] =>  0:01
- fix C-w in company-active-mode
:END:
#+BEGIN_SRC emacs-lisp
  (use-package company
    :init
    (setq company-idle-delay 0.2
          company-require-match 'never
          company-tooltip-align-annotations t
          company-dabbrev-ignore-case nil
          company-dabbrev-downcase nil)

    (setq company-backends
          '(company-keywords
            company-files
            company-capf
            company-dabbrev-code
            company-dabbrev))

    (global-company-mode)
    :config
    (defun +evil-complete (arg)
      (interactive)
      (unless (company-complete)
        (hippie-expand arg)))

    (setq evil-complete-next-func '+evil-complete)
    (setq evil-complete-previous-func '+evil-complete)
    :general
    (general-define-key
     :keymaps 'company-active-map
     "C-w" nil
     "C-n" 'company-select-next
     "C-p" 'company-select-previous))

  (use-package company-statistics
    :hook (company-mode . company-statistics-mode)
    :init
    (setq company-statistics-file (concat +local-directory "company-statistics-cache.el")))
#+END_SRC
*** DONE [[https://twitter.com/EmacsReddit/status/973571278014525441][/r/Emacs on Twitter: "Configuring company-mode? https://t.co/N1FDEE9PpN #emacs"]] :Twitter:
CLOSED: [2018-03-14 Wed 11:25] SCHEDULED: <2018-03-13 Tue>
:PROPERTIES:
:CREATED: [2018-03-13 Tue 23:11]
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2018-03-14 Wed 11:25]
CLOCK: [2018-03-14 Wed 11:20]--[2018-03-14 Wed 11:25] =>  0:05
:END:
#+BEGIN_QUOTE
Their is a buffer local variable called company-backends that holds a
list all the backends that can be used for the current
buffer. company-mode starts with the first backend in the list and
calls itâs prefix function. If that prefix function returns non-nil it
will use that backend and skip the rest (unless it is a grouped
backend, which you can read about in the doc string). If it returns
nil it will keep calling the prefix function of each backend in the
list.

Once a backend gives a non-nil prefix, company calls the candidate
function which populates the pop up. You can use the function
company-diag to see which backend is being used at point and what it
returns. You can reorder the backends to give priority to the ones you
want to run first.

Note that some âdumbâ backends, such as company-dabbrev, company-capf,
and company-ctags, will always return non-nil for their prefix even if
they have no candidates to provide. Therefore they should almost
always be grouped at the back of company-backends.
#+END_QUOTE
- [[id:FA75D853-6514-487F-A0E9-91F212EB8CCB][ananthakumaran/tide: Tide - TypeScript Interactive Development Environment for Emacs]]
** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (smartparens-global-mode)
    (show-smartparens-global-mode)
    (require 'smartparens-config)
    :general
    (imap
      "C-s" #'sp-forward-slurp-sexp
      "S-C-s" #'sp-forward-barf-sexp
      "M-s" #'sp-backward-slurp-sexp
      "S-M-s" #'sp-backward-barf-sexp))
#+END_SRC
* Projectile
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:10]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (setq projectile-sort-order 'recentf
          projectile-cache-file (concat +local-directory "projectile.cache")
          projectile-known-projects-file (concat +local-directory "projectile-bookmarks.eld")
          projectile-completion-system 'ivy)
    :config
    (projectile-mode +1)
    :general
    (+leader
      "p!" 'projectile-run-shell-command-in-root
      "p&" 'projectile-run-async-shell-command-in-root
      "p%" 'projectile-replace-regexp
      "pa" 'projectile-toggle-between-implementation-and-test
      "pb" 'projectile-switch-to-buffer
      "pc" 'projectile-compile-project
      "pd" 'projectile-find-dir
      "pD" 'projectile-dired
      "pf" 'projectile-find-file
      "pF" 'projectile-find-file-dwim
      "pg" 'projectile-find-tag
      "pG" 'projectile-regenerate-tags
      "pI" 'projectile-invalidate-cache
      "pk" 'projectile-kill-buffers
      "pp" 'projectile-switch-project
      "pR" 'projectile-replace
      "pT" 'projectile-test-project))
#+END_SRC
** counsel-projectile
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:29]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :general
    (general-define-key
     [remap projectile-find-file]        #'counsel-projectile-find-file
     [remap projectile-find-dir]         #'counsel-projectile-find-dir
     [remap projectile-switch-to-buffer] #'counsel-projectile-switch-to-buffer
     [remap projectile-grep]             #'counsel-projectile-grep
     [remap projectile-ag]               #'counsel-projectile-ag
     [remap projectile-switch-project]   #'counsel-projectile-switch-project)
    (+leader
     "/" #'counsel-projectile-rg))
#+END_SRC
* Version Control
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:54]
:END:
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC
** magit
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:54]
:END:
:LOGBOOK:
CLOCK: [2018-03-05 Mon 15:16]--[2018-03-05 Mon 15:18] =>  0:02
- bind magit-blame to SPC g b
:END:
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init
    ;; avoid max-specpdl-size error,
    ;; See also [[id:CF8198D2-285C-4E0C-9548-2EBBD13D5F50][diff-hl + Magit == 'max-lisp-eval-depth' 'lisp nesting exceeds max-lisp-eval-depth {Mac OS X} Â· Issue #65 Â· dgutov/diff-hl]]
    (magit-auto-revert-mode -1)
    :config
    (setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
    (setq magit-repository-directories '(("~/Projects/" . 2)))
    :general
    (+enable-leader
     :keymaps
     '(magit-mode-map
       magit-status-mode-map
       magit-diff-mode-map
       magit-process-mode-map
       magit-blame-read-only-mode-map
       magit-log-mode-map))
    (+leader
      "gb" #'magit-blame
      "gs" #'magit-status
      "gi" #'magit-init
      "gl" #'magit-log-buffer-file))
#+END_SRC
*** DONE [[id:4C85A0E7-DC91-43FC-A180-56BAF3A07967][vermiculus/magithub]]
CLOSED: [2018-05-10 Thu 10:38]
:PROPERTIES:
:CREATED: [2018-05-10 Thu 10:25]
:ID:       9FDF221C-789D-498A-965C-AE802CE5EFD1
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2018-05-10 Thu 10:38]
CLOCK: [2018-05-10 Thu 10:32]--[2018-05-10 Thu 10:38] =>  0:06
CLOCK: [2018-05-10 Thu 10:25]--[2018-05-10 Thu 10:30] =>  0:05
:END:
#+BEGIN_SRC emacs-lisp
  (use-package magithub
    :after magit
    :config
    (setq magithub-clone-default-directory "~/Projects")
    (setq magithub-dir (concat +local-directory "magithub/"))
    (magithub-feature-autoinject t))
#+END_SRC
** evil-magit
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:55]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :after magit)
#+END_SRC
*** DONE [[https://github.com/emacs-evil/evil-magit/pull/41][Naming changes in project. by MichaelStergianis Â· Pull Request #41 Â· emacs-evil/evil-magit]]
CLOSED: [2018-04-11 Wed 14:24]
:PROPERTIES:
:CREATED: [2018-04-11 Wed 14:22]
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2018-04-11 Wed 14:24]
CLOCK: [2018-04-11 Wed 14:20]--[2018-04-11 Wed 14:24] =>  0:04
:END:
** gitconfig-mode and gitignore-mode
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 18:08]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package gitconfig-mode
    :mode "/\\.?git/?config$"
    :mode "/\\.gitmodules$")

  (use-package gitignore-mode
    :mode "/\\.gitignore$")
#+END_SRC
** diff-hl
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 18:11]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :hook ((text-mode prog-mode conf-mode) . diff-hl-mode)
    :config
    (eval-after-load 'magit
      (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)))

  (use-package diff-hl-flydiff
    :ensure diff-hl
    :after diff-hl
    :config
    (diff-hl-flydiff-mode)

    (defun +vcs|enable-diff-hl-flydiff-mode (&rest ignore)
      (diff-hl-flydiff-mode t))

    (defun +vcs|disable-diff-hl-flydiff-mode (&rest ignore)
      (diff-hl-flydiff-mode -1))

    (eval-after-load 'company
      (progn
        (add-hook 'company-completion-started-hook '+vcs|disable-diff-hl-flydiff-mode)
        (add-hook 'company-completion-finished-hook '+vcs|enable-diff-hl-flydiff-mode)
        (add-hook 'company-completion-cancelled-hook '+vcs|enable-diff-hl-flydiff-mode))))
#+END_SRC
** DONE [[https://github.com/magit/orgit][magit/orgit: Support for Org links to Magit buffers]]
CLOSED: [2018-03-13 Tue 10:36]
:PROPERTIES:
:CREATED: [2018-03-13 Tue 10:35]
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2018-03-13 Tue 10:36]
CLOCK: [2018-03-13 Tue 10:35]--[2018-03-13 Tue 10:36] =>  0:01
:END:
#+BEGIN_SRC emacs-lisp
  (use-package orgit
    :after (org magit))
#+END_SRC
** DONE [[https://github.com/sshaw/git-link][sshaw/git-link: Emacs package to get the GitHub/Bitbucket/GitLab/... URL for a buffer location]]
CLOSED: [2018-03-15 Thu 15:21]
:PROPERTIES:
:CREATED: [2018-03-15 Thu 15:18]
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2018-03-15 Thu 15:21]
CLOCK: [2018-03-15 Thu 15:18]--[2018-03-15 Thu 15:21] =>  0:03
:END:
#+BEGIN_SRC emacs-lisp
  (use-package git-link
    :commands (git-link git-link-commit git-link-homepage)
    :general
    (+leader
      "gll" #'git-link
      "glc" #'git-link-commit
      "glh" #'git-link-homepage))
#+END_SRC
* Spell Checking
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 16:03]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :hook (text-mode . flyspell-mode)
    :hook (prog-mode . flyspell-prog-mode)
    :init
    (setq ispell-program-name (executable-find "hunspell")
          ispell-dictionary "en_US"
          ispell-local-dictionary-alist '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US,en_US-med") nil utf-8))))

  (use-package flyspell-correct-ivy
    :after flyspell-correct)

  (use-package flyspell-correct
    :commands (flyspell-correct-word-generic
               flyspell-correct-previous-word-generic)
    :general
    (nmap "C-;" #'flyspell-correct-previous-word-generic))
#+END_SRC
* Syntax Checking
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 16:27]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :commands (flycheck-mode flycheck-list-errors flycheck-buffer)
    :config
    ;; Emacs feels snappier without checks on newline
    (setq flycheck-check-syntax-automatically '(save idle-change mode-enabled)))
#+END_SRC
* Languages
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 14:51]
:END:
** Chinese
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 15:46]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package fcitx
    :init
    (fcitx-evil-turn-on))

  (use-package pangu-spacing
    :init
    (setq pangu-spacing-real-insert-separtor t)
    (global-pangu-spacing-mode 1))

  (use-package ace-pinyin
    :after avy
    :config
    (ace-pinyin-global-mode t))

  (use-package evil-find-char-pinyin
    :after evil
    :config
    (evil-find-char-pinyin-mode t))
#+END_SRC
** Ruby
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 14:52]
:END:
:LOGBOOK:
CLOCK: [2018-04-09 Mon 16:25]--[2018-04-09 Mon 16:28] =>  0:03
:END:
#+BEGIN_SRC emacs-lisp :results silent
  (use-package ruby-mode
    :mode "\\.rb$"
    :mode "\\.rake$"
    :mode "\\.gemspec$"
    :mode "\\.\\(pry\\|irb\\)rc$"
    :mode "/\\(Gem\\|Cap\\|Vagrant\\|Rake\\|Pod\\|Puppet\\|Berks\\)file$"
    :interpreter "ruby"
    :hook (ruby-mode . flycheck-mode))

  (use-package inf-ruby
    :commands (inf-ruby inf-ruby-console-auto))

  (use-package company-inf-ruby
    :after inf-ruby)

  (use-package robe
    :after ruby-mode
    :hook (ruby-mode . robe-mode))

  (use-package rbenv
    :after ruby-mode
    :hook (ruby-mode . rbenv-use-corresponding)
    :init
    (setq rbenv-show-active-ruby-in-modeline nil)
    :config
    (global-rbenv-mode))

  (use-package bundler
    :commands (bundle-check
               bundle-install
               bundle-console
               bundle-update
               bundle-exec
               bundle-open))

  (use-package rspec-mode
    :after ruby-mode
    :config
    (defun ruby/rspec-verify-directory (dir)
      "Launch tests in DIR directory.
  Called interactively it prompts for a directory."
      (interactive "Drspec directory: ")
      (rspec-run-single-file dir (rspec-core-options)))

    (add-to-list 'shackle-rules '(rspec-compilation-mode :custom +compilation-popup :regexp t :select nil :align 'below :size 0.33))
    :general
    (+local-leader
      :keymaps '(rspec-mode-map rspec-verifiable-mode-map)
      "ta"    'rspec-verify-all
      "tb"    'rspec-verify
      "tc"    'rspec-verify-continue
      "td"    'ruby/rspec-verify-directory
      "te"    'rspec-toggle-example-pendingness
      "tf"    'rspec-verify-method
      "tl"    'rspec-run-last-failed
      "tm"    'rspec-verify-matching
      "tr"    'rspec-rerun
      "tt"    'rspec-verify-single
      "t~"    'rspec-toggle-spec-and-target-find-example
      "t TAB" 'rspec-toggle-spec-and-target))

  (use-package minitest
    :config
    (add-to-list 'shackle-rules '(minitest-compilation-mode :custom +compilation-popup :regexp t :select nil :align 'below :size 0.33))
    :general
    (+local-leader
      :keymaps 'minitest-mode-map
      "ta" #'minitest-verify-all
      "tb" #'minitest-verify
      "tr" #'minitest-rerun
      "tt" #'minitest-verify-single))

  (use-package rubocop
    :commands (rubocop-mode)
    :hook (ruby-mode . rubocop-mode)
    :general
    (+local-leader
      :keymaps 'rubocop-mode-map
      "cd" #'rubocop-check-directory
      "cD" #'rubocop-autocorrect-directory
      "cf" #'rubocop-check-current-file
      "cF" #'rubocop-autocorrect-current-file
      "cp" #'rubocop-check-project
      "cP" #'rubocop-autocorrect-project))

  (use-package rake
    :commands (rake rake-find-task)
    :init
    (setq rake-cache-file (concat +local-directory "rake.cache"))
    (setq rake-completion-system 'default))
#+END_SRC
** Elixir
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 17:08]
:END:
:LOGBOOK:
CLOCK: [2018-03-07 Wed 17:56]--[2018-03-07 Wed 18:07] =>  0:11
:END:
- elixir itself
  #+BEGIN_SRC emacs-lisp
    (use-package elixir-mode
      :mode "\\.exs?$"
      :mode "\\.elixir2$")

    (use-package ob-elixir
      :after ob
      :config
      (add-to-list 'org-babel-load-languages '(elixir . t)))

    (use-package smartparens-elixir
      :ensure smartparens
      :config
      ;; disable standard config; more disruptive than it needs to be
      (dolist (beg '("fn" "do" "def" "defp" "defmodule" "if" "unless" "case" "receive"))
        (sp-local-pair 'elixir-mode beg nil :actions :rem))
      ;; only complete the basics
      (sp-with-modes 'elixir-mode
        (sp-local-pair "do" "end" :when '(("RET" "<evil-ret>")) :post-handlers '("||\n[i]"))
        (sp-local-pair "do " " end")
        (sp-local-pair "fn " " end")))
  #+END_SRC
- alchemist
  #+BEGIN_SRC emacs-lisp
    (use-package alchemist
      :quelpa (alchemist :fetcher github :repo "dsdshcym/alchemist.el" :files (:defaults "*.exs" "alchemist-server"))
      :after elixir-mode
      :hook (elixir-mode . alchemist-mode)
      :config
      (add-to-list 'shackle-rules '("\\*alchemist.*\\*" :custom +compilation-popup :regexp t :select nil :align 'below :size 0.33))
      :general
      (+local-leader
       :keymaps 'alchemist-mode-map
       "el" 'alchemist-eval-current-line
       "eL" 'alchemist-eval-print-current-line
       "er" 'alchemist-eval-region
       "eR" 'alchemist-eval-print-region
       "eb" 'alchemist-eval-buffer
       "eB" 'alchemist-eval-print-buffer
       "ej" 'alchemist-eval-quoted-current-line
       "eJ" 'alchemist-eval-print-quoted-current-line
       "eu" 'alchemist-eval-quoted-region
       "eU" 'alchemist-eval-print-quoted-region
       "ev" 'alchemist-eval-quoted-buffer
       "eV" 'alchemist-eval-print-quoted-buffer

       "h:" 'alchemist-help
       "hH" 'alchemist-help-history
       "hh" 'alchemist-help-search-at-point
       "hr" 'alchemist-help--search-marked-region

       "m:" 'alchemist-mix-run
       "mc" 'alchemist-mix-compile
       "mx" 'alchemist-mix
       "mr" 'alchemist-mix-rerun-last-task

       "'"  'alchemist-iex-run
       "sc" 'alchemist-iex-compile-this-buffer
       "si" 'alchemist-iex-run
       "sI" 'alchemist-iex-project-run
       "sl" 'alchemist-iex-send-current-line
       "sL" 'alchemist-iex-send-current-line-and-go
       "sm" 'alchemist-iex-reload-module
       "sr" 'alchemist-iex-send-region
       "sR" 'alchemist-iex-send-region-and-go

       "ta" 'alchemist-mix-test
       "tb" 'alchemist-mix-test-this-buffer
       "tB" 'alchemist-project-run-tests-for-current-file
       "tt" 'alchemist-mix-test-at-point
       "tf" 'alchemist-mix-test-file
       "tF" 'alchemist-project-find-test
       "tn" 'alchemist-test-mode-jump-to-next-test
       "tp" 'alchemist-test-mode-jump-to-previous-test
       "tr" 'alchemist-mix-rerun-last-test
       "ts" 'alchemist-mix-test-stale
       "tR" 'alchemist-test-toggle-test-report-display
       "t <tab>" 'alchemist-project-toggle-file-and-tests
       "t <S-tab>" 'alchemist-project-toggle-file-and-tests-other-window

       "xb" 'alchemist-execute-this-buffer
       "xf" 'alchemist-execute-file
       "x:" 'alchemist-execute

       "cb" 'alchemist-compile-this-buffer
       "cf" 'alchemist-compile-file
       "c:" 'alchemist-compile

       "gg" 'alchemist-goto-definition-at-point
       "." 'alchemist-goto-definition-at-point
       "gb" 'alchemist-goto-jump-back
       ","  'alchemist-goto-jump-back
       "gN" 'alchemist-goto-jump-to-previous-def-symbol
       "gn" 'alchemist-goto-jump-to-next-def-symbol
       "gj" 'alchemist-goto-list-symbol-definitions

       "Xi" 'alchemist-hex-info-at-point
       "Xr" 'alchemist-hex-releases-at-point
       "XR" 'alchemist-hex-releases
       "XI" 'alchemist-hex-info
       "Xs" 'alchemist-hex-search

       "ol" 'alchemist-macroexpand-once-current-line
       "oL" 'alchemist-macroexpand-once-print-current-line
       "ok" 'alchemist-macroexpand-current-line
       "oK" 'alchemist-macroexpand-print-current-line
       "oi" 'alchemist-macroexpand-once-region
       "oI" 'alchemist-macroexpand-once-print-region
       "or" 'alchemist-macroexpand-region
       "oR" 'alchemist-macroexpand-print-region

       "fc" 'alchemist-phoenix-find-controllers
       "fC" 'alchemist-phoenix-find-channels
       "fm" 'alchemist-phoenix-find-models
       "fr" 'alchemist-phoenix-router
       "fs" 'alchemist-phoenix-find-static
       "ft" 'alchemist-phoenix-find-templates
       "fv" 'alchemist-phoenix-find-views
       "fw" 'alchemist-phoenix-find-web))
  #+END_SRC
- mix-format
  #+BEGIN_SRC emacs-lisp
    (use-package mix-format
      :quelpa (mix-format :fetcher github :repo "anildigital/mix-format.el")
      :after elixir-mode
      :config
      (setq mixfmt-mix (executable-find "mix"))
      (add-hook 'before-save-hook #'mix-format-before-save)

      (defun +reset-mixfmt-args ()
        (let* ((formatter-directory (locate-dominating-file default-directory ".formatter.exs"))
               (formatter-file (concat formatter-directory ".formatter.exs")))
          (if formatter-directory
              (setq mixfmt-args (list "--dot-formatter" formatter-file))
            (setq mixfmt-args nil))))
      (add-hook 'mix-format-hook #'+reset-mixfmt-args))
  #+END_SRC
** Ledger
:PROPERTIES:
:CREATED:  [2018-03-02 Fri 10:30]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :mode ("\\.\\(ledger\\|ldg\\)\\'" . ledger-mode)
    :init
    (progn
      (setq ledger-post-amount-alignment-column 62))
    :config
    (with-eval-after-load company-mode
      (add-to-list 'company-backends 'company-capf))
    :general
    (+local-leader
     :keymaps 'ledger-mode-map
     "a" 'ledger-add-transaction
     "b" 'ledger-post-edit-amount
     "c" 'ledger-mode-clean-buffer
     "C" 'ledger-toggle-current
     "d" 'ledger-delete-current-transaction
     "l" 'ledger-display-ledger-stats
     "m" 'ledger-set-month
     "p" 'ledger-display-balance-at-point
     "q" 'ledger-post-align-xact
     "r" 'ledger-report
     "R" 'ledger-reconcile
     "t" 'ledger-insert-effective-date
     "y" 'ledger-set-year)
    (+local-leader
     :keymaps 'ledger-reconcile-mode-map
     "'" 'ledger-reconcile-toggle
     "a" 'ledger-reconcile-add
     "q" 'ledger-reconcile-quit
     "t" 'ledger-reconcile-change-target
     "RET" 'ledger-reconcile-finish))

  (use-package flycheck-ledger
    :after ledger-mode)
#+END_SRC
** Markdown
:PROPERTIES:
:CREATED: [2018-03-13 Tue 11:59]
:END:
*** DONE [[https://github.com/defunkt/markdown-mode][defunkt/markdown-mode: Emacs Markdown mode]]
CLOSED: [2018-03-13 Tue 12:03]
:PROPERTIES:
:CREATED: [2018-03-13 Tue 12:00]
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2018-03-13 Tue 12:03]
CLOCK: [2018-03-13 Tue 12:00]--[2018-03-13 Tue 12:03] =>  0:03
:END:
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode "/README$"
    :mode ("/README\\.md$" . gfm-mode)
    :mode "\\.m\\(d\\|arkdown\\)$"
    :init
    (setq markdown-enable-wiki-links t
          markdown-enable-math t
          markdown-italic-underscore t
          markdown-asymmetric-header t
          markdown-make-gfm-checkboxes-buttons t
          markdown-gfm-additional-languages '("sh")
          markdown-fontify-code-blocks-natively t
          markdown-hide-urls nil))
#+END_SRC
** YAML
:PROPERTIES:
:CREATED:  [2018-03-20 Tue 17:01]
:END:
:LOGBOOK:
CLOCK: [2018-03-20 Tue 17:01]--[2018-03-20 Tue 17:02] =>  0:01
:END:
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode :mode "\\.ya?ml$")
#+END_SRC
** DONE [[https://elpa.gnu.org/packages/csv-mode.html][GNU ELPA - csv-mode]]
CLOSED: [2018-05-09 Wed 11:26]
:PROPERTIES:
:CREATED: [2018-05-09 Wed 11:25]
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2018-05-09 Wed 11:26]
CLOCK: [2018-05-09 Wed 11:25]--[2018-05-09 Wed 11:26] =>  0:01
:END:
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :mode "/\\.csv$")
#+END_SRC
* Org
Let's include a newer version of org-mode than the one that is built in. We're going
to manually remove the org directories from the load path, to ensure the version we
want is prioritized instead.

Ensure ELPA org is prioritized above built-in org.
#+BEGIN_SRC emacs-lisp
(require 'cl)
(setq load-path (remove-if (lambda (x) (string-match-p "org$" x)) load-path))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :pin org
    :config
    (add-hook 'org-mode-hook 'auto-fill-mode)

    (setq org-directory "~/Org")
    (setq org-default-notes-file "~/Org/refile.org")
    (setq org-publish-timestamp-directory (concat +local-directory
                                                  ".org-timestamps/")
          org-imenu-depth 9
          org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
            (sequence "PENDING(p)" "|" "MERGED(m!/!)" "CANCELLED(c@/!)")
            (sequence "WAITING(w@/!)" "SOMEDAY(s@/!)" "|" "CANCELLED(c@/!)")))
    (setq org-return-follows-link t)

    (setq org-enforce-todo-dependencies nil)
    (setq org-yank-adjusted-subtrees t)
    (setq org-blank-before-new-entry '((heading . nil)
                                       (plain-list-item . nil)))

    (setq org-modules '(org-crypt
                        org-id
                        org-protocol))
    (eval-after-load 'org
      '(org-load-modules-maybe t))

    (setq org-indirect-buffer-display 'current-window)

    (setq org-cycle-level-after-item/entry-creation nil)

    ;; -----------------------------
    ;; Refile
    ;; -----------------------------

    (defun +org/opened-buffer-files ()
      "Return the list of files currently opened in emacs"
      (delq nil
            (mapcar (lambda (x)
                      (if (and (buffer-file-name x)
                               (string-match "\\.org$"
                                             (buffer-file-name x)))
                          (buffer-file-name x)))
                    (buffer-list))))
    (setq org-refile-targets '((+org/opened-buffer-files :maxlevel . 9)))
    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-allow-creating-parent-nodes 'confirm)
    (setq org-refile-use-cache t)
    (run-with-idle-timer 300 t (lambda ()
                                 (org-refile-cache-clear)
                                 (org-refile-get-targets)))

    (setq org-log-into-drawer "LOGBOOK")
    (setq org-log-reschedule 'note)
    (setq org-log-redeadline 'note)
    (setq org-log-done 'time)
    (setq org-log-note-headings
          '((done . "CLOSING NOTE %t")
            (state . "State %-12s from %-12S %t")
            (note . "Note taken on %t")
            (reschedule . "Rescheduled from %S to %s on %t")
            (delschedule . "Not scheduled, was %S on %t")
            (redeadline . "New deadline from %S to %s on %t")
            (deldeadline . "Removed deadline, was %S on %t")
            (refile . "Refiled on %t")
            (clock-out . "")))

    ;; -----------------------------
    ;; Tags
    ;; -----------------------------
    (setq org-tag-alist '((:startgroup)
                          ("@SCHOOL" . ?s)
                          ("@HOME" . ?h)
                          ("@WORK" . ?w)
                          (:endgroup)
                          ("TOWATCH" . ?W)
                          ("TOREAD" . ?R)))
    (setq org-tags-exclude-from-inheritance '("elfeed" "Book"))

    ;; -----------------------------
    ;; Archive
    ;; -----------------------------
    (setq org-archive-location (concat org-directory "/Archived/" "%s_archive::"))

    ;; -----------------------------
    ;; Link
    ;; -----------------------------
    (defun +remove-nil-link-from-org-stored-links (&rest args)
      "org-link-fontify-links-to-this-file cannot handle (nil \"\")"
      (setq org-stored-links
            (remove-if (lambda (x) (eq nil (car x))) org-stored-links)))
    (advice-add #'org-insert-link :before #'+remove-nil-link-from-org-stored-links)

    (defun +remove-dups-in-org-stored-links (&rest args)
      (delete-dups org-stored-links))
    (advice-add #'org-insert-link :before #'+remove-dups-in-org-stored-links)
    :general
    (nmap
      :keymaps '(org-mode-map)
      "<return>" #'org-open-at-point)
    (+leader
      "op" #'org-pomodoro
      "oa" #'org-agenda
      "ol" #'org-store-link
      "oL" (lambda () (interactive) (org-insert-all-links 1 "" ""))
      "ob" #'org-iswitchb
      "os" #'org-save-all-org-buffers
      "og" #'org-clock-goto
      "oo" #'org-clock-out
      "oc" #'org-capture
      "oC" #'org-capture-goto-last-stored
      "oj" (lambda () (interactive) (org-refile '(4)))
      "oJ" #'org-refile-goto-last-stored)
    (+local-leader
      :keymaps '(org-mode-map)
      "cc" #'org-clock-cancel
      "ci" #'org-clock-in
      "co" #'org-clock-out
      "cr" #'org-resolve-clocks
      "dd" #'org-deadline
      "ds" #'org-schedule
      "dt" #'org-time-stamp
      "dT" #'org-time-stamp-inactive

      "e" #'org-export-dispatch

      "a" #'org-agenda

      "t" #'org-todo

      ;; More cycling options (timestamps, headlines, items, properties)
      "L" #'org-shiftright
      "H" #'org-shiftleft
      "J" #'org-shiftdown
      "K" #'org-shiftup

      ;; Change between TODO sets
      "C-S-l" #'org-shiftcontrolright
      "C-S-h" #'org-shiftcontrolleft
      "C-S-j" #'org-shiftcontroldown
      "C-S-k" #'org-shiftcontrolup

      ;; Subtree editing
      "sa" #'org-archive-subtree
      "sb" (lambda () (interactive) (org-tree-to-indirect-buffer 4))
      "sh" #'org-promote-subtree
      "sj" #'org-move-subtree-down
      "sk" #'org-move-subtree-up
      "sl" #'org-demote-subtree
      "sn" #'org-narrow-to-subtree
      "sN" #'widen
      "sr" #'org-refile
      "ss" #'org-sparse-tree
      "sS" #'org-sort

      ;; Multi-purpose keys
      "'"        #'org-ctrl-c-ctrl-c
      "*"        #'org-ctrl-c-star
      "<return>" #'org-ctrl-c-ret
      "-"        #'org-ctrl-c-minus
      "#"        #'org-update-statistics-cookies
      ;; attachments
      "A"        #'org-attach
      ;; insertion
      "id"       #'org-insert-drawer
      "ie"       #'org-set-effort
      "if"       #'org-footnote-new
      "il"       #'org-insert-link
      "ip"       #'org-set-property
      "is"       #'org-insert-subheading
      "it"       #'org-set-tags))
#+END_SRC
** Evil Org
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:43]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :init
    (setq evil-org-special-o/O nil)
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    :config
    (imap
      :keymaps 'org-mode-map
      "M-h" #'org-metaleft
      "M-j" #'org-metadown
      "M-k" #'org-metaup
      "M-l" #'org-metaright)
    (nmap
      :keymaps '(org-mode-map)
      "C-<return>" #'org-insert-heading-respect-content
      "C-S-<return>" #'org-insert-todo-heading-respect-content
      "M-<return>" (evil-org-define-eol-command org-meta-return)
      "M-S-<return>" (evil-org-define-eol-command org-insert-todo-heading)))
#+END_SRC
** Clock
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:36]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-clock
    :ensure org-plus-contrib
    :config
    (setq org-clock-mode-line-total 'current)
    ;; Show lot of clocking history so it's easy to pick items
    (setq org-clock-history-length 20)
    ;; Resume clocking task on clock-in if the clock is open
    (setq org-clock-in-resume t)
    ;; Change task state to STARTED when clocking in
    ;; (setq org-clock-in-switch-to-state 'bh/clock-in-to-next)

    ;; Save clock data and state changes and notes in the LOGBOOK drawer
    (setq org-clock-into-drawer t)
    ;; Removes clocked tasks with 0:00 duration
    (setq org-clock-out-remove-zero-time-clocks t)
    ;; Save the running clock and all clock history when exiting Emacs, load it on startup
    (setq org-clock-persist t)
    ;; Do not prompt to resume an active clock
    (setq org-clock-persist-query-resume nil)
    ;; Resume clocking task when emacs is restarted
    (org-clock-persistence-insinuate)
    (setq org-clock-persist-file (concat +local-directory
                                         "org-clock-save.el"))
    ;; Clock out when moving task to a done state
    (setq org-clock-out-when-done t)
    ;; Enable auto clock resolution for finding open clocks
    (setq org-clock-auto-clock-resolution '(when-no-clock-is-running))
    ;; Include current clocking task in clock reports
    (setq org-clock-report-include-clocking-task t)
    (setq org-clock-clocktable-default-properties
          '(:link t :maxlevel 2 :scope file :narrow 70! :compact t))
    (setq org-clock-idle-time 10)

    (defun +org-clock-cleanup ()
      (interactive)
      (+join-separated-clock-lines)
      (+add-clock-notation)
      (+org-clock-update-time-in-buffer))

    (defun +join-separated-clock-lines ()
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "\\(\\[.*\\]--\\)\n\\(\\[.*\\]\\)" nil t)
          (replace-match "\\1\\2"))))

    (defun +add-clock-notation ()
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "^\\[.*\\]--\\[.*\\]$" nil t)
          (replace-match "CLOCK: \\&"))))

    (defun +org-clock-update-time-in-buffer ()
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "CLOCK: \\[.*\\]--\\[.*\\]" nil t)
          (org-clock-update-time-maybe)))))
#+END_SRC
*** Pomodoro
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:43]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :commands (org-pomodoro))
#+END_SRC
** Agenda
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:37]
:END:
:LOGBOOK:
CLOCK: [2018-04-13 Fri 11:32]--[2018-04-13 Fri 11:41] =>  0:09
CLOCK: [2018-04-13 Fri 11:12]--[2018-04-13 Fri 11:30] =>  0:18
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :ensure org-plus-contrib
    :commands (org-agenda-list
               org-agenda
               org-agenda-to-appt)
    :config
    (setq org-agenda-diary-file "~/Org/journal.org")
    (setq org-agenda-files '("~/Org" "~/Org/notes" "~/Org/lists" "~/.emacs.d/config.org"))

    ;; Overwrite the current window with the agenda
    (setq org-agenda-window-setup 'current-window)

    (setq org-agenda-restore-windows-after-quit t)

    (setq org-agenda-span 'day)

    (setq org-agenda-clockreport-parameter-plist
          '(:link t :maxlevel 9 :fileskip0 t :narrow 70! :formula "$4=$3*(60/25);t" :compact t))

    (setq org-agenda-custom-commands
          '(("d" agenda "Agenda for today's tasks only"
             ((org-agenda-entry-types '(:scheduled))
              (org-agenda-skip-scheduled-if-done t)
              (org-agenda-todo-ignore-scheduled 'all)
              (org-agenda-tag-filter-preset '("-TV" "-Movie" "-Animation"))))
            ("w" agenda "@WORK"
             ((org-agenda-tag-filter-preset '("+@WORK"))))))

    (setq org-agenda-skip-scheduled-if-deadline-is-shown 'not-today)
    (evil-set-initial-state 'org-agenda-mode 'normal)

    (defun +org/org-agenda-refresh-appt ()
      (interactive)
      (org-agenda-to-appt t))
    (run-at-time "24:01" 3600 '+org/org-agenda-refresh-appt))

  (use-package appt
    :ensure nil
    :config
    (defun +notification (title msg &optional subtitle group-id sound)
      (interactive)
      (call-process-shell-command
       (concat "terminal-notifier"
               " -title \"" title
               "\" -message \"" msg
               (if subtitle (concat "\" -subtitle \"" subtitle))
               (if sound (concat "\" -sound \"" sound))
               (if group-id (concat "\" -group \"" group-id))
               "\" -activate " "org.gnu.Emacs"
               " -sender " "org.gnu.Emacs"
               " -timeout " "3"
               "&")))

    (defun +macos-do-not-display-is-on? ()
      (string-prefix-p "1"
                       (shell-command-to-string
                        "defaults read ~/Library/Preferences/ByHost/com.apple.notificationcenterui.plist doNotDisturb")))

    (defun +appt-display (min-to-app new-time msg)
      (if (+macos-do-not-display-is-on?)
          (appt-disp-window min-to-app new-time msg)
        (+notification "Org Agenda Appointment" msg (format "Appointment in %s minute(s)" min-to-app) "1")))

    (setq appt-disp-window-function '+appt-display)
    :general
    (nmap
     :keymaps '(org-agenda-keymap)
     "<tab>" #'org-agenda-switch-to
     "<return>" #'org-agenda-switch-to
     "i" #'org-agenda-clock-in
     "s" #'org-agenda-schedule
     "d" #'org-agenda-deadline
     "t" #'org-agenda-todo
     "j" #'org-agenda-next-line
     "k" #'org-agenda-previous-line
     "L" #'org-agenda-log-mode
     "q" #'org-agenda-quit
     "f" #'org-agenda-later
     "b" #'org-agenda-earlier
     "gr" #'org-agenda-redo
     "R" #'org-agenda-clockreport-mode
     "gj" #'org-agenda-next-line
     "gk" #'org-agenda-previous-line))
#+END_SRC
*** DONE [[https://emacs.stackexchange.com/questions/20130/exclude-tag-from-default-agenda-view][org mode - Exclude tag from default agenda view - Emacs Stack Exchange]]
CLOSED: [2018-04-13 Fri 11:12]
:PROPERTIES:
:CREATED: [2018-04-13 Fri 11:07]
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2018-04-13 Fri 11:12]
CLOCK: [2018-04-13 Fri 11:07]--[2018-04-13 Fri 11:12] =>  0:05
:END:
#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-agenda-tag-filter-preset nil)
#+END_SRC
** Capture
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:39]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :ensure org-plus-contrib
    :commands (org-capture)
    :config
    (defun +org/capture-template ()
      (let ((link-to-org-tags "%(+org/link-to-org-tags \"%l\")")
            (properties "\n:PROPERTIES:\n:CREATED: %U\n:END:\n")
            (content-before (plist-get org-capture-plist :content-before))
            (content-after (plist-get org-capture-plist :content-after)))
        (concat content-before link-to-org-tags properties content-after)))

    (defun +org/link-to-org-tags (url)
      (cond
       ((not url) "")
       ((string-match-p "twitter"       url) " :Twitter:")
       ((string-match-p "solidot"       url) " :Solidot:")
       ((string-match-p "mu4e"          url) " :Email:")
       ((string-match-p "v2ex"          url) " :V2EX:")
       ((string-match-p "waerfa"        url) " :ç©å¿æ³:")
       ((string-match-p "wanqu.co"      url) " :Wanqu:")
       ((string-match-p "youtube"       url) " :YouTube:")
       ((string-match-p "bilibili"      url) " :Bilibili:")
       ((string-match-p "zhihu"         url) " :Zhihu:")
       ((string-match-p "sspai"         url) " :å°æ°æ´¾:")
       ((string-match-p "weixin.qq.com" url) " :WeChat:")))
    (setq org-capture-templates
          '(("t" "Todo Later" entry
             (file+headline "~/Org/refile.org" "Todo Later")
             (function +org/capture-template)
             :content-before "* TODO %?")
            ("w" "Watch Later" entry
             (file+headline "~/Org/refile.org" "Watch Later")
             (function +org/capture-template)
             :content-before "* TODO %a"
             :immediate-finish t)
            ("r" "Read Later" entry
             (file+headline "~/Org/refile.org" "Read Later")
             (function +org/capture-template)
             :content-before "* TODO %a"
             :immediate-finish t)
            ("b" "Blog Thought" entry
             (file+headline "~/Org/blogs.org" "Blog")
             (function +org/capture-template)
             :content-before "* TODO %^{Title}"
             :immediate-finish t)
            ("T" "Clock-in Task" entry
             (file "~/Org/refile.org")
             (function +org/capture-template)
             :content-before "* TODO %^{prompt}"
             :clock-in t
             :clock-resume t)
            ("i" "Interruption" entry
             (file+headline "~/Org/refile.org" "Todo Later")
             (function +org/capture-template)
             :content-before "* TODO %^{Task}\nSCHEDULED: %t"
             :immediate-finish t)
            ("l" "Link to current file" entry
             (file "~/Org/refile.org")
             (function +org/capture-template)
             :content-before "* TODO %a")
            ("L" "(Clocked in) Link to current file" entry
             (file "~/Org/refile.org")
             (function +org/capture-template)
             :content-before "* TODO %a"
             :clock-in t
             :clock-resume t)
            ("c" "Link under current clock" entry
             (clock)
             (function +org/capture-template)
             :content-before "* TODO %a")
            ("C" "(Clocked-in) Link under current clock" entry
             (clock)
             (function +org/capture-template)
             :content-before "* TODO %a"
             :clock-in t
             :clock-resume t)
            ("k" "Push to Kindle" entry
             (file+headline "~/Org/refile.org" "Push to Kindle")
             (function +org/capture-template)
             :content-before "* TODO %a %(private/push-to-kindle \"%l\")"
             :immediate-finish t)
            ("p" "Github PR" entry
             (clock)
             (function +org/capture-template)
             :content-before "* PENDING %a"
             :immediate-finish t)
            ("d" "Daily Review" entry
             (file+headline "~/Org/review.org" "Daily Review")
             (function +org/capture-template)
             :content-before "* NEXT Review %u"
             :content-after "- Amazing things that happened today\n  1. %?\n- How could today have been even better?\n  1. "
             :clock-in t))))
#+END_SRC
** Export
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:36]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ox
    :ensure org-plus-contrib
    :config
    (setq org-export-coding-system 'utf-8)
    (setq org-export-backends '(beamer html latex md gfm))

    (setq org-export-with-sub-superscripts '{}
          org-export-with-section-numbers 3
          org-export-with-todo-keywords nil
          org-export-with-timestamps nil)

    ;; {{ export org-mode in Chinese into PDF
    ;; @see http://freizl.github.io/posts/2012-04-06-export-orgmode-file-in-Chinese.html
    (setq org-latex-pdf-process
          '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

    ;; Use listings to export code blocks
    (setq org-latex-listings t)
    (setq org-latex-listings-options
          '(("breaklines" "")
            ("keywordstyle" "\\color{black}\\bfseries")
            ("basicstyle" "\\ttfamily\\scriptsize")))
    (add-to-list 'org-latex-packages-alist '("" "listings"))
    (add-to-list 'org-latex-packages-alist '("" "color"))

    ;; copy/pasted from spacemacs chinese layer
    (defadvice org-html-paragraph (before org-html-paragraph-advice
                                          (paragraph contents info) activate)
      "Join consecutive Chinese lines into a single long line without
  unwanted space when exporting org-mode to html."
      (let* ((origin-contents (ad-get-arg 1))
             (fix-regexp "[[:multibyte:]]")
             (fixed-contents
              (replace-regexp-in-string
               (concat
                "\\(" fix-regexp "\\) *\n *\\(" fix-regexp "\\)") "\\1\\2" origin-contents)))
        (ad-set-arg 1 fixed-contents)))

    (setq org-html-mathjax-options
          (quote
           ((path "http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_SVG")
            (scale "100")
            (align "center")
            (indent "2em")
            (mathml nil)))))
#+END_SRC
*** Markdown
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:44]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ox-md
    :ensure org-plus-contrib
    :after ox)

  (use-package ox-gfm
    :ensure org-plus-contrib
    :after ox)
#+END_SRC
** Attach
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:31]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-attach
    :ensure org-plus-contrib
    :commands 'org-attach
    :config
    (setq org-attach-directory (concat org-directory "/Attached/")))
#+END_SRC
** Habit
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:33]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-habit
    :ensure org-plus-contrib
    :config
    (setq org-habit-graph-column 50))
#+END_SRC
** Indent
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:42]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-indent
    :ensure org-plus-contrib
    :init (setq org-startup-indented t))
#+END_SRC
** CREATED attribute via org-expiry
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:42]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-expiry
    :ensure org-plus-contrib
    :after org
    :config
    (setq org-expiry-inactive-timestamps t)
    (org-expiry-insinuate))
#+END_SRC
** Babel
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:34]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ob
    :ensure org-plus-contrib
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (shell . t)
       (emacs-lisp . t)
       (latex . t)
       (python . t)
       (ruby . t)
       (org . t)
       (sql . t)
       (C . t)
       (dot . t)
       (scheme . t)
       (plantuml . t)
       (ledger . t)
       (js . t)
       ))
    (setq org-export-babel-evaluate nil
          org-confirm-babel-evaluate nil))
#+END_SRC
*** DONE [[https://github.com/astahlman/ob-async][astahlman/ob-async: Asynchronous src_block execution for org-babel]]
CLOSED: [2018-05-08 Tue 14:14]
:PROPERTIES:
:CREATED: [2018-05-08 Tue 14:12]
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2018-05-08 Tue 14:14]
CLOCK: [2018-05-08 Tue 14:12]--[2018-05-08 Tue 14:14] =>  0:02
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ob-async
    :after ox)
#+END_SRC
** org-list
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:34]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-list
    :ensure org-plus-contrib
    :init
    (setq org-cycle-include-plain-lists 'integrate))
#+END_SRC
** org-id
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:35]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-id
    :ensure org-plus-contrib
    :init
    (setq org-id-locations-file (concat +local-directory ".org-id-locations"))
    (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))
#+END_SRC
** org-mac-link
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:34]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-mac-link
    :ensure org-plus-contrib
    :commands (org-mac-safari-insert-frontmost-url
               org-mac-skim-insert-page
               org-mac-chrome-insert-frontmost-url))
#+END_SRC
** org-drill
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:45]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-drill
    :ensure org-plus-contrib
    :commands (org-drill))
#+END_SRC
** org-mime
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:45]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-mime
    :commands (org-mime-htmlize org-mime-org-buffer-htmlize))
#+END_SRC
** org-download
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:45]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :config
    (setq org-download-method 'attach)
    (setq org-download-screenshot-method "screencapture -i %s"))
#+END_SRC
** org-rich-yank
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:46]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-rich-yank
    :after org
    :general
    (+local-leader
      :keymaps 'org-mode-map
      "p" #'org-rich-yank))
#+END_SRC
** smartparens-org
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:46]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package smartparens-org
    :ensure smartparens
    :config
    (sp-with-modes 'org-mode
      (sp-local-pair "*" "*" :post-handlers '(("[d1]" "SPC")))
      (sp-local-pair "_" "_" :post-handlers '(("[d1]" "SPC")))))
#+END_SRC
** org-page
:PROPERTIES:
:CREATED:  [2018-03-02 Fri 16:10]
:END:
:LOGBOOK:
CLOCK: [2018-03-02 Fri 16:10]--[2018-03-02 Fri 16:17] =>  0:07
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-page
    :config
    (setq op/repository-directory "~/Projects/dsdshcym.github.io/"
          op/site-domain "http://dsdshcym.github.io"
          op/personal-github-link "https://github.com/dsdshcym"
          op/site-main-title "dsdshome"
          op/site-sub-title "This is my small blog :)"
          op/personal-disqus-shortname "dsdshcym-github-io"
          op/theme-root-directory (concat +emacs-directory "org-page-themes")
          op/theme 'wy))

  (defun +org-page/publish ()
    (interactive)
    (op/do-publication))

  (defun +org-page/new-post (&optional category default-tags)
    (interactive)
    (let* ((category (or category "blog"))
           (title (read-string "Title: "))
           (keywords (read-string "Keywords: "))
           (tags (read-string "Tags: " default-tags))
           (underscore-title (replace-regexp-in-string "[[:space:]]+" "_" title))
           (kebab-title (s-dashed-words underscore-title))
           (filename (concat kebab-title ".org"))
           (dir (concat (file-name-as-directory op/repository-directory)
                        (file-name-as-directory category)))
           (path (concat dir filename)))
      (op/git-change-branch op/repository-directory op/repository-org-branch)
      (if (file-exists-p path)
          (error "Post `%s' already exists." path))
      (unless (file-directory-p dir)
        (mkdir dir t))
      (switch-to-buffer (find-file path))
      (op/insert-options-template title
                                  (concat "/" category "/%y/%m/%d/" kebab-title)
                                  keywords
                                  tags)
      (save-buffer)))

  (defun +org-page/new-blog ()
    (interactive)
    (+org-page/new-post "blog"))

  (defun +org-page/new-clipping ()
    (interactive)
    (+org-page/new-post "clipping" "Clipping, "))
#+END_SRC
** DONE [[elfeed:planet.emacsen.org#http://acidwords.com/posts/2018-03-02-extending-org-mode-easy-templates.html][Sanel Zukan: Extending org-mode Easy Templates]]
CLOSED: [2018-03-06 Tue 16:42]
:PROPERTIES:
:CREATED: [2018-03-06 Tue 16:41]
:END:
:LOGBOOK:
CLOCK: [2018-03-07 Wed 15:51]--[2018-03-07 Wed 15:55] =>  0:04
- State "DONE"       from "TODO"       [2018-03-06 Tue 16:42]
CLOCK: [2018-03-06 Tue 16:41]--[2018-03-06 Tue 16:42] =>  0:01
:END:
#+BEGIN_SRC emacs-lisp
  (setq org-structure-template-alist
        '(("l" "#+BEGIN_SRC emacs-lisp
  ?
  ,#+END_SRC")
          ("r" "#+BEGIN_SRC ruby
  ?
  ,#+END_SRC")
          ("x" "#+BEGIN_SRC elixir
  ?
  ,#+END_SRC")
          ("s" "#+BEGIN_SRC ?

  ,#+END_SRC")
          ("e" "#+BEGIN_EXAMPLE
  ?
  ,#+END_EXAMPLE")
          ("q" "#+BEGIN_QUOTE
  ?
  ,#+END_QUOTE")
          ("c" "#+BEGIN_CENTER
  ?
  ,#+END_CENTER")))
#+END_SRC
* elfeed
:PROPERTIES:
:CREATED:  [2018-03-02 Fri 17:51]
:END:
:LOGBOOK:
CLOCK: [2018-03-02 Fri 17:51]--[2018-03-02 Fri 18:04] =>  0:13
:END:
- elfeed
  #+BEGIN_SRC emacs-lisp
    (use-package elfeed
      :commands 'elfeed
      :config
      (defun +elfeed/org-elfeed-entry-store-link ()
        (interactive)
        (when (and (boundp 'elfeed-show-entry) elfeed-show-entry)
          (let* ((link (elfeed-entry-link elfeed-show-entry))
                 (title (elfeed-entry-title elfeed-show-entry)))
            (message title)
            (org-store-link-props
             :link link
             :description title))))
      (org-link-set-parameters "elfeed" :store #'+elfeed/org-elfeed-entry-store-link)
      :general
      (+leader
        "af" #'elfeed)
      (nmap
        :keymaps 'elfeed-search-mode-map
        "RET" #'elfeed-search-show-entry
        "s"   #'elfeed-search-live-filter
        "b"   #'elfeed-search-browse-url
        "c"   #'elfeed-db-compact
        "r"   #'elfeed-search-untag-all-unread
        "u"   #'elfeed-search-tag-all-unread
        "y"   #'elfeed-search-yank
        "gr"  #'elfeed-update
        "gR"  #'elfeed-search-update--force
        "gu"  #'elfeed-unjam
        "q"   #'elfeed-search-quit-window)
      (nmap
        :keymaps 'elfeed-show-mode-map
        "C-n" #'elfeed-show-next
        "C-p" #'elfeed-show-prev
        "y"   #'elfeed-show-yank
        "b"   #'elfeed-show-visit
        "q"   #'elfeed-kill-buffer))
  #+END_SRC
** org-elfeed
:PROPERTIES:
:CREATED:  [2018-03-02 Fri 17:53]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
    :after elfeed
    :init
    (setq rmh-elfeed-org-files '("~/Org/rss_feed.org"))
    :config
    (elfeed-org)

    (defun +elfeed-org-convert-tree-to-headlines (parsed-org)
      (org-element-map parsed-org 'headline
        (lambda (h)
          (let* ((heading (org-element-property :raw-value h))
                 (tags (mapcar 'intern (org-element-property :tags h))))
            (-concat (list heading) tags)))))
    (advice-add #'rmh-elfeed-org-convert-tree-to-headlines :override #'+elfeed-org-convert-tree-to-headlines)

    (defun +elfeed-org-filter-relevant (list)
      "Filter relevant entries from the LIST."
      (-filter
       (lambda (entry)
         (and
          (string-match "\\(http\\|entry-title\\)" (car entry))
          (member (intern rmh-elfeed-org-tree-id) entry)
          (not (member (intern rmh-elfeed-org-ignore-tag) entry))))
       list))
    (advice-add #'rmh-elfeed-org-filter-relevant :override #'+elfeed-org-filter-relevant))
#+END_SRC
* mu4e
:PROPERTIES:
:CREATED:  [2018-03-05 Mon 11:46]
:END:
:LOGBOOK:
CLOCK: [2018-05-17 Thu 10:50]--[2018-05-17 Thu 10:51] =>  0:01
- auto update every 5 minutes
CLOCK: [2018-05-14 Mon 10:12]--[2018-05-14 Mon 10:13] =>  0:01
- remove ekohe-related settings
CLOCK: [2018-03-06 Tue 16:50]--[2018-03-06 Tue 16:51] =>  0:01
- replace =add-hook!= with =add-hook=
CLOCK: [2018-03-05 Mon 11:46]--[2018-03-05 Mon 11:48] =>  0:02
:END:
#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :ensure nil
    :commands (mu4e mu4e-compose-new)
    :init
    (setq url-mail-command 'mu4e-compose-new)
    :config
    (setq mu4e-completing-read-function 'completing-read)
    (setq mu4e-confirm-quit nil)

    ;; default
    (setq mu4e-maildir (expand-file-name "~/Maildir"))

    (setq mu4e-refile-folder "/gmail/all mail")
    (setq mu4e-drafts-folder "/gmail/drafts")
    (setq mu4e-sent-folder   "/gmail/sent")
    (setq mu4e-trash-folder  "/gmail/trash")

    ;;rename files when moving
    ;;NEEDED FOR MBSYNC
    (setq mu4e-change-filenames-when-moving t)

    ;; don't save message to Sent Messages, GMail/IMAP will take care of this
    (setq mu4e-sent-messages-behavior 'delete)

    (setq mu4e-update-interval 300)

    (setq mu4e-html2text-command "pandoc -f html -t org")

    ;; setup some handy shortcuts
    (setq mu4e-maildir-shortcuts
          '(("/gmail/inbox"    . ?i)
            ("/gmail/sent"     . ?s)
            ("/gmail/trash"    . ?t)
            ("/gmail/all mail" . ?a)))

    (setq mu4e-bookmarks
          '(
            ("flag:unread AND NOT flag:trashed AND NOT maildir:\"/gmail/all mail\""
             "Unread messages"  ?u)
            ("date:today..now AND NOT maildir:\"/gmail/all mail\""
             "Today's messages" ?t)
            ("date:7d..now AND NOT maildir:\"/gmail/all mail\""
             "Last 7 days"      ?w)
            )
          )

    (setq mu4e-get-mail-command "mbsync -a")

    (setq mu4e-attachment-dir "~/Downloads")

    (setq mu4e-view-prefer-html nil)

    ;; Store link to message if in header view, not to header query
    (setq org-mu4e-link-query-in-headers-mode nil)

    (setq mu4e-org-contacts-file (expand-file-name "~/Org/contacts.org"))
    (eval-after-load 'mu4e-headers
      (lambda ()
        (add-to-list 'mu4e-headers-actions
                     '("org-contact-add" . mu4e-action-add-org-contact) t)))
    (eval-after-load 'mu4e-view
      (lambda ()
        (add-to-list 'mu4e-view-actions
                     '("org-contact-add" . mu4e-action-add-org-contact) t)))

    (setq message-send-mail-function 'smtpmail-send-it
          starttls-use-gnutls t
          smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
          smtpmail-auth-credentials (expand-file-name "~/.authinfo.gpg")
          smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 587)

    (defvar my-mu4e-account-alist
      '(("gmail"
         (mu4e-sent-folder   "/gmail/sent")
         (mu4e-drafts-folder "/gmail/drafts")
         (smtpmail-default-smtp-server "smtp.gmail.com")
         (smtpmail-smtp-user "dsdshcym")
         (smtpmail-smtp-server "smtp.gmail.com")
         ;; (smtpmail-stream-type starttls)
         (smtpmail-smtp-service 587))))

    (defun my-mu4e-set-account ()
      "Set the account for composing a message."
      (let* ((account
              (if mu4e-compose-parent-message
                  (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                    (string-match "/\\(.*?\\)/" maildir)
                    (match-string 1 maildir))
                (completing-read (format "Compose with account: (%s) "
                                         (mapconcat #'(lambda (var) (car var))
                                                    my-mu4e-account-alist "/"))
                                 (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                                 nil t nil nil (caar my-mu4e-account-alist))))
             (account-vars (cdr (assoc account my-mu4e-account-alist))))
        (if account-vars
            (mapc #'(lambda (var)
                      (set (car var) (cadr var)))
                  account-vars)
          (error "No email account found"))))

    (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)

    (add-to-list 'mu4e-view-actions
                 '("browser" . mu4e-action-view-in-browser))
    :general
    (+leader
     "am" 'mu4e
     "aM" 'mu4e-compose-new))

  (use-package evil-mu4e
    :after mu4e)

  (use-package mu4e-maildirs-extension
    :after mu4e
    :config (mu4e-maildirs-extension-load))

  (use-package org-mu4e
    :ensure nil
    :after mu4e
    :config
    (setq org-mu4e-link-query-in-headers-mode nil
          org-mu4e-convert-to-html t)

    ;; Only render to html once. If the first send fails for whatever reason,
    ;; org-mu4e would do so each time you try again.
    (add-hook 'message-send-hook (lambda () (setq-local org-mu4e-convert-to-html nil))))
#+END_SRC
* Chrome
:PROPERTIES:
:CREATED:  [2018-03-13 Tue 11:59]
:END:
** DONE [[https://github.com/alpha22jp/atomic-chrome][alpha22jp/atomic-chrome: Edit text area on Chrome with Emacs using Atomic Chrome]]
CLOSED: [2018-03-13 Tue 11:58]
:PROPERTIES:
:CREATED: [2018-03-13 Tue 11:54]
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2018-03-13 Tue 11:58]
CLOCK: [2018-03-13 Tue 11:54]--[2018-03-13 Tue 11:58] =>  0:04
:END:
#+BEGIN_SRC emacs-lisp
  (use-package atomic-chrome
    :hook (atomic-chrome-edit-done . delete-frame)
    :init
    (setq atomic-chrome-server-ghost-text-port 4002)
    (atomic-chrome-start-server)
    :config
    (setq atomic-chrome-default-major-mode 'org-mode)
    (setq atomic-chrome-url-major-mode-alist
          '(("github" . gfm-mode)
            ("gitlab" . gfm-mode)))
    (setq atomic-chrome-buffer-open-style 'frame))
#+END_SRC
* eshell
:PROPERTIES:
:CREATED:  [2018-05-10 Thu 10:40]
:END:
:LOGBOOK:
CLOCK: [2018-05-10 Thu 10:40]--[2018-05-10 Thu 10:41] =>  0:01
:END:
#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :commands 'eshell
    :config
    (setq eshell-directory-name (concat +local-directory "eshell/")))
#+END_SRC
