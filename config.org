#+TITLE: Emacs Literate Configuration
#+PROPERTY: header-args :tangle yes

* About this file
This is an Emacs literate configuration template. It contains the basic structure
of a literate config along with some optimizations to ensure a fast load time.

* Personal Information
Let's set some variables with basic user information.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Yiming Chen"
      user-mail-address "dsdshcym@gmail.com")
#+END_SRC
* Constants
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:29]
:END:
#+BEGIN_SRC emacs-lisp
  (setq private/emacs-directory (file-truename user-emacs-directory))
  (setq private/local-directory (concat private/emacs-directory ".local/"))
  (setq private/packages-directory (concat private/local-directory "packages/"))
#+END_SRC
* Emacs Initialization
** Settings
We're going to increase the gc-cons-threshold to a very high number to decrease the load and compile time.
We'll lower this value significantly after initialization has completed. We don't want to keep this value
too high or it will result in long GC pauses during normal usage.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq gc-cons-threshold 402653184
          gc-cons-percentage 0.6))

  (defun private/set-gc-cons-variables ()
    (setq gc-cons-threshold 16777216
          gc-cons-percentage 0.1))

  (add-hook 'after-init-hook #'private/set-gc-cons-variables)
#+END_SRC

Disable certain byte compiler warnings to cut down on the noise. This is a personal choice and can be removed
if you would like to see any and all byte compiler warnings.

#+BEGIN_SRC emacs-lisp
(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC
** Package Management
*** Package Settings
We're going to set the =load-path= ourselves and avoid calling =(package-initilize)= (for
performance reasons) so we need to set =package--init-file-ensured= to true to tell =package.el=
to not automatically call it on our behalf. Additionally we're setting
=package-enable-at-startup= to nil so that packages will not automatically be loaded for us since
=use-package= will be handling that.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-prefer-newer t
          package-user-dir (expand-file-name "elpa" private/packages-directory)
          package--init-file-ensured t
          package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t)))
#+END_SRC
*** Manually Set Load Path
We're going to set the load path ourselves so that we don't have to call =package-initialize= at
runtime and incur a large performance hit. This load-path will actually be faster than the one
created by =package-initialize= because it appends the elpa packages to the end of the load path.
Otherwise any time a builtin package was required it would have to search all of third party paths
first.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+END_SRC
*** Initialize Package Management
Next we are going to require =package.el= and add our additional package archives, 'melpa' and 'org'.
Afterwards we need to initialize our packages and then ensure that =use-package= is installed, which
we promptly install if it's missing. Finally we load =use-package= and tell it to always install any
missing packages.

Note that this entire block is wrapped in =eval-when-compile=. The effect of this is to perform all
of the package initialization during compilation so that when byte compiled, all of this time consuming
code is skipped. This can be done because the result of byte compiling =use-package= statements results
in the macro being fully expanded at which point =use-package= isn't actually required any longer.

Since the code is automatically compiled during runtime, if the configuration hasn't already been
previously compiled manually then all of the package initialization will still take place at startup.

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'package)

    (unless (assoc-default "melpa" package-archives)
      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
    (unless (assoc-default "org" package-archives)
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))

    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t))
#+END_SRC
* Emacs Configurations
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:40]
:END:
** Custom variables
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:40]
:END:
Do not clutter =init.el= please.
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" private/local-directory))
#+END_SRC
** UI
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:59]
:END:
*** Reaonable default
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:00]
:END:
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (tooltip-mode -1)
  (setq mouse-highlight nil)
  (setq scroll-conservatively 0)
  (setq column-number-mode t)
  (setq-default cursor-in-non-selected-windows nil)
  (setq x-underline-at-descent-line t)
  (setq x-stretch-cursor t)
  (setq frame-resize-pixelwise t)
  (setq inhibit-startup-screen t)
#+END_SRC
*** Theme
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:01]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :init
    (setq solarized-use-variable-pitch nil)
    (setq solarized-scale-org-headlines nil)
    (load-theme 'solarized-dark t))
#+END_SRC
*** Fonts
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:02]
:END:
#+BEGIN_SRC emacs-lisp
  (setq private/main-font (font-spec :family "Iosevka" :size 14))
  (setq private/cjk-font (font-spec :family "Sarasa Mono SC"))
  (setq private/emoji-font (font-spec :family "Apple Color Emoji"))

  (set-face-attribute 'default nil :font private/main-font)
  (set-fontset-font t 'unicode private/emoji-font)

  (dolist (charset '(kana han cjk-misc bopomofo))
      (set-fontset-font (frame-parameter nil 'font) charset private/cjk-font))
#+END_SRC
**** JIT optimizations
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:18]
:END:
#+BEGIN_SRC emacs-lisp
  (setq-default
   jit-lock-defer-time nil
   jit-lock-stealth-nice 0.1
   jit-lock-stealth-time 0.2
   jit-lock-stealth-verbose nil)
#+END_SRC
*** Modeline
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:11]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :init
    (sml/setup))
#+END_SRC
*** Line Numbers
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:15]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package display-line-numbers
    :ensure nil
    :if (>= emacs-major-version 26)
    :hook (prog-mode . display-line-numbers-mode)
    :init
    (setq-default display-line-numbers-width 4)
    (setq display-line-numbers-type 'visual))
#+END_SRC
** Core
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:51]
:END:
*** Encoding
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:51]
:END:
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))
  (prefer-coding-system        'utf-8)
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq locale-coding-system   'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)
#+END_SRC
*** Save Minibuffer history iva savehist-mode
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:52]
:END:
#+BEGIN_SRC emacs-lisp
  (setq history-length 500
        savehist-file (concat private/local-directory "savehist")
        savehist-save-minibuffer-history t
        savehist-autosave-interval nil ; save on kill only
        savehist-additional-variables '(kill-ring search-ring regexp-search-ring))

  (savehist-mode 1)
#+END_SRC
*** Save Cursor position via save-place-mode
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:54]
:END:
#+BEGIN_SRC emacs-lisp
  (setq save-place-file (concat private/local-directory "saveplace"))
  (save-place-mode 1)
#+END_SRC
*** Auto Backup
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:58]
:END:
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . ,(concat private/local-directory "backups/"))))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms `((".*" ,(concat private/local-directory "auto-save-list/") t)))
#+END_SRC
*** Rencentf mode
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:06]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :hook (after-init . recentf-mode)
    :init
    (setq recentf-save-file (concat private/local-directory "recentf")
          recentf-max-saved-items 1000
          recentf-filename-handlers '(file-truename)
          recentf-auto-cleanup 'never)
    :config
    (add-to-list 'recentf-exclude (file-truename private/local-directory))
    (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'"))
#+END_SRC
* Keybindings
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:55]
:END:
** Evil
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:53]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-symbol-word-search t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-visual-char-semi-exclusive t)
    (evil-mode)
    :config
    (evil-select-search-module 'evil-search-module 'evil-search)
    (mapc #'evil-declare-ignore-repeat
          '(kill-this-buffer
            ido-kill-buffer
            outline-next-visible-heading
            outline-previous-visible-heading
            outline-up-heading
            evil-visualstar/begin-search-forward
            evil-visualstar/begin-search-backward
            org-export-dispatch
            org-end-of-line
            org-beginning-of-line
            org-open-at-point
            org-cycle
            org-shifttab
            org-ctrl-c-ctrl-c
            org-next-visible-heading
            org-previous-visible-heading
            split-window-below
            split-window-below-and-focus
            split-window-right
            split-window-right-and-focus
            evilmi-jump-items))
    (defalias 'evil-visual-update-x-selection 'ignore)

    (setq evil-normal-state-cursor '(box "DarkGoldenrod2")
          evil-insert-state-cursor '((bar . 2) "chartreuse3")
          evil-emacs-state-cursor '(box "SkyBlue2")
          evil-replace-state-cursor '((hbar . 2) "chocolate")
          evil-visual-state-cursor '((hbar . 2) "gray")
          evil-motion-state-cursor '(box "plum3"))

    (setq-default evil-shift-width 2)

    (evil-define-motion evil-goto-line (count)
      "Go to the first non-blank character of line COUNT.
  By default the (truly) last line."
      :jump t
      :type line
      (if (null count)
          (goto-char (buffer-size))
        (goto-char (point-min))
        (forward-line (1- count)))
      (evil-first-non-blank)))
#+END_SRC
** General
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:14]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package general
    :after evil
    :config
    (general-evil-setup t)

    (general-create-definer
     private/leader
     :prefix "SPC"
     :non-normal-prefix "M-m"
     :states '(motion insert emacs))

    (general-create-definer
     private/local-leader
     :prefix "'"
     :non-normal-prefix "M-m m"
     :states '(motion insert emacs)))
#+END_SRC
*** Leader Keys
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:26]
:END:
#+BEGIN_SRC emacs-lisp
  (private/leader
   "" nil

   "SPC" #'execute-extended-command

   "u" #'universal-argument

   ;; File
   "ff" #'find-file
   "fel" #'find-library
   "fS" #'evil-write-all
   "fs" #'save-buffer
   "fvd" #'add-dir-local-variable
   "fvf" #'add-file-local-variable
   "fvp" #'add-file-local-variable-prop-line

   ;; Buffer
   "bb" #'switch-to-buffer
   "bd" #'kill-this-buffer
   "bw" #'read-only-mode
   "TAB" (lambda () (interactive) (switch-to-buffer nil))

   ;; Jumping
   "sj" #'imenu

   ;; Help
   "h" (general-simulate-keys "<f1>")

   ;; Themes
   "Ts"  #'load-theme

   "en"  #'next-error
   "ep"  #'previous-error

   ;; Window Management
   "wd" #'delete-window
   "wm" #'delete-other-windows
   "wf" #'make-frame
   "wH" #'evil-window-move-far-left
   "wh" #'evil-window-left
   "wJ" #'evil-window-move-very-bottom
   "wj" #'evil-window-down
   "wK" #'evil-window-move-very-top
   "wk" #'evil-window-up
   "wL" #'evil-window-move-far-right
   "wl" #'evil-window-right
   "wo" #'other-frame
   "wS" #'split-window-below
   "ws" #'split-window-below-and-focus
   "wV" #'split-window-right
   "wv" #'split-window-right-and-focus
   "ww" #'other-window
   "w=" #'balance-windows

   "qf" #'delete-frame
   "qq" #'save-buffers-kill-terminal)
#+END_SRC
*** Truly escape key
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:15]
:END:
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps '(minibuffer-local-map
              minibuffer-local-ns-map
              minibuffer-local-completion-map
              minibuffer-local-must-match-map
              minibuffer-local-isearch-map
              read-expression-map)
   [escape] 'abort-recursive-edit)
#+END_SRC
** macOS specific keybindings
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:36]
:END:
#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'meta
        mac-option-modifier  'alt)
#+END_SRC
* macOS
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:39]
:END:
** exec-path-from-shell
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:39]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :init
    (exec-path-from-shell-initialize))
#+END_SRC
** dash-at-point
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:41]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package dash-at-point
    :general
    (private/leader
     "dd" 'dash-at-point
     "dD" 'dash-at-point-with-docset))
#+END_SRC
** osx-dictionary
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:43]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package osx-dictionary
    :commands (osx-dictionary-search-pointer
               osx-dictionary-search-input
               osx-dictionary-cli-find-or-recompile)
    :general
    (private/leader
     "dw" 'osx-dictionary-search-pointer
     "dW" 'osx-dictionary-search-input)
    (nmap
     :keymaps 'osx-dictionary-mode-map
     "q" 'osx-dictionary-quit
     "r" 'osx-dictionary-read-word
     "s" 'osx-dictionary-search-input
     "o" 'osx-dictionary-open-dictionary.app))
#+END_SRC
* Ivy
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:30]
:END:
** Ivy itself
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:31]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :init
    (add-hook 'after-init-hook #'ivy-mode)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-truncate-lines nil)
    (setq ivy-re-builders-alist
          '((t . ivy--regex-plus)))
    :general
    (general-define-key
     :keymaps 'ivy-minibuffer-map
     [escape] 'minibuffer-keyboard-quit)
    (private/local-leader
     :keymaps 'ivy-occur-grep-mode-map
     "w" #'ivy-wgrep-change-to-wgrep-mode))
#+END_SRC
** Counsel
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:32]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :after ivy
    :config (counsel-mode)
    :general
    (private/leader
     "iu" #'counsel-unicode-char
     "ry" #'counsel-yank-pop
     "rm" #'counsel-mark-ring))
#+END_SRC
** Swiper
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:34]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :after ivy
    :general
    (private/leader
     "ss" #'swiper))
#+END_SRC
** Sort M-x candidates using smex
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:36]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :after ivy
    :init
    (setq-default smex-history-length 32
                  smex-save-file (concat private/local-directory ".smex-items")))
#+END_SRC
** ivy-rich
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:37]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :after ivy
    :init
    (setq ivy-virtual-abbreviate 'full
          ivy-rich-switch-buffer-align-virtual-buffer t)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer))
#+END_SRC
* Auto Completion
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 18:16]
:END:
** company
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 18:16]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package company
    :init
    (setq company-idle-delay nil
          company-require-match 'never
          company-tooltip-align-annotations t
          company-dabbrev-ignore-case nil
          company-dabbrev-downcase nil)
    :config
    (global-company-mode)
    (setq company-backends
          '(company-keywords
            company-files
            company-capf
            company-dabbrev-code
            company-dabbrev))
    :general
    (general-define-key
     :keymaps 'company-active-map
     "C-n" 'company-select-next
     "C-p" 'company-select-previous))

  (use-package company-statistics
    :hook (company-mode . company-statistics-mode)
    :init
    (setq company-statistics-file (concat private/local-directory "company-statistics-cache.el")))
#+END_SRC
* Projectile
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:10]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (setq projectile-sort-order 'recentf
          projectile-cache-file (concat private/local-directory "projectile.cache")
          projectile-known-projects-file (concat private/local-directory "projectile-bookmarks.eld"))
    (projectile-mode +1))
#+END_SRC
** counsel-projectile
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:29]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :after projectile
    :general
    (general-define-key
     [remap projectile-find-file]        #'counsel-projectile-find-file
     [remap projectile-find-dir]         #'counsel-projectile-find-dir
     [remap projectile-switch-to-buffer] #'counsel-projectile-switch-to-buffer
     [remap projectile-grep]             #'counsel-projectile-grep
     [remap projectile-ag]               #'counsel-projectile-ag
     [remap projectile-switch-project]   #'counsel-projectile-switch-project)
    (private/leader
     "/" #'counsel-projectile-rg))
#+END_SRC
* Version Control
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:54]
:END:
** magit
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:54]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
    (setq magit-repository-directories '(("~/Projects/" . 2)))
    :general
    (private/leader
     "gs" 'magit-status
     "gi" 'magit-init
     "gl" 'magit-log-buffer-file))
#+END_SRC
** evil-magit
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:55]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :after magit)
#+END_SRC
** gitconfig-mode and gitignore-mode
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 18:08]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package gitconfig-mode
    :mode "/\\.?git/?config$"
    :mode "/\\.gitmodules$")

  (use-package gitignore-mode
    :mode "/\\.gitignore$")
#+END_SRC
** diff-hl
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 18:11]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :hook ((text-mode prog-mode conf-mode) . diff-hl-mode)
    :config
    (eval-after-load 'magit
      (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)))

  (use-package diff-hl-flydiff
    :ensure diff-hl
    :after diff-hl
    :config
    (diff-hl-flydiff-mode)

    (defun +vcs|enable-diff-hl-flydiff-mode (&rest ignore)
      (diff-hl-flydiff-mode t))

    (defun +vcs|disable-diff-hl-flydiff-mode (&rest ignore)
      (diff-hl-flydiff-mode -1))

    (eval-after-load 'company
      (progn
        (add-hook 'company-completion-started-hook '+vcs|disable-diff-hl-flydiff-mode)
        (add-hook 'company-completion-finished-hook '+vcs|enable-diff-hl-flydiff-mode)
        (add-hook 'company-completion-cancelled-hook '+vcs|enable-diff-hl-flydiff-mode))))
#+END_SRC
* Org
Let's include a newer version of org-mode than the one that is built in. We're going
to manually remove the org directories from the load path, to ensure the version we
want is prioritized instead.

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :pin org
  :defer t)

;; Ensure ELPA org is prioritized above built-in org.
(require 'cl)
(setq load-path (remove-if (lambda (x) (string-match-p "org$" x)) load-path))
#+END_SRC
