#+TITLE: Emacs Literate Configuration
#+PROPERTY: header-args :tangle yes :results silent

* About this file
This is an Emacs literate configuration template. It contains the basic structure
of a literate config along with some optimizations to ensure a fast load time.

* Personal Information
Let's set some variables with basic user information.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Yiming Chen"
      user-mail-address "dsdshcym@gmail.com")
#+END_SRC
* Constants
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:29]
:END:
#+BEGIN_SRC emacs-lisp
  (setq +emacs-directory (file-truename user-emacs-directory))
  (setq +local-directory (concat +emacs-directory ".local/"))
  (setq +packages-directory (concat +local-directory "packages/"))
#+END_SRC
* Emacs Initialization
** Settings
We're going to increase the gc-cons-threshold to a very high number to decrease the load and compile time.
We'll lower this value significantly after initialization has completed. We don't want to keep this value
too high or it will result in long GC pauses during normal usage.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq gc-cons-threshold 402653184
          gc-cons-percentage 0.6))

  (defun +set-gc-cons-variables ()
    (setq gc-cons-threshold 16777216
          gc-cons-percentage 0.1))

  (add-hook 'after-init-hook #'+set-gc-cons-variables)
#+END_SRC

Disable certain byte compiler warnings to cut down on the noise. This is a personal choice and can be removed
if you would like to see any and all byte compiler warnings.

#+BEGIN_SRC emacs-lisp
(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC
** Package Management
*** Package Settings
We're going to set the =load-path= ourselves and avoid calling =(package-initilize)= (for
performance reasons) so we need to set =package--init-file-ensured= to true to tell =package.el=
to not automatically call it on our behalf. Additionally we're setting
=package-enable-at-startup= to nil so that packages will not automatically be loaded for us since
=use-package= will be handling that.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-prefer-newer t
          package-user-dir (expand-file-name "elpa" +packages-directory)
          package--init-file-ensured t
          package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t)))
#+END_SRC
*** Manually Set Load Path
We're going to set the load path ourselves so that we don't have to call =package-initialize= at
runtime and incur a large performance hit. This load-path will actually be faster than the one
created by =package-initialize= because it appends the elpa packages to the end of the load path.
Otherwise any time a builtin package was required it would have to search all of third party paths
first.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+END_SRC
*** Initialize Package Management
Next we are going to require =package.el= and add our additional package archives, 'melpa' and 'org'.
Afterwards we need to initialize our packages and then ensure that =use-package= is installed, which
we promptly install if it's missing. Finally we load =use-package= and tell it to always install any
missing packages.

Note that this entire block is wrapped in =eval-when-compile=. The effect of this is to perform all
of the package initialization during compilation so that when byte compiled, all of this time consuming
code is skipped. This can be done because the result of byte compiling =use-package= statements results
in the macro being fully expanded at which point =use-package= isn't actually required any longer.

Since the code is automatically compiled during runtime, if the configuration hasn't already been
previously compiled manually then all of the package initialization will still take place at startup.

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'package)

    (unless (assoc-default "melpa" package-archives)
      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
    (unless (assoc-default "org" package-archives)
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))

    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t))
#+END_SRC
** Server
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 15:43]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package server
    :init
    (server-start))
#+END_SRC
* Emacs Configurations
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:40]
:END:
** Custom variables
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:40]
:END:
Do not clutter =init.el= please.
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" +local-directory))
#+END_SRC
** UI
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:59]
:END:
*** Reaonable default
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:00]
:END:
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (tooltip-mode -1)
  (setq mouse-highlight nil)
  (setq scroll-conservatively 0)
  (setq column-number-mode t)
  (setq-default cursor-in-non-selected-windows nil)
  (setq x-underline-at-descent-line t)
  (setq x-stretch-cursor t)
  (setq frame-resize-pixelwise t)
  (setq inhibit-startup-screen t)
#+END_SRC
*** Theme
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:01]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :init
    (setq solarized-use-variable-pitch nil)
    (setq solarized-scale-org-headlines nil)
    (load-theme 'solarized-dark t))
#+END_SRC
*** Fonts
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:02]
:END:
#+BEGIN_SRC emacs-lisp
  (setq +main-font (font-spec :family "Iosevka" :size 14))
  (setq +cjk-font (font-spec :family "Sarasa Mono SC"))
  (setq +emoji-font (font-spec :family "Apple Color Emoji"))

  (set-face-attribute 'default nil :font +main-font)
  (set-fontset-font t 'unicode +emoji-font)

  (dolist (charset '(kana han cjk-misc bopomofo))
      (set-fontset-font (frame-parameter nil 'font) charset +cjk-font))
#+END_SRC
**** JIT optimizations
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:18]
:END:
#+BEGIN_SRC emacs-lisp
  (setq-default
   jit-lock-defer-time nil
   jit-lock-stealth-nice 0.1
   jit-lock-stealth-time 0.2
   jit-lock-stealth-verbose nil)
#+END_SRC
**** Ligature
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 16:15]
:END:
#+BEGIN_SRC emacs-lisp
  (setq prettify-symbols-unprettify-at-point t)
  (add-hook 'text-mode-hook #'setup-ligatures)
  (add-hook 'prog-mode-hook #'setup-ligatures)
  (global-prettify-symbols-mode +1)

  (defun setup-ligatures ()
    (setq prettify-symbols-alist
          (append prettify-symbols-alist
                  '(
                    ;; Double-ended hyphen arrows ----------------
                    ("<->" . #Xe100)
                    ("<-->" . #Xe101)
                    ("<--->" . #Xe102)
                    ("<---->" . #Xe103)
                    ("<----->" . #Xe104)

                    ;; Double-ended equals arrows ----------------
                    ("<=>" . #Xe105)
                    ("<==>" . #Xe106)
                    ("<===>" . #Xe107)
                    ("<====>" . #Xe108)
                    ("<=====>" . #Xe109)

                    ;; Double-ended asterisk operators ----------------
                    ("<**>" . #Xe10a)
                    ("<***>" . #Xe10b)
                    ("<****>" . #Xe10c)
                    ("<*****>" . #Xe10d)

                    ;; HTML comments ----------------
                    ("<!--" . #Xe10e)
                    ("<!---" . #Xe10f)

                    ;; Three-char ops with discards ----------------
                    ("<$" . #Xe110)
                    ("<$>" . #Xe111)
                    ("$>" . #Xe112)
                    ("<." . #Xe113)
                    ("<.>" . #Xe114)
                    (".>" . #Xe115)
                    ("<*" . #Xe116)
                    ("<*>" . #Xe117)
                    ("*>" . #Xe118)
                    ("<\\" . #Xe119)
                    ("<\\>" . #Xe11a)
                    ("\\>" . #Xe11b)
                    ("</" . #Xe11c)
                    ("</>" . #Xe11d)
                    ("/>" . #Xe11e)
                    ("<\"" . #Xe11f)
                    ("<\">" . #Xe120)
                    ("\">" . #Xe121)
                    ("<'" . #Xe122)
                    ("<'>" . #Xe123)
                    ("'>" . #Xe124)
                    ("<^" . #Xe125)
                    ("<^>" . #Xe126)
                    ("^>" . #Xe127)
                    ("<&" . #Xe128)
                    ("<&>" . #Xe129)
                    ("&>" . #Xe12a)
                    ("<%" . #Xe12b)
                    ("<%>" . #Xe12c)
                    ("%>" . #Xe12d)
                    ("<@" . #Xe12e)
                    ("<@>" . #Xe12f)
                    ("@>" . #Xe130)
                    ("<#" . #Xe131)
                    ("<#>" . #Xe132)
                    ("#>" . #Xe133)
                    ("<+" . #Xe134)
                    ("<+>" . #Xe135)
                    ("+>" . #Xe136)
                    ("<-" . #Xe137)
                    ("<->" . #Xe138)
                    ("->" . #Xe139)
                    ("<!" . #Xe13a)
                    ("<!>" . #Xe13b)
                    ("!>" . #Xe13c)
                    ("<?" . #Xe13d)
                    ("<?>" . #Xe13e)
                    ("?>" . #Xe13f)
                    ("<|" . #Xe140)
                    ("<|>" . #Xe141)
                    ("|>" . #Xe142)
                    ("<:" . #Xe143)
                    ("<:>" . #Xe144)
                    (":>" . #Xe145)

                    ;; Colons ----------------
                    ("::" . #Xe146)
                    (":::" . #Xe147)
                    ("::::" . #Xe148)

                    ;; Arrow-like operators ----------------
                    ("->" . #Xe149)
                    ("->-" . #Xe14a)
                    ("->--" . #Xe14b)
                    ("->>" . #Xe14c)
                    ("->>-" . #Xe14d)
                    ("->>--" . #Xe14e)
                    ("->>>" . #Xe14f)
                    ("->>>-" . #Xe150)
                    ("->>>--" . #Xe151)
                    ("-->" . #Xe152)
                    ("-->-" . #Xe153)
                    ("-->--" . #Xe154)
                    ("-->>" . #Xe155)
                    ("-->>-" . #Xe156)
                    ("-->>--" . #Xe157)
                    ("-->>>" . #Xe158)
                    ("-->>>-" . #Xe159)
                    ("-->>>--" . #Xe15a)
                    (">-" . #Xe15b)
                    (">--" . #Xe15c)
                    (">>-" . #Xe15d)
                    (">>--" . #Xe15e)
                    (">>>-" . #Xe15f)
                    (">>>--" . #Xe160)
                    ("=>" . #Xe161)
                    ("=>=" . #Xe162)
                    ("=>==" . #Xe163)
                    ("=>>" . #Xe164)
                    ("=>>=" . #Xe165)
                    ("=>>==" . #Xe166)
                    ("=>>>" . #Xe167)
                    ("=>>>=" . #Xe168)
                    ("=>>>==" . #Xe169)
                    ("==>" . #Xe16a)
                    ("==>=" . #Xe16b)
                    ("==>==" . #Xe16c)
                    ("==>>" . #Xe16d)
                    ("==>>=" . #Xe16e)
                    ("==>>==" . #Xe16f)
                    ("==>>>" . #Xe170)
                    ("==>>>=" . #Xe171)
                    ("==>>>==" . #Xe172)
                    (">=" . #Xe173)
                    (">==" . #Xe174)
                    (">>=" . #Xe175)
                    (">>==" . #Xe176)
                    (">>>=" . #Xe177)
                    (">>>==" . #Xe178)
                    ("<-" . #Xe179)
                    ("-<-" . #Xe17a)
                    ("--<-" . #Xe17b)
                    ("<<-" . #Xe17c)
                    ("-<<-" . #Xe17d)
                    ("--<<-" . #Xe17e)
                    ("<<<-" . #Xe17f)
                    ("-<<<-" . #Xe180)
                    ("--<<<-" . #Xe181)
                    ("<--" . #Xe182)
                    ("-<--" . #Xe183)
                    ("--<--" . #Xe184)
                    ("<<--" . #Xe185)
                    ("-<<--" . #Xe186)
                    ("--<<--" . #Xe187)
                    ("<<<--" . #Xe188)
                    ("-<<<--" . #Xe189)
                    ("--<<<--" . #Xe18a)
                    ("-<" . #Xe18b)
                    ("--<" . #Xe18c)
                    ("-<<" . #Xe18d)
                    ("--<<" . #Xe18e)
                    ("-<<<" . #Xe18f)
                    ("--<<<" . #Xe190)
                    ("<=" . #Xe191)
                    ("=<=" . #Xe192)
                    ("==<=" . #Xe193)
                    ("<<=" . #Xe194)
                    ("=<<=" . #Xe195)
                    ("==<<=" . #Xe196)
                    ("<<<=" . #Xe197)
                    ("=<<<=" . #Xe198)
                    ("==<<<=" . #Xe199)
                    ("<==" . #Xe19a)
                    ("=<==" . #Xe19b)
                    ("==<==" . #Xe19c)
                    ("<<==" . #Xe19d)
                    ("=<<==" . #Xe19e)
                    ("==<<==" . #Xe19f)
                    ("<<<==" . #Xe1a0)
                    ("=<<<==" . #Xe1a1)
                    ("==<<<==" . #Xe1a2)
                    ("=<" . #Xe1a3)
                    ("==<" . #Xe1a4)
                    ("=<<" . #Xe1a5)
                    ("==<<" . #Xe1a6)
                    ("=<<<" . #Xe1a7)
                    ("==<<<" . #Xe1a8)

                    ;; Monadic operators ----------------
                    (">=>" . #Xe1a9)
                    (">->" . #Xe1aa)
                    (">-->" . #Xe1ab)
                    (">==>" . #Xe1ac)
                    ("<=<" . #Xe1ad)
                    ("<-<" . #Xe1ae)
                    ("<--<" . #Xe1af)
                    ("<==<" . #Xe1b0)

                    ;; Composition operators ----------------
                    (">>" . #Xe1b1)
                    (">>>" . #Xe1b2)
                    ("<<" . #Xe1b3)
                    ("<<<" . #Xe1b4)

                    ;; Lens operators ----------------
                    (":+" . #Xe1b5)
                    (":-" . #Xe1b6)
                    (":=" . #Xe1b7)
                    ("+:" . #Xe1b8)
                    ("-:" . #Xe1b9)
                    ("=:" . #Xe1ba)
                    ("=^" . #Xe1bb)
                    ("=+" . #Xe1bc)
                    ("=-" . #Xe1bd)
                    ("=*" . #Xe1be)
                    ("=/" . #Xe1bf)
                    ("=%" . #Xe1c0)
                    ("^=" . #Xe1c1)
                    ("+=" . #Xe1c2)
                    ("-=" . #Xe1c3)
                    ("*=" . #Xe1c4)
                    ("/=" . #Xe1c5)
                    ("%=" . #Xe1c6)

                    ;; Logical ----------------
                    ("/\\" . #Xe1c7)
                    ("\\/" . #Xe1c8)

                    ;; Semigroup/monoid operators ----------------
                    ("<>" . #Xe1c9)
                    ("<+" . #Xe1ca)
                    ("<+>" . #Xe1cb)
                    ("+>" . #Xe1cc)
                    ))))
#+END_SRC
*** Modeline
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:11]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :init
    (sml/setup))
#+END_SRC
*** Line Numbers
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:15]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package display-line-numbers
    :ensure nil
    :if (>= emacs-major-version 26)
    :hook (prog-mode . display-line-numbers-mode)
    :init
    (setq-default display-line-numbers-width 3)
    (setq display-line-numbers-type 'visual))
#+END_SRC
** Core
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:51]
:END:
*** Encoding
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:51]
:END:
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))
  (prefer-coding-system        'utf-8)
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq locale-coding-system   'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)
#+END_SRC
*** Save Minibuffer history iva savehist-mode
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:52]
:END:
#+BEGIN_SRC emacs-lisp
  (setq history-length 500
        savehist-file (concat +local-directory "savehist")
        savehist-save-minibuffer-history t
        savehist-autosave-interval nil ; save on kill only
        savehist-additional-variables '(kill-ring search-ring regexp-search-ring))

  (savehist-mode 1)
#+END_SRC
*** Save Cursor position via save-place-mode
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:54]
:END:
#+BEGIN_SRC emacs-lisp
  (setq save-place-file (concat +local-directory "saveplace"))
  (save-place-mode 1)
#+END_SRC
*** Auto Revert mode
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:03]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :init
    (global-auto-revert-mode))
#+END_SRC
*** Auto Backup
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:58]
:END:
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . ,(concat +local-directory "backups/"))))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-list-file-prefix (concat +local-directory "auto-save-list/.saves-"))
  (setq auto-save-file-name-transforms `((".*" ,(concat +local-directory "auto-save-list/") t)))
#+END_SRC
*** Rencentf mode
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:06]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :hook (after-init . recentf-mode)
    :init
    (setq recentf-save-file (concat +local-directory "recentf")
          recentf-max-saved-items 1000
          recentf-filename-handlers '(file-truename)
          recentf-auto-cleanup 'never)
    :config
    (add-to-list 'recentf-exclude (file-truename +local-directory))
    (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'"))
#+END_SRC
*** Indentations
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:26]
:END:
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 2)
#+END_SRC
* Keybindings
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:55]
:END:
** General
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:14]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)

    (general-create-definer
      +leader
      :prefix "SPC"
      :non-normal-prefix "M-m"
      :states '(motion insert emacs))

    (general-create-definer
      +enable-leader
      :status '(motion normal visual)
      "SPC" nil)

    (general-create-definer
      +local-leader
      :prefix "'"
      :non-normal-prefix "M-m m"
      :states '(motion insert emacs))

    (general-define-key
     :keymaps 'input-decode-map
     "C-h" [backspace]))
#+END_SRC
*** Truly escape key
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:15]
:END:
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps '(minibuffer-local-map
              minibuffer-local-ns-map
              minibuffer-local-completion-map
              minibuffer-local-must-match-map
              minibuffer-local-isearch-map
              read-expression-map)
   [escape] 'abort-recursive-edit)
#+END_SRC
** Evil
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 15:53]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-symbol-word-search t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-visual-char-semi-exclusive t)
    (evil-mode)
    :config
    (evil-select-search-module 'evil-search-module 'evil-search)
    (mapc #'evil-declare-ignore-repeat
          '(kill-this-buffer
            ido-kill-buffer
            outline-next-visible-heading
            outline-previous-visible-heading
            outline-up-heading
            evil-visualstar/begin-search-forward
            evil-visualstar/begin-search-backward
            org-export-dispatch
            org-end-of-line
            org-beginning-of-line
            org-open-at-point
            org-cycle
            org-shifttab
            org-ctrl-c-ctrl-c
            org-next-visible-heading
            org-previous-visible-heading
            split-window-below
            split-window-below-and-focus
            split-window-right
            split-window-right-and-focus
            evilmi-jump-items))
    (defalias 'evil-visual-update-x-selection 'ignore)

    (setq evil-normal-state-cursor '(box "DarkGoldenrod2")
          evil-insert-state-cursor '((bar . 2) "chartreuse3")
          evil-emacs-state-cursor '(box "SkyBlue2")
          evil-replace-state-cursor '((hbar . 2) "chocolate")
          evil-visual-state-cursor '((hbar . 2) "gray")
          evil-motion-state-cursor '(box "plum3"))

    (setq-default evil-shift-width 2)

    (evil-define-motion evil-goto-line (count)
      "Go to the first non-blank character of line COUNT.
  By default the (truly) last line."
      :jump t
      :type line
      (if (null count)
          (goto-char (buffer-size))
        (goto-char (point-min))
        (forward-line (1- count)))
      (evil-first-non-blank)))
#+END_SRC
*** evil-surround
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 14:42]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :commands (global-evil-surround-mode
               evil-surround-edit
               evil-Surround-edit
               evil-surround-region)
    :config (global-evil-surround-mode 1)
    :general
    (vmap "s" #'evil-surround-region)
    (omap
      "s" #'evil-surround-edit
      "S" #'evil-Surround-edit))
#+END_SRC
*** evil-commentary
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:07]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :commands (evil-commentary evil-commentary-yank evil-commentary-line)
    :config (evil-commentary-mode 1)
    :general
    (mmap
     "gc" #'evil-commentary))
#+END_SRC
*** evil-exchange
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:19]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-exchange
    :after evil
    :config (evil-exchange-install))
#+END_SRC
*** evil-indent-plus
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:21]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-indent-plus
    :after evil
    :config (evil-indent-plus-default-bindings))
#+END_SRC
*** evil-matchit
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:21]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-matchit
    :after evil
    :config (global-evil-matchit-mode))
#+END_SRC
*** evil-numbers
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:22]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
    :commands (evil-numbers/inc-at-pt evil-numbers/inc-at-pt)
    :general
    (mmap
     "C-a" #'evil-numbers/inc-at-pt
     "C-x" #'evil-numbers/dec-at-pt))
#+END_SRC
*** evil-visualstar
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:22]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-visualstar
    :commands (evil-visualstar/begin-search-forward
               evil-visualstar/begin-search-backward)
    :config (global-evil-visualstar-mode)
    :general
    (vmap
     "*" #'evil-visualstar/begin-search-forward
     "#" #'evil-visualstar/begin-search-backward))
#+END_SRC
*** evil-lion
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:23]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-lion
    :after evil
    :config (evil-lion-mode))
#+END_SRC
** Leader Keys
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:26]
:END:
#+BEGIN_SRC emacs-lisp
  (+leader
   "" nil

   "SPC" #'execute-extended-command

   "u" #'universal-argument

   ;; File
   "ff" #'find-file
   "fel" #'find-library
   "fS" #'evil-write-all
   "fs" #'save-buffer
   "fvd" #'add-dir-local-variable
   "fvf" #'add-file-local-variable
   "fvp" #'add-file-local-variable-prop-line

   ;; Buffer
   "bb" #'switch-to-buffer
   "bd" #'kill-this-buffer
   "bw" #'read-only-mode
   "TAB" (lambda () (interactive) (switch-to-buffer nil))

   ;; Jumping
   "sj" #'imenu

   ;; Help
   "h" (general-simulate-key "<f1>")

   ;; Themes
   "Ts"  #'load-theme

   "en"  #'next-error
   "ep"  #'previous-error

   "w" evil-window-map

   "qf" #'delete-frame
   "qq" #'save-buffers-kill-terminal)
#+END_SRC
** macOS specific keybindings
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:36]
:END:
#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'meta
        mac-option-modifier  'alt)
#+END_SRC
* Editing/Jumping
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:06]
:END:
** avy
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:29]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :commands (avy-goto-char-2 avy-goto-line)
    :config
    (setq avy-all-windows nil
          avy-background t)
    :general
    (+leader
      "jj" #'avy-goto-char-2
      "jl" #'avy-goto-line))
#+END_SRC
** undo-tree
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 16:52]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :init
    (setq undo-tree-history-directory-alist `(("." . ,(concat +local-directory "undo-tree-history"))))
    (setq undo-tree-auto-save-history t)
    (setq undo-tree-visualizer-timestamps t)
    (global-undo-tree-mode)
    :general
    (+leader
      "au" #'undo-tree-visualize))
#+END_SRC
* Window Management
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 14:40]
:END:
** winner mode
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 14:40]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :init
    (winner-mode)
    :general
    (+leader
     "wU" 'winner-redo
     "wu" 'winner-undo))
#+END_SRC
* macOS
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:39]
:END:
** exec-path-from-shell
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:39]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :init
    (exec-path-from-shell-initialize))
#+END_SRC
** dash-at-point
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:41]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package dash-at-point
    :general
    (+leader
     "dd" 'dash-at-point
     "dD" 'dash-at-point-with-docset))
#+END_SRC
** osx-dictionary
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:43]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package osx-dictionary
    :commands (osx-dictionary-search-pointer
               osx-dictionary-search-input
               osx-dictionary-cli-find-or-recompile)
    :general
    (+leader
     "dw" 'osx-dictionary-search-pointer
     "dW" 'osx-dictionary-search-input)
    (nmap
     :keymaps 'osx-dictionary-mode-map
     "q" 'osx-dictionary-quit
     "r" 'osx-dictionary-read-word
     "s" 'osx-dictionary-search-input
     "o" 'osx-dictionary-open-dictionary.app))
#+END_SRC
** transparent title-bar
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 16:12]
:END:
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . 'nil))
#+END_SRC
* Ivy
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:30]
:END:
** Ivy itself
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:31]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :init
    (add-hook 'after-init-hook #'ivy-mode)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-truncate-lines nil)
    (setq ivy-re-builders-alist
          '((t . ivy--regex-plus)))
    :general
    (general-define-key
     :keymaps 'ivy-minibuffer-map
     [escape] 'minibuffer-keyboard-quit)
    (+local-leader
     :keymaps 'ivy-occur-grep-mode-map
     "w" #'ivy-wgrep-change-to-wgrep-mode))
#+END_SRC
** Counsel
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:32]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :after ivy
    :config (counsel-mode)
    :general
    (+leader
     "iu" #'counsel-unicode-char
     "ry" #'counsel-yank-pop
     "rm" #'counsel-mark-ring))
#+END_SRC
** Swiper
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:34]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :after ivy
    :general
    (+leader
     "ss" #'swiper))
#+END_SRC
** Sort M-x candidates using smex
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:36]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :after ivy
    :init
    (setq-default smex-history-length 32
                  smex-save-file (concat +local-directory ".smex-items")))
#+END_SRC
** ivy-rich
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 16:37]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :after ivy
    :init
    (setq ivy-virtual-abbreviate 'full
          ivy-rich-switch-buffer-align-virtual-buffer t)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer))
#+END_SRC
* Dired
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 15:48]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (setq dired-dwim-target t
          dired-listing-switches "-alh"
          global-auto-revert-non-file-buffers t
          image-dired-dir (concat +local-directory "image-dired/")
          image-dired-db-file (concat image-dired-dir "image-dired/db.el")
          image-dired-gallery-dir (concat image-dired-dir "gallery/")
          image-dired-temp-image-file (concat image-dired-dir "temp-image")
          image-dired-temp-rotate-image-file (concat image-dired-dir "temp-rotate-image"))
    :general
    (+leader
     "fj" 'dired-jump
     "fJ" 'dired-jump-other-window)
    (+enable-leader
     :keymaps 'dired-mode-map))

  (use-package dired-x
    :ensure nil
    :commands (dired-jump
               dired-jump-other-window))

  (use-package dired-quick-sort
    :init
    (dired-quick-sort-setup))

  (use-package wdired
    :ensure nil
    :general
    (nmap
      :keymaps 'dired-mode-map
      "w" 'wdired-change-to-wdired-mode))
#+END_SRC
* Auto Completion
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 18:16]
:END:
** company
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 18:16]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package company
    :init
    (setq company-idle-delay nil
          company-require-match 'never
          company-tooltip-align-annotations t
          company-dabbrev-ignore-case nil
          company-dabbrev-downcase nil)
    :config
    (global-company-mode)
    (setq company-backends
          '(company-keywords
            company-files
            company-capf
            company-dabbrev-code
            company-dabbrev))
    :general
    (general-define-key
     :keymaps 'company-active-map
     "C-n" 'company-select-next
     "C-p" 'company-select-previous))

  (use-package company-statistics
    :hook (company-mode . company-statistics-mode)
    :init
    (setq company-statistics-file (concat +local-directory "company-statistics-cache.el")))
#+END_SRC
** smartparens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :init
       (smartparens-global-mode)
       :config
       (show-smartparens-mode)
       :general
       (imap
	 "C-s" #'sp-forward-slurp-sexp
	 "S-C-s" #'sp-forward-barf-sexp
	 "M-s" #'sp-backward-slurp-sexp
	 "S-M-s" #'sp-backward-barf-sexp))
   #+END_SRC
* Projectile
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:10]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (setq projectile-sort-order 'recentf
          projectile-cache-file (concat +local-directory "projectile.cache")
          projectile-known-projects-file (concat +local-directory "projectile-bookmarks.eld")
          projectile-completion-system 'ivy)
    :config
    (projectile-mode +1)
    :general
    (+leader
      "p!" 'projectile-run-shell-command-in-root
      "p&" 'projectile-run-async-shell-command-in-root
      "p%" 'projectile-replace-regexp
      "pa" 'projectile-toggle-between-implementation-and-test
      "pb" 'projectile-switch-to-buffer
      "pc" 'projectile-compile-project
      "pd" 'projectile-find-dir
      "pD" 'projectile-dired
      "pf" 'projectile-find-file
      "pF" 'projectile-find-file-dwim
      "pg" 'projectile-find-tag
      "pG" 'projectile-regenerate-tags
      "pI" 'projectile-invalidate-cache
      "pk" 'projectile-kill-buffers
      "pp" 'projectile-switch-project
      "pR" 'projectile-replace
      "pT" 'projectile-test-project))
#+END_SRC
** counsel-projectile
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:29]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :after projectile
    :general
    (general-define-key
     [remap projectile-find-file]        #'counsel-projectile-find-file
     [remap projectile-find-dir]         #'counsel-projectile-find-dir
     [remap projectile-switch-to-buffer] #'counsel-projectile-switch-to-buffer
     [remap projectile-grep]             #'counsel-projectile-grep
     [remap projectile-ag]               #'counsel-projectile-ag
     [remap projectile-switch-project]   #'counsel-projectile-switch-project)
    (+leader
     "/" #'counsel-projectile-rg))
#+END_SRC
* Version Control
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:54]
:END:
** magit
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:54]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
    (setq magit-repository-directories '(("~/Projects/" . 2)))
    :general
    (+enable-leader
     :keymaps
     '(magit-mode-map
       magit-status-mode-map
       magit-diff-mode-map
       magit-process-mode-map
       magit-blame-mode-map
       magit-log-mode-map))
    (+leader
     "gs" 'magit-status
     "gi" 'magit-init
     "gl" 'magit-log-buffer-file))
#+END_SRC
** evil-magit
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 17:55]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :after magit)
#+END_SRC
** gitconfig-mode and gitignore-mode
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 18:08]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package gitconfig-mode
    :mode "/\\.?git/?config$"
    :mode "/\\.gitmodules$")

  (use-package gitignore-mode
    :mode "/\\.gitignore$")
#+END_SRC
** diff-hl
:PROPERTIES:
:CREATED:  [2018-02-28 Wed 18:11]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :hook ((text-mode prog-mode conf-mode) . diff-hl-mode)
    :config
    (eval-after-load 'magit
      (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)))

  (use-package diff-hl-flydiff
    :ensure diff-hl
    :after diff-hl
    :config
    (diff-hl-flydiff-mode)

    (defun +vcs|enable-diff-hl-flydiff-mode (&rest ignore)
      (diff-hl-flydiff-mode t))

    (defun +vcs|disable-diff-hl-flydiff-mode (&rest ignore)
      (diff-hl-flydiff-mode -1))

    (eval-after-load 'company
      (progn
        (add-hook 'company-completion-started-hook '+vcs|disable-diff-hl-flydiff-mode)
        (add-hook 'company-completion-finished-hook '+vcs|enable-diff-hl-flydiff-mode)
        (add-hook 'company-completion-cancelled-hook '+vcs|enable-diff-hl-flydiff-mode))))
#+END_SRC
* Spell Checking
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 16:03]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :hook (text-mode . flyspell-mode)
    :hook (prog-mode . flyspell-prog-mode)
    :init
    (setq ispell-program-name (executable-find "hunspell")
          ispell-dictionary "en_US"
          ispell-local-dictionary-alist '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US,en_US-med") nil utf-8))))

  (use-package flyspell-correct-ivy
    :after flyspell-correct)

  (use-package flyspell-correct
    :commands (flyspell-correct-word-generic
               flyspell-correct-previous-word-generic)
    :general
    (nmap "C-;" #'flyspell-correct-previous-word-generic))
#+END_SRC
* Syntax Checking
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 16:27]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :commands (flycheck-mode flycheck-list-errors flycheck-buffer)
    :config
    ;; Emacs feels snappier without checks on newline
    (setq flycheck-check-syntax-automatically '(save idle-change mode-enabled)))
#+END_SRC
* Languages
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 14:51]
:END:
** Chinese
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 15:46]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package fcitx
    :init
    (fcitx-evil-turn-on))

  (use-package pangu-spacing
    :init
    (setq pangu-spacing-real-insert-separtor t)
    (global-pangu-spacing-mode 1))

  (use-package ace-pinyin
    :after avy
    :config
    (ace-pinyin-global-mode t))

  (use-package evil-find-char-pinyin
    :after evil
    :config
    (evil-find-char-pinyin-mode t))
#+END_SRC
** Ruby
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 14:52]
:END:
#+BEGIN_SRC emacs-lisp :results silent
  (use-package ruby-mode
    :mode "\\.rb$"
    :mode "\\.rake$"
    :mode "\\.gemspec$"
    :mode "\\.\\(pry\\|irb\\)rc$"
    :mode "/\\(Gem\\|Cap\\|Vagrant\\|Rake\\|Pod\\|Puppet\\|Berks\\)file$"
    :interpreter "ruby"
    :hook (ruby-mode . flycheck-mode))

  (use-package inf-ruby
    :commands (inf-ruby inf-ruby-console-auto))

  (use-package company-inf-ruby
    :after inf-ruby)

  (use-package robe
    :after ruby-mode
    :hook (ruby-mode . robe-mode))

  (use-package rbenv
    :after ruby-mode
    :hook (ruby-mode . rbenv-use-corresponding)
    :config
    (global-rbenv-mode))

  (use-package bundler
    :commands (bundle-check
               bundle-install
               bundle-console
               bundle-update
               bundle-exec
               bundle-open))

  (use-package rspec-mode
    :after ruby
    :config
    (defun ruby/rspec-verify-directory (dir)
      "Launch tests in DIR directory.
  Called interactively it prompts for a directory."
      (interactive "Drspec directory: ")
      (rspec-run-single-file dir (rspec-core-options)))

    (+local-leader
     :keymaps '(rspec-mode-map rspec-verifiable-mode-map)
     "ta"    'rspec-verify-all
     "tb"    'rspec-verify
     "tc"    'rspec-verify-continue
     "td"    'ruby/rspec-verify-directory
     "te"    'rspec-toggle-example-pendingness
     "tf"    'rspec-verify-method
     "tl"    'rspec-run-last-failed
     "tm"    'rspec-verify-matching
     "tr"    'rspec-rerun
     "tt"    'rspec-verify-single
     "t~"    'rspec-toggle-spec-and-target-find-example
     "t TAB" 'rspec-toggle-spec-and-target))

  (use-package minitest)

  (use-package rubocop
    :commands (rubocop-mode)
    :hook (ruby-mode . rubocop-mode)
    :general
    (+local-leader
     :keymaps 'rubocop-mode-map
     "cd" #'rubocop-check-directory
     "cD" #'rubocop-autocorrect-directory
     "cf" #'rubocop-check-current-file
     "cF" #'rubocop-autocorrect-current-file
     "cp" #'rubocop-check-project
     "cP" #'rubocop-autocorrect-project))

  (use-package rake
    :commands (rake rake-find-task)
    :init
    (setq rake-cache-file (concat +local-directory "rake.cache"))
    (setq rake-completion-system 'default))
#+END_SRC
* Org
Let's include a newer version of org-mode than the one that is built in. We're going
to manually remove the org directories from the load path, to ensure the version we
want is prioritized instead.

Ensure ELPA org is prioritized above built-in org.
#+BEGIN_SRC emacs-lisp
(require 'cl)
(setq load-path (remove-if (lambda (x) (string-match-p "org$" x)) load-path))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :pin org
    :config
    (add-hook 'org-mode-hook 'auto-fill-mode)

    (setq org-directory "~/Org")
    (setq org-default-notes-file "~/Org/refile.org")
    (setq org-publish-timestamp-directory (concat +local-directory
                                                  ".org-timestamps/")
          org-imenu-depth 9
          org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
            (sequence "PENDING(p)" "|" "MERGED(m!/!)" "CANCELLED(c@/!)")
            (sequence "WAITING(w@/!)" "SOMEDAY(s@/!)" "|" "CANCELLED(c@/!)")))
    (setq org-return-follows-link t)

    (setq org-enforce-todo-dependencies nil)
    (setq org-yank-adjusted-subtrees t)
    (setq org-blank-before-new-entry '((heading . nil)
                                       (plain-list-item . nil)))

    (setq org-modules '(org-crypt
                        org-id
                        org-protocol))
    (eval-after-load 'org
      '(org-load-modules-maybe t))

    (setq org-indirect-buffer-display 'current-window)

    (setq org-cycle-level-after-item/entry-creation nil)

    ;; -----------------------------
    ;; Refile
    ;; -----------------------------

    (defun +org/opened-buffer-files ()
      "Return the list of files currently opened in emacs"
      (delq nil
            (mapcar (lambda (x)
                      (if (and (buffer-file-name x)
                               (string-match "\\.org$"
                                             (buffer-file-name x)))
                          (buffer-file-name x)))
                    (buffer-list))))
    (setq org-refile-targets '((+org/opened-buffer-files :maxlevel . 9)))
    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-allow-creating-parent-nodes 'confirm)
    (setq org-refile-use-cache t)
    (run-with-idle-timer 300 t (lambda ()
                                 (org-refile-cache-clear)
                                 (org-refile-get-targets)))

    (setq org-log-into-drawer "LOGBOOK")
    (setq org-log-reschedule 'note)
    (setq org-log-redeadline 'note)
    (setq org-log-done 'time)
    (setq org-log-note-headings
          '((done . "CLOSING NOTE %t")
            (state . "State %-12s from %-12S %t")
            (note . "Note taken on %t")
            (reschedule . "Rescheduled from %S to %s on %t")
            (delschedule . "Not scheduled, was %S on %t")
            (redeadline . "New deadline from %S to %s on %t")
            (deldeadline . "Removed deadline, was %S on %t")
            (refile . "Refiled on %t")
            (clock-out . "")))

    ;; -----------------------------
    ;; Tags
    ;; -----------------------------
    (setq org-tag-alist '((:startgroup)
                          ("@SCHOOL" . ?s)
                          ("@HOME" . ?h)
                          ("@WORK" . ?w)
                          (:endgroup)
                          ("TOWATCH" . ?W)
                          ("TOREAD" . ?R)))
    (setq org-tags-exclude-from-inheritance '("elfeed" "Book"))

    ;; -----------------------------
    ;; Archive
    ;; -----------------------------
    (setq org-archive-location (concat org-directory "/Archived/" "%s_archive::"))

    ;; -----------------------------
    ;; Link
    ;; -----------------------------
    (defun +remove-nil-link-from-org-stored-links (&rest args)
      "org-link-fontify-links-to-this-file cannot handle (nil \"\")"
      (setq org-stored-links
            (remove-if (lambda (x) (eq nil (car x))) org-stored-links)))
    (advice-add #'org-insert-link :before #'+remove-nil-link-from-org-stored-links)

    (defun +remove-dups-in-org-stored-links (&rest args)
      (delete-dups org-stored-links))
    (advice-add #'org-insert-link :before #'remove-dups-in-org-stored-links)
    :general
    (nmap
      :keymaps '(org-mode-map)
      "<return>" #'org-open-at-point)
    (+leader
      "op" #'org-pomodoro
      "oa" #'org-agenda
      "ol" #'org-store-link
      "oL" (lambda () (interactive) (org-insert-all-links 1 "" ""))
      "ob" #'org-iswitchb
      "os" #'org-save-all-org-buffers
      "og" #'org-clock-goto
      "oo" #'org-clock-out
      "oc" #'org-capture
      "oC" #'org-capture-goto-last-stored
      "oj" (lambda () (interactive) (org-refile '(4)))
      "oJ" #'org-refile-goto-last-stored)
    (+local-leader
      :keymaps '(org-mode-map)
      "cc" #'org-clock-cancel
      "ci" #'org-clock-in
      "co" #'org-clock-out
      "cr" #'org-resolve-clocks
      "dd" #'org-deadline
      "ds" #'org-schedule
      "dt" #'org-time-stamp
      "dT" #'org-time-stamp-inactive

      "e" #'org-export-dispatch

      "a" #'org-agenda

      "p" #'org-rich-yank

      "t" #'org-todo

      ;; More cycling options (timestamps, headlines, items, properties)
      "L" #'org-shiftright
      "H" #'org-shiftleft
      "J" #'org-shiftdown
      "K" #'org-shiftup

      ;; Change between TODO sets
      "C-S-l" #'org-shiftcontrolright
      "C-S-h" #'org-shiftcontrolleft
      "C-S-j" #'org-shiftcontroldown
      "C-S-k" #'org-shiftcontrolup

      ;; Subtree editing
      "sa" #'org-archive-subtree
      "sb" (lambda () (interactive) (org-tree-to-indirect-buffer 4))
      "sh" #'org-promote-subtree
      "sj" #'org-move-subtree-down
      "sk" #'org-move-subtree-up
      "sl" #'org-demote-subtree
      "sn" #'org-narrow-to-subtree
      "sN" #'widen
      "sr" #'org-refile
      "ss" #'org-sparse-tree
      "sS" #'org-sort

      ;; Multi-purpose keys
      "'"        #'org-ctrl-c-ctrl-c
      "*"        #'org-ctrl-c-star
      "<return>" #'org-ctrl-c-ret
      "-"        #'org-ctrl-c-minus
      "#"        #'org-update-statistics-cookies
      ;; attachments
      "A"        #'org-attach
      ;; insertion
      "id"       #'org-insert-drawer
      "ie"       #'org-set-effort
      "if"       #'org-footnote-new
      "il"       #'org-insert-link
      "ip"       #'org-set-property
      "is"       #'org-insert-subheading
      "it"       #'org-set-tags))
#+END_SRC
** Evil Org
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:43]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :init
    (setq evil-org-special-o/O nil)
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    :config
    (nmap
     :keymaps '(org-mode-map)
     "C-<return>" #'org-insert-heading-respect-content
     "C-S-<return>" #'org-insert-todo-heading-respect-content
     "M-<return>" (evil-org-define-eol-command org-meta-return)
     "M-S-<return>" (evil-org-define-eol-command org-insert-todo-heading)))
#+END_SRC
** Clock
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:36]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-clock
    :ensure org-plus-contrib
    :config
    (setq org-clock-mode-line-total 'current)
    ;; Show lot of clocking history so it's easy to pick items
    (setq org-clock-history-length 20)
    ;; Resume clocking task on clock-in if the clock is open
    (setq org-clock-in-resume t)
    ;; Change task state to STARTED when clocking in
    ;; (setq org-clock-in-switch-to-state 'bh/clock-in-to-next)

    ;; Save clock data and state changes and notes in the LOGBOOK drawer
    (setq org-clock-into-drawer t)
    ;; Removes clocked tasks with 0:00 duration
    (setq org-clock-out-remove-zero-time-clocks t)
    ;; Save the running clock and all clock history when exiting Emacs, load it on startup
    (setq org-clock-persist t)
    ;; Do not prompt to resume an active clock
    (setq org-clock-persist-query-resume nil)
    ;; Resume clocking task when emacs is restarted
    (org-clock-persistence-insinuate)
    (setq org-clock-persist-file (concat +local-directory
                                         "org-clock-save.el"))
    ;; Clock out when moving task to a done state
    (setq org-clock-out-when-done t)
    ;; Enable auto clock resolution for finding open clocks
    (setq org-clock-auto-clock-resolution '(when-no-clock-is-running))
    ;; Include current clocking task in clock reports
    (setq org-clock-report-include-clocking-task t)
    (setq org-clock-clocktable-default-properties
          '(:link t :maxlevel 2 :scope file :narrow 70! :compact t))
    (setq org-clock-idle-time 10)

    (defun +org-clock-cleanup ()
      (interactive)
      (+join-separated-clock-lines)
      (+add-clock-notation)
      (+org-clock-update-time-in-buffer))

    (defun +join-separated-clock-lines ()
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "\\(\\[.*\\]--\\)\n\\(\\[.*\\]\\)" nil t)
          (replace-match "\\1\\2"))))

    (defun +add-clock-notation ()
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "^\\[.*\\]--\\[.*\\]$" nil t)
          (replace-match "CLOCK: \\&"))))

    (defun +org-clock-update-time-in-buffer ()
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "CLOCK: \\[.*\\]--\\[.*\\]" nil t)
          (org-clock-update-time-maybe)))))
#+END_SRC
*** Pomodoro
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:43]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :commands (org-pomodoro))
#+END_SRC
** Agenda
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:37]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :ensure org-plus-contrib
    :commands (org-agenda-list
               org-agenda
               org-agenda-to-appt)
    :config
    (setq org-agenda-diary-file "~/Org/journal.org")
    (setq org-agenda-files '("~/Org" "~/Org/notes"  "~/Org/lists"))

    ;; Overwrite the current window with the agenda
    (setq org-agenda-window-setup 'current-window)

    (setq org-agenda-restore-windows-after-quit t)

    (setq org-agenda-span 'day)

    (setq org-agenda-clockreport-parameter-plist
          '(:link t :maxlevel 9 :fileskip0 t :narrow 70! :formula "$4=$3*(60/25);t" :compact t))

    (setq org-agenda-custom-commands
          '(("h" "Agenda and Home-related tasks"
             ((agenda "")
              (tags-todo "@HOME")))
            ("w" "@WORK"
             ((agenda ""))
             ((org-agenda-tag-filter-preset '("+@WORK"))))))

    (setq org-agenda-skip-scheduled-if-deadline-is-shown 'not-today)
    (evil-set-initial-state 'org-agenda-mode 'normal)

    (defun +org/org-agenda-refresh-appt ()
      (interactive)
      (org-agenda-to-appt t))
    (run-at-time "24:01" 3600 '+org/org-agenda-refresh-appt))

  (use-package appt
    :ensure nil
    :config
    (defun +notification (title msg &optional subtitle group-id sound)
      (interactive)
      (call-process-shell-command
       (concat "terminal-notifier"
               " -title \"" title
               "\" -message \"" msg
               (if subtitle (concat "\" -subtitle \"" subtitle))
               (if sound (concat "\" -sound \"" sound))
               (if group-id (concat "\" -group \"" group-id))
               "\" -activate " "org.gnu.Emacs"
               " -sender " "org.gnu.Emacs"
               " -timeout " "3"
               "&")))

    (defun +macos-do-not-display-is-on? ()
      (string-prefix-p "1"
                       (shell-command-to-string
                        "defaults read ~/Library/Preferences/ByHost/com.apple.notificationcenterui.plist doNotDisturb")))

    (defun +appt-display (min-to-app new-time msg)
      (if (+macos-do-not-display-is-on?)
          (appt-disp-window min-to-app new-time msg)
        (+notification "Org Agenda Appointment" msg (format "Appointment in %s minute(s)" min-to-app) "1")))

    (setq appt-disp-window-function '+appt-display)
    :general
    (nmap
     :keymaps '(org-agenda-keymap)
     "<tab>" #'org-agenda-switch-to
     "<return>" #'org-agenda-switch-to
     "i" #'org-agenda-clock-in
     "s" #'org-agenda-schedule
     "d" #'org-agenda-deadline
     "t" #'org-agenda-todo
     "j" #'org-agenda-next-line
     "k" #'org-agenda-previous-line
     "L" #'org-agenda-log-mode
     "q" #'org-agenda-quit
     "f" #'org-agenda-later
     "b" #'org-agenda-earlier
     "gr" #'org-agenda-redo
     "R" #'org-agenda-clockreport-mode
     "gj" #'org-agenda-next-line
     "gk" #'org-agenda-previous-line))
#+END_SRC
** Capture
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:39]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :ensure org-plus-contrib
    :commands (org-capture)
    :config
    (defun +org/capture-template ()
      (let ((link-to-org-tags "%(+org/link-to-org-tags \"%l\")")
            (properties "\n:PROPERTIES:\n:CREATED: %U\n:END:\n")
            (content-before (plist-get org-capture-plist :content-before))
            (content-after (plist-get org-capture-plist :content-after)))
        (concat content-before link-to-org-tags properties content-after)))

    (defun +org/link-to-org-tags (url)
      (cond
       ((not url) "")
       ((string-match-p "twitter"       url) " :Twitter:")
       ((string-match-p "solidot"       url) " :Solidot:")
       ((string-match-p "mu4e"          url) " :Email:")
       ((string-match-p "v2ex"          url) " :V2EX:")
       ((string-match-p "waerfa"        url) " :玩儿法:")
       ((string-match-p "wanqu.co"      url) " :Wanqu:")
       ((string-match-p "youtube"       url) " :YouTube:")
       ((string-match-p "bilibili"      url) " :Bilibili:")
       ((string-match-p "zhihu"         url) " :Zhihu:")
       ((string-match-p "sspai"         url) " :少数派:")
       ((string-match-p "weixin.qq.com" url) " :WeChat:")))
    (setq org-capture-templates
          '(("t" "Todo Later" entry
             (file+headline "~/Org/refile.org" "Todo Later")
             (function +org/capture-template)
             :content-before "* TODO %?")
            ("w" "Watch Later" entry
             (file+headline "~/Org/refile.org" "Watch Later")
             (function +org/capture-template)
             :content-before "* TODO %a"
             :immediate-finish t)
            ("r" "Read Later" entry
             (file+headline "~/Org/refile.org" "Read Later")
             (function +org/capture-template)
             :content-before "* TODO %a"
             :immediate-finish t)
            ("b" "Blog Thought" entry
             (file+headline "~/Org/blogs.org" "Blog")
             (function +org/capture-template)
             :content-before "* TODO %^{Title}"
             :immediate-finish t)
            ("T" "Clock-in Task" entry
             (file "~/Org/refile.org")
             (function +org/capture-template)
             :content-before "* TODO %^{prompt}"
             :clock-in t
             :clock-resume t)
            ("i" "Interruption" entry
             (file+headline "~/Org/refile.org" "Todo Later")
             (function +org/capture-template)
             :content-before "* TODO %^{Task}\nSCHEDULED: %t"
             :immediate-finish t)
            ("l" "Link to current file" entry
             (file "~/Org/refile.org")
             (function +org/capture-template)
             :content-before "* TODO %a")
            ("L" "(Clocked in) Link to current file" entry
             (file "~/Org/refile.org")
             (function +org/capture-template)
             :content-before "* TODO %a"
             :clock-in t
             :clock-resume t)
            ("c" "Link under current clock" entry
             (clock)
             (function +org/capture-template)
             :content-before "* TODO %a")
            ("C" "(Clocked-in) Link under current clock" entry
             (clock)
             (function +org/capture-template)
             :content-before "* TODO %a"
             :clock-in t
             :clock-resume t)
            ("k" "Push to Kindle" entry
             (file+headline "~/Org/refile.org" "Push to Kindle")
             (function +org/capture-template)
             :content-before "* TODO %a %(private/push-to-kindle \"%l\")"
             :immediate-finish t)
            ("p" "Github PR" entry
             (clock)
             (function +org/capture-template)
             :content-before "* PENDING %a"
             :immediate-finish t)
            ("d" "Daily Review" entry
             (file+headline "~/Org/review.org" "Daily Review")
             (function +org/capture-template)
             :content-before "* NEXT Review %u"
             :content-after "- Amazing things that happened today\n  1. %?\n- How could today have been even better?\n  1. "
             :clock-in t)
            ("D" "Daily Report at Ekohe" plain
             (file+headline "~/Org/ekohe.org" "Daily Report")
             "- %u\n  + Yesterday%?\n  + Today"))))
#+END_SRC
** Export
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:36]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ox
    :ensure org-plus-contrib
    :config
    (setq org-export-coding-system 'utf-8)
    (setq org-export-backends '(beamer html latex md gfm))

    (setq org-export-with-sub-superscripts '{}
          org-export-with-section-numbers 3
          org-export-with-todo-keywords nil
          org-export-with-timestamps nil)

    ;; {{ export org-mode in Chinese into PDF
    ;; @see http://freizl.github.io/posts/2012-04-06-export-orgmode-file-in-Chinese.html
    (setq org-latex-pdf-process
          '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

    ;; Use listings to export code blocks
    (setq org-latex-listings t)
    (setq org-latex-listings-options
          '(("breaklines" "")
            ("keywordstyle" "\\color{black}\\bfseries")
            ("basicstyle" "\\ttfamily\\scriptsize")))
    (add-to-list 'org-latex-packages-alist '("" "listings"))
    (add-to-list 'org-latex-packages-alist '("" "color"))

    ;; copy/pasted from spacemacs chinese layer
    (defadvice org-html-paragraph (before org-html-paragraph-advice
                                          (paragraph contents info) activate)
      "Join consecutive Chinese lines into a single long line without
  unwanted space when exporting org-mode to html."
      (let* ((origin-contents (ad-get-arg 1))
             (fix-regexp "[[:multibyte:]]")
             (fixed-contents
              (replace-regexp-in-string
               (concat
                "\\(" fix-regexp "\\) *\n *\\(" fix-regexp "\\)") "\\1\\2" origin-contents)))
        (ad-set-arg 1 fixed-contents)))

    (setq org-html-mathjax-options
          (quote
           ((path "http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_SVG")
            (scale "100")
            (align "center")
            (indent "2em")
            (mathml nil)))))
#+END_SRC
*** Markdown
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:44]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ox-md
    :ensure org-plus-contrib
    :after ox)

  (use-package ox-gfm
    :ensure org-plus-contrib
    :after ox)
#+END_SRC
** Attach
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:31]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-attach
    :ensure org-plus-contrib
    :commands 'org-attach
    :config
    (setq org-attach-directory (concat org-directory "/Attached/")))
#+END_SRC
** Habit
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:33]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-habit
    :ensure org-plus-contrib
    :config
    (setq org-habit-graph-column 50))
#+END_SRC
** Indent
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:42]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-indent
    :ensure org-plus-contrib
    :init (setq org-startup-indented t))
#+END_SRC
** CREATED attribute via org-expiry
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:42]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-expiry
    :ensure org-plus-contrib
    :after org
    :config
    (setq org-expiry-inactive-timestamps t)
    (org-expiry-insinuate))
#+END_SRC
** Babel
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:34]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ob
    :ensure org-plus-contrib
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (shell . t)
       (emacs-lisp . t)
       (latex . t)
       (python . t)
       (ruby . t)
       (org . t)
       (sql . t)
       (C . t)
       (dot . t)
       (scheme . t)
       (plantuml . t)
       (ledger . t)
       (js . t)
       ))
    (setq org-export-babel-evaluate nil
          org-confirm-babel-evaluate nil))
#+END_SRC
** org-list
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:34]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-list
    :ensure org-plus-contrib
    :init
    (setq org-cycle-include-plain-lists 'integrate))
#+END_SRC
** org-id
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:35]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-id
    :ensure org-plus-contrib
    :init
    (setq org-id-locations-file (concat +local-directory ".org-id-locations"))
    (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))
#+END_SRC
** org-mac-link
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:34]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-mac-link
    :ensure org-plus-contrib
    :commands (org-mac-safari-insert-frontmost-url
               org-mac-skim-insert-page
               org-mac-chrome-insert-frontmost-url))
#+END_SRC
** org-drill
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:45]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-drill
    :ensure org-plus-contrib
    :commands (org-drill))
#+END_SRC
** org-mime
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:45]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-mime
    :commands (org-mime-htmlize org-mime-org-buffer-htmlize))
#+END_SRC
** org-download
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:45]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :config
    (setq org-download-method 'attach)
    (setq org-download-screenshot-method "screencapture -i %s"))
#+END_SRC
** org-rich-yank
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:46]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-rich-yank
    :commands (org-rich-yank))
#+END_SRC
** smartparens-org
:PROPERTIES:
:CREATED:  [2018-03-01 Thu 12:46]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package smartparens-org
    :ensure smartparens
    :config
    (sp-with-modes 'org-mode
      (sp-local-pair "*" "*" :post-handlers '(("[d1]" "SPC")))
      (sp-local-pair "_" "_" :post-handlers '(("[d1]" "SPC")))))
#+END_SRC
